[{"/home/paul/Projects/Toptal/ReadyPrep/client/src/index.tsx":"1","/home/paul/Projects/Toptal/ReadyPrep/client/src/serviceWorker.ts":"2","/home/paul/Projects/Toptal/ReadyPrep/client/src/App.tsx":"3","/home/paul/Projects/Toptal/ReadyPrep/client/src/models/Unit.ts":"4","/home/paul/Projects/Toptal/ReadyPrep/client/src/i18n.js":"5","/home/paul/Projects/Toptal/ReadyPrep/client/src/util/trackChanges.ts":"6","/home/paul/Projects/Toptal/ReadyPrep/client/src/util/placeCursorAtEnd.ts":"7","/home/paul/Projects/Toptal/ReadyPrep/client/src/theme.ts":"8","/home/paul/Projects/Toptal/ReadyPrep/client/src/util/request.ts":"9","/home/paul/Projects/Toptal/ReadyPrep/client/src/hooks/useTemporarilyTrueState.ts":"10","/home/paul/Projects/Toptal/ReadyPrep/client/src/hooks/useQueryState.ts":"11","/home/paul/Projects/Toptal/ReadyPrep/client/src/util/setupIntent.ts":"12","/home/paul/Projects/Toptal/ReadyPrep/client/src/hooks/useNumberField.ts":"13","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/BlockNavigationDialog.tsx":"14","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Footer.tsx":"15","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Icons.tsx":"16","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Button.tsx":"17","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/DeleteButton.tsx":"18","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/DeleteDialog.tsx":"19","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Divider.tsx":"20","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/NameInput.tsx":"21","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/TextInput.tsx":"22","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/UnitInput.tsx":"23","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/WarningIcon.tsx":"24","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PageSizeSelector.tsx":"25","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Paginator.tsx":"26","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/UnitSelector.tsx":"27","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SearchInput.tsx":"28","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/ChangePlanDialog.tsx":"29","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/EditUnitDialog.tsx":"30","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PlanDetails.tsx":"31","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/GoogleButton.tsx":"32","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PasswordInput.tsx":"33","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SectionNameDialog.tsx":"34","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/UploadButton.tsx":"35","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/BillingDialog.tsx":"36","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/IngredientSelector.tsx":"37","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/RecipeTable.tsx":"38","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/MenuItemSelector.tsx":"39","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/ConversionsDialog.tsx":"40","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/IngredientInput.tsx":"41","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/GettingStarted.tsx":"42","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Message.tsx":"43","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/TrialMessage.tsx":"44","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/index.ts":"45","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Layouts/index.ts":"46","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Logo.tsx":"47","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/UsedInList.tsx":"48","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/ParentBadge.tsx":"49","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SandboxDialog/index.ts":"50","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Layouts/MainLayout/index.ts":"51","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PopupNotification.tsx":"52","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Layouts/MainLayout/MainLayout.tsx":"53","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SandboxDialog/SandboxDialog.tsx":"54","/home/paul/Projects/Toptal/ReadyPrep/client/src/util/formatDate.ts":"55","/home/paul/Projects/Toptal/ReadyPrep/client/src/util/formatNumber.ts":"56","/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/print-recipes.form.ts":"57","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/DemoWidget.tsx":"58","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/PrepLogSettingsDialog/index.ts":"59","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/PrepLogSettingsDialog/PrepLogSettingsDialogContainer.tsx":"60","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/PrepLogSettingsDialog/PrepLogSettingsDialog.tsx":"61","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/ChangePlanDialog.tsx":"62","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Header.tsx":"63","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/MenuItemsListPage.tsx":"64","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/MenuPage.tsx":"65","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/FaqPage.tsx":"66","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/LoginPage.tsx":"67","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/MenuItemPage.tsx":"68","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PosMenuItemAssociationsPage.tsx":"69","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PasswordResetPage.tsx":"70","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/HomePage.tsx":"71","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PrepLogPage.tsx":"72","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryListPage.tsx":"73","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/MenusListPage.tsx":"74","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/UnitsPage.tsx":"75","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PrepPage.tsx":"76","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SignUpPage.tsx":"77","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PrivacyPolicyPage.tsx":"78","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/TermsOfServicePage.tsx":"79","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SettingsPage.tsx":"80","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PrepListPage.tsx":"81","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/index.ts":"82","/home/paul/Projects/Toptal/ReadyPrep/client/src/enum/plans.enum.ts":"83","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SetupRestaurantDetailsPage/styles.ts":"84","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/NavBar.tsx":"85","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Title.tsx":"86","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/ForwardButton.tsx":"87","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useLocationsApi.api.hook.ts":"88","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/ConversionsDialog.tsx":"89","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/BackToLink.tsx":"90","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/RecipeTable.tsx":"91","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/UomSettings/UnitRow.tsx":"92","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Selector.tsx":"93","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SquareButton/index.ts":"94","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/locations/locations.api.ts":"95","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/UnitSelector.tsx":"96","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/IngredientSelector.tsx":"97","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SetupRestaurantDetailsPage/index.ts":"98","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PaginationSection/index.ts":"99","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PageHeader/index.ts":"100","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/ViewOrderPage/index.ts":"101","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorCatalogPage/index.ts":"102","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorPage/index.ts":"103","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorsPage/index.ts":"104","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SandboxLandingPage/index.ts":"105","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryStockPage/index.ts":"106","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryLogPage/index.ts":"107","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/index.ts":"108","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/OrderPage/index.ts":"109","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/OrdersPage/index.ts":"110","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicePage/index.ts":"111","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicesPage/index.ts":"112","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingPage/index.ts":"113","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingLogPage/index.ts":"114","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingListPage/index.ts":"115","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/DailyPrepPage/index.ts":"116","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingListsPage/index.ts":"117","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SquareButton/ConnectSquareButton.tsx":"118","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SquareButton/SquareConnectionButton.tsx":"119","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SquareButton/DisconnectSquareButton.tsx":"120","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SetupRestaurantDetailsPage/SetupRestaurantDetailsPage.tsx":"121","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PageHeader/PageHeader.tsx":"122","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PaginationSection/PaginationSection.tsx":"123","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorPage/VendorPage.tsx":"124","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SandboxLandingPage/SandboxLandingPage.tsx":"125","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorsPage/VendorsPage.tsx":"126","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/ViewOrderPage/ViewOrderPage.tsx":"127","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryStockPage/PantryStockPage.tsx":"128","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorCatalogPage/VendorCatalogPage.tsx":"129","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicePage/InvoicePage.tsx":"130","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/OrdersPage/OrdersPage.tsx":"131","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/OrderPage/OrderPage.tsx":"132","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/DailyPrepPage/DailyPrepPage.tsx":"133","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingLogPage/CountingLogPage.tsx":"134","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingListPage/CountingListPage.tsx":"135","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingListsPage/CountingListsPage.tsx":"136","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicesPage/InvoicesPage.tsx":"137","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingPage/CountingPage.tsx":"138","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/PantryPage.tsx":"139","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryLogPage/PantryLogPage.tsx":"140","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useVendorApi.api.hook.ts":"141","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/ViewOrderPage/styles.ts":"142","/home/paul/Projects/Toptal/ReadyPrep/client/src/hooks/useProfile.ts":"143","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/DailyPrepPage/state.ts":"144","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useCountingListsApi.api.hook.ts":"145","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useCountingApi.api.hook.ts":"146","/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/index.ts":"147","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor.api.ts":"148","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/index.ts":"149","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useIngredientsApi.api.hook.ts":"150","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/CalculatedPricePerUom.tsx":"151","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/PacksTable/PacksTable.tsx":"152","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/DailyPrepPage/PrintRecipesDialog.tsx":"153","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/index.ts":"154","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/index.ts":"155","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting-lists/counting-lists.api.ts":"156","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/app/index.ts":"157","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useInvoiceApi.api.hook.ts":"158","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicePage/CatalogItemInput.tsx":"159","/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/restaurant-details.form.ts":"160","/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/vendor-item.form.ts":"161","/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/vendor.form.ts":"162","/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/pantry-ingredient.form.ts":"163","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/counting.api.ts":"164","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/ingredients/ingredients.api.ts":"165","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/index.ts":"166","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoice.api.ts":"167","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/PacksTable/PackRow.tsx":"168","/home/paul/Projects/Toptal/ReadyPrep/client/src/enum/order-methods.enum.ts":"169","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/VendorSelector/index.ts":"170","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/CreateCatalogItemDialog/index.ts":"171","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-item.api.ts":"172","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/vendor.api.model.ts":"173","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/invoice-item.api.model.ts":"174","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/order.api.model.ts":"175","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/count-summary.interface.ts":"176","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/invoice.api.model.ts":"177","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/counting-list-summary.interface.ts":"178","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/vendor-item.api.model.ts":"179","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/pantry/interface/get-inventory.api.interface.ts":"180","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/interface/get-count.api.interface.ts":"181","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/interface/create-count.api.interface.ts":"182","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/interface/update-count.api.interface.ts":"183","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/VendorInput/index.ts":"184","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/app/UomConversionDialog/index.ts":"185","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/DateInput/index.ts":"186","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/CatalogItemInput/index.ts":"187","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/index.ts":"188","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/index.ts":"189","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/index.ts":"190","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/VendorSelector/VendorSelector.tsx":"191","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-items/interface/index.ts":"192","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/profile/index.ts":"193","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-items/index.ts":"194","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/CreateCatalogItemDialog/EditCatalogItemDialog.tsx":"195","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/index.ts":"196","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/index.ts":"197","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/index.ts":"198","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/CreateCatalogItemDialog/CreateCatalogItemDialog.tsx":"199","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/VendorInput/VendorInput.tsx":"200","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/app/UomConversionDialog/UomConversionDialog.tsx":"201","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/DateInput/DateInput.tsx":"202","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/CatalogItemInput/CatalogItemInput.tsx":"203","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useVendorItemApi.api.hook.ts":"204","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/UpdateVendor.api.interface.ts":"205","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/profile/profile.api.ts":"206","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/UpdateInvoice.api.interface.ts":"207","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/ListInvoices.api.interface.ts":"208","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/GetInvoice.api.interface.ts":"209","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/CreateInvoice.api.interface.ts":"210","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/DateInput/styles.ts":"211","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-items/interface/UpdateVendorItem.api.interface.ts":"212","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-items/interface/CreateVendorItem.api.interface.ts":"213","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/ListVendors.api.interface.ts":"214","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/GetVendor.api.interface.ts":"215","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/CreateVendor.api.interface.ts":"216","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useProfileApi.api.hook.ts":"217","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/profile/interface/index.ts":"218","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting-lists/interface/get-counting-list.api.interface.ts":"219","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/profile/interface/get-profile.response.ts":"220","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/Pantry/IngredientRow.tsx":"221","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/MenuItemSelector.tsx":"222"},{"size":594,"mtime":1629925691072,"results":"223","hashOfConfig":"224"},{"size":5378,"mtime":1629925691072,"results":"225","hashOfConfig":"224"},{"size":15270,"mtime":1629925703392,"results":"226","hashOfConfig":"224"},{"size":260,"mtime":1629925691072,"results":"227","hashOfConfig":"224"},{"size":544,"mtime":1629925691072,"results":"228","hashOfConfig":"224"},{"size":381,"mtime":1629925691082,"results":"229","hashOfConfig":"224"},{"size":324,"mtime":1629925691082,"results":"230","hashOfConfig":"224"},{"size":7077,"mtime":1629925691082,"results":"231","hashOfConfig":"224"},{"size":1686,"mtime":1629925691082,"results":"232","hashOfConfig":"224"},{"size":574,"mtime":1629925691072,"results":"233","hashOfConfig":"224"},{"size":1118,"mtime":1629925691072,"results":"234","hashOfConfig":"224"},{"size":1327,"mtime":1629925691082,"results":"235","hashOfConfig":"224"},{"size":1275,"mtime":1629925691072,"results":"236","hashOfConfig":"224"},{"size":2326,"mtime":1629925691062,"results":"237","hashOfConfig":"224"},{"size":1986,"mtime":1629925691062,"results":"238","hashOfConfig":"224"},{"size":23003,"mtime":1629925691062,"results":"239","hashOfConfig":"224"},{"size":1082,"mtime":1629925691062,"results":"240","hashOfConfig":"224"},{"size":775,"mtime":1629925691062,"results":"241","hashOfConfig":"224"},{"size":4925,"mtime":1629925691062,"results":"242","hashOfConfig":"224"},{"size":597,"mtime":1629925691062,"results":"243","hashOfConfig":"224"},{"size":2874,"mtime":1629925691062,"results":"244","hashOfConfig":"224"},{"size":2015,"mtime":1629925691062,"results":"245","hashOfConfig":"224"},{"size":2166,"mtime":1629925691062,"results":"246","hashOfConfig":"224"},{"size":504,"mtime":1629925691062,"results":"247","hashOfConfig":"224"},{"size":1202,"mtime":1629925691062,"results":"248","hashOfConfig":"224"},{"size":3100,"mtime":1629925691062,"results":"249","hashOfConfig":"224"},{"size":7261,"mtime":1629925691062,"results":"250","hashOfConfig":"224"},{"size":1525,"mtime":1629925691062,"results":"251","hashOfConfig":"224"},{"size":6881,"mtime":1629925691062,"results":"252","hashOfConfig":"224"},{"size":5231,"mtime":1629925691062,"results":"253","hashOfConfig":"224"},{"size":3361,"mtime":1629925691062,"results":"254","hashOfConfig":"224"},{"size":903,"mtime":1629925691062,"results":"255","hashOfConfig":"224"},{"size":1232,"mtime":1629925691062,"results":"256","hashOfConfig":"224"},{"size":2893,"mtime":1629925691062,"results":"257","hashOfConfig":"224"},{"size":3158,"mtime":1629925691062,"results":"258","hashOfConfig":"224"},{"size":3864,"mtime":1629925691062,"results":"259","hashOfConfig":"224"},{"size":5378,"mtime":1629925691062,"results":"260","hashOfConfig":"224"},{"size":13121,"mtime":1629925691062,"results":"261","hashOfConfig":"224"},{"size":3598,"mtime":1629925691062,"results":"262","hashOfConfig":"224"},{"size":12560,"mtime":1629925691062,"results":"263","hashOfConfig":"224"},{"size":2223,"mtime":1629925691062,"results":"264","hashOfConfig":"224"},{"size":2920,"mtime":1629925691062,"results":"265","hashOfConfig":"224"},{"size":1078,"mtime":1629925691062,"results":"266","hashOfConfig":"224"},{"size":1484,"mtime":1629925691062,"results":"267","hashOfConfig":"224"},{"size":448,"mtime":1629925691062,"results":"268","hashOfConfig":"224"},{"size":30,"mtime":1629925691062,"results":"269","hashOfConfig":"224"},{"size":241,"mtime":1629925691062,"results":"270","hashOfConfig":"224"},{"size":2735,"mtime":1629925691062,"results":"271","hashOfConfig":"224"},{"size":547,"mtime":1629925691062,"results":"272","hashOfConfig":"224"},{"size":33,"mtime":1629925691062,"results":"273","hashOfConfig":"224"},{"size":30,"mtime":1629925691062,"results":"274","hashOfConfig":"224"},{"size":970,"mtime":1629925691062,"results":"275","hashOfConfig":"224"},{"size":8445,"mtime":1629925691062,"results":"276","hashOfConfig":"224"},{"size":3729,"mtime":1629925691062,"results":"277","hashOfConfig":"224"},{"size":229,"mtime":1629925691082,"results":"278","hashOfConfig":"224"},{"size":145,"mtime":1629925691082,"results":"279","hashOfConfig":"224"},{"size":271,"mtime":1629925691072,"results":"280","hashOfConfig":"224"},{"size":5838,"mtime":1629925691062,"results":"281","hashOfConfig":"224"},{"size":91,"mtime":1629925691062,"results":"282","hashOfConfig":"224"},{"size":405,"mtime":1629925691062,"results":"283","hashOfConfig":"224"},{"size":363,"mtime":1629925691062,"results":"284","hashOfConfig":"224"},{"size":2843,"mtime":1629925691062,"results":"285","hashOfConfig":"224"},{"size":3217,"mtime":1629925691062,"results":"286","hashOfConfig":"224"},{"size":9853,"mtime":1629925691062,"results":"287","hashOfConfig":"224"},{"size":15717,"mtime":1629925691062,"results":"288","hashOfConfig":"224"},{"size":5819,"mtime":1629925691062,"results":"289","hashOfConfig":"224"},{"size":4777,"mtime":1629925691062,"results":"290","hashOfConfig":"224"},{"size":10459,"mtime":1629925691062,"results":"291","hashOfConfig":"224"},{"size":11248,"mtime":1629925691072,"results":"292","hashOfConfig":"224"},{"size":5029,"mtime":1629925691072,"results":"293","hashOfConfig":"224"},{"size":11381,"mtime":1629925691062,"results":"294","hashOfConfig":"224"},{"size":3400,"mtime":1629925691072,"results":"295","hashOfConfig":"224"},{"size":8470,"mtime":1629925691072,"results":"296","hashOfConfig":"224"},{"size":8089,"mtime":1629925691062,"results":"297","hashOfConfig":"224"},{"size":7314,"mtime":1629925691072,"results":"298","hashOfConfig":"224"},{"size":14634,"mtime":1629925691072,"results":"299","hashOfConfig":"224"},{"size":4678,"mtime":1629925691072,"results":"300","hashOfConfig":"224"},{"size":4190,"mtime":1629925691072,"results":"301","hashOfConfig":"224"},{"size":7174,"mtime":1629925691072,"results":"302","hashOfConfig":"224"},{"size":18864,"mtime":1629925691072,"results":"303","hashOfConfig":"224"},{"size":9274,"mtime":1629925691072,"results":"304","hashOfConfig":"224"},{"size":608,"mtime":1629925691072,"results":"305","hashOfConfig":"224"},{"size":146,"mtime":1629925691072,"results":"306","hashOfConfig":"224"},{"size":231,"mtime":1629925691072,"results":"307","hashOfConfig":"224"},{"size":4304,"mtime":1629925691062,"results":"308","hashOfConfig":"224"},{"size":773,"mtime":1629925691072,"results":"309","hashOfConfig":"224"},{"size":789,"mtime":1629925691062,"results":"310","hashOfConfig":"224"},{"size":310,"mtime":1629925691072,"results":"311","hashOfConfig":"224"},{"size":487,"mtime":1629925691062,"results":"312","hashOfConfig":"224"},{"size":812,"mtime":1629925691062,"results":"313","hashOfConfig":"224"},{"size":765,"mtime":1629925691072,"results":"314","hashOfConfig":"224"},{"size":2329,"mtime":1629925691072,"results":"315","hashOfConfig":"224"},{"size":5219,"mtime":1629925691062,"results":"316","hashOfConfig":"224"},{"size":123,"mtime":1629925691062,"results":"317","hashOfConfig":"224"},{"size":560,"mtime":1629925691072,"results":"318","hashOfConfig":"224"},{"size":595,"mtime":1629925691072,"results":"319","hashOfConfig":"224"},{"size":1322,"mtime":1629925691062,"results":"320","hashOfConfig":"224"},{"size":46,"mtime":1629925691072,"results":"321","hashOfConfig":"224"},{"size":36,"mtime":1629925691062,"results":"322","hashOfConfig":"224"},{"size":30,"mtime":1629925691062,"results":"323","hashOfConfig":"224"},{"size":33,"mtime":1629925691072,"results":"324","hashOfConfig":"224"},{"size":37,"mtime":1629925691072,"results":"325","hashOfConfig":"224"},{"size":30,"mtime":1629925691072,"results":"326","hashOfConfig":"224"},{"size":31,"mtime":1629925691072,"results":"327","hashOfConfig":"224"},{"size":38,"mtime":1629925691072,"results":"328","hashOfConfig":"224"},{"size":35,"mtime":1629925691072,"results":"329","hashOfConfig":"224"},{"size":33,"mtime":1629925691072,"results":"330","hashOfConfig":"224"},{"size":29,"mtime":1629925691072,"results":"331","hashOfConfig":"224"},{"size":28,"mtime":1629925691072,"results":"332","hashOfConfig":"224"},{"size":29,"mtime":1629925691072,"results":"333","hashOfConfig":"224"},{"size":30,"mtime":1629925691062,"results":"334","hashOfConfig":"224"},{"size":31,"mtime":1629925691062,"results":"335","hashOfConfig":"224"},{"size":31,"mtime":1629925691062,"results":"336","hashOfConfig":"224"},{"size":34,"mtime":1629925691062,"results":"337","hashOfConfig":"224"},{"size":35,"mtime":1629925691062,"results":"338","hashOfConfig":"224"},{"size":33,"mtime":1629925691062,"results":"339","hashOfConfig":"224"},{"size":36,"mtime":1629925691062,"results":"340","hashOfConfig":"224"},{"size":1627,"mtime":1629925691062,"results":"341","hashOfConfig":"224"},{"size":602,"mtime":1629925691062,"results":"342","hashOfConfig":"224"},{"size":1298,"mtime":1629925691062,"results":"343","hashOfConfig":"224"},{"size":3132,"mtime":1629925691072,"results":"344","hashOfConfig":"224"},{"size":1116,"mtime":1629925691062,"results":"345","hashOfConfig":"224"},{"size":1222,"mtime":1629925691062,"results":"346","hashOfConfig":"224"},{"size":9103,"mtime":1629925691072,"results":"347","hashOfConfig":"224"},{"size":3236,"mtime":1629925691072,"results":"348","hashOfConfig":"224"},{"size":4789,"mtime":1629925691072,"results":"349","hashOfConfig":"224"},{"size":3835,"mtime":1629925691072,"results":"350","hashOfConfig":"224"},{"size":4180,"mtime":1629925691072,"results":"351","hashOfConfig":"224"},{"size":6881,"mtime":1629925691072,"results":"352","hashOfConfig":"224"},{"size":12107,"mtime":1629925691062,"results":"353","hashOfConfig":"224"},{"size":5084,"mtime":1629925691072,"results":"354","hashOfConfig":"224"},{"size":11419,"mtime":1629925691072,"results":"355","hashOfConfig":"224"},{"size":8878,"mtime":1629925691062,"results":"356","hashOfConfig":"224"},{"size":3205,"mtime":1629925691062,"results":"357","hashOfConfig":"224"},{"size":19026,"mtime":1629925691062,"results":"358","hashOfConfig":"224"},{"size":3133,"mtime":1629925691062,"results":"359","hashOfConfig":"224"},{"size":6183,"mtime":1629925691062,"results":"360","hashOfConfig":"224"},{"size":8298,"mtime":1629925691062,"results":"361","hashOfConfig":"224"},{"size":13259,"mtime":1629925691072,"results":"362","hashOfConfig":"224"},{"size":2932,"mtime":1629925691072,"results":"363","hashOfConfig":"224"},{"size":276,"mtime":1629925691072,"results":"364","hashOfConfig":"224"},{"size":226,"mtime":1629925691072,"results":"365","hashOfConfig":"224"},{"size":1013,"mtime":1629925691072,"results":"366","hashOfConfig":"224"},{"size":1353,"mtime":1629925691062,"results":"367","hashOfConfig":"224"},{"size":348,"mtime":1629925691072,"results":"368","hashOfConfig":"224"},{"size":301,"mtime":1629925691072,"results":"369","hashOfConfig":"224"},{"size":190,"mtime":1629925691072,"results":"370","hashOfConfig":"224"},{"size":1117,"mtime":1629925691082,"results":"371","hashOfConfig":"224"},{"size":76,"mtime":1629925691072,"results":"372","hashOfConfig":"224"},{"size":328,"mtime":1629925691072,"results":"373","hashOfConfig":"224"},{"size":2724,"mtime":1629925691072,"results":"374","hashOfConfig":"224"},{"size":2384,"mtime":1629925691072,"results":"375","hashOfConfig":"224"},{"size":7158,"mtime":1629925691062,"results":"376","hashOfConfig":"224"},{"size":23,"mtime":1629925691062,"results":"377","hashOfConfig":"224"},{"size":95,"mtime":1629925691062,"results":"378","hashOfConfig":"224"},{"size":1162,"mtime":1629925691072,"results":"379","hashOfConfig":"224"},{"size":39,"mtime":1629925691062,"results":"380","hashOfConfig":"224"},{"size":284,"mtime":1629925691072,"results":"381","hashOfConfig":"224"},{"size":1177,"mtime":1629925691062,"results":"382","hashOfConfig":"224"},{"size":327,"mtime":1629925691072,"results":"383","hashOfConfig":"224"},{"size":473,"mtime":1629925691072,"results":"384","hashOfConfig":"224"},{"size":1727,"mtime":1629925691072,"results":"385","hashOfConfig":"224"},{"size":570,"mtime":1629925691072,"results":"386","hashOfConfig":"224"},{"size":826,"mtime":1629925691072,"results":"387","hashOfConfig":"224"},{"size":534,"mtime":1629925691072,"results":"388","hashOfConfig":"224"},{"size":1189,"mtime":1629925691072,"results":"389","hashOfConfig":"224"},{"size":688,"mtime":1629925691072,"results":"390","hashOfConfig":"224"},{"size":4928,"mtime":1629925691072,"results":"391","hashOfConfig":"224"},{"size":116,"mtime":1629925691072,"results":"392","hashOfConfig":"224"},{"size":33,"mtime":1629925691072,"results":"393","hashOfConfig":"224"},{"size":84,"mtime":1629925691062,"results":"394","hashOfConfig":"224"},{"size":733,"mtime":1629925691082,"results":"395","hashOfConfig":"224"},{"size":384,"mtime":1629925691072,"results":"396","hashOfConfig":"224"},{"size":86,"mtime":1629925691072,"results":"397","hashOfConfig":"224"},{"size":259,"mtime":1629925691072,"results":"398","hashOfConfig":"224"},{"size":110,"mtime":1629925691072,"results":"399","hashOfConfig":"224"},{"size":261,"mtime":1629925691072,"results":"400","hashOfConfig":"224"},{"size":93,"mtime":1629925691072,"results":"401","hashOfConfig":"224"},{"size":232,"mtime":1629925691072,"results":"402","hashOfConfig":"224"},{"size":212,"mtime":1629925691072,"results":"403","hashOfConfig":"224"},{"size":239,"mtime":1629925691072,"results":"404","hashOfConfig":"224"},{"size":143,"mtime":1629925691072,"results":"405","hashOfConfig":"224"},{"size":89,"mtime":1629925691072,"results":"406","hashOfConfig":"224"},{"size":30,"mtime":1629925691062,"results":"407","hashOfConfig":"224"},{"size":38,"mtime":1629925691062,"results":"408","hashOfConfig":"224"},{"size":29,"mtime":1629925691062,"results":"409","hashOfConfig":"224"},{"size":35,"mtime":1629925691062,"results":"410","hashOfConfig":"224"},{"size":351,"mtime":1629925691072,"results":"411","hashOfConfig":"224"},{"size":29,"mtime":1629925691082,"results":"412","hashOfConfig":"224"},{"size":179,"mtime":1629925691082,"results":"413","hashOfConfig":"224"},{"size":2831,"mtime":1629925691072,"results":"414","hashOfConfig":"224"},{"size":99,"mtime":1629925691082,"results":"415","hashOfConfig":"224"},{"size":60,"mtime":1629925691072,"results":"416","hashOfConfig":"224"},{"size":28,"mtime":1629925691082,"results":"417","hashOfConfig":"224"},{"size":8388,"mtime":1629925691062,"results":"418","hashOfConfig":"224"},{"size":32,"mtime":1629925691072,"results":"419","hashOfConfig":"224"},{"size":28,"mtime":1629925691072,"results":"420","hashOfConfig":"224"},{"size":183,"mtime":1629925691072,"results":"421","hashOfConfig":"224"},{"size":7956,"mtime":1629925691062,"results":"422","hashOfConfig":"224"},{"size":3848,"mtime":1629925691062,"results":"423","hashOfConfig":"224"},{"size":845,"mtime":1629925691062,"results":"424","hashOfConfig":"224"},{"size":2342,"mtime":1629925691062,"results":"425","hashOfConfig":"224"},{"size":2103,"mtime":1629925691062,"results":"426","hashOfConfig":"224"},{"size":309,"mtime":1629925691072,"results":"427","hashOfConfig":"224"},{"size":175,"mtime":1629925691082,"results":"428","hashOfConfig":"224"},{"size":199,"mtime":1629925691082,"results":"429","hashOfConfig":"224"},{"size":464,"mtime":1629925691072,"results":"430","hashOfConfig":"224"},{"size":144,"mtime":1629925691072,"results":"431","hashOfConfig":"224"},{"size":118,"mtime":1629925691072,"results":"432","hashOfConfig":"224"},{"size":262,"mtime":1629925691072,"results":"433","hashOfConfig":"224"},{"size":164,"mtime":1629925691062,"results":"434","hashOfConfig":"224"},{"size":244,"mtime":1629925691082,"results":"435","hashOfConfig":"224"},{"size":226,"mtime":1629925691082,"results":"436","hashOfConfig":"224"},{"size":139,"mtime":1629925691082,"results":"437","hashOfConfig":"224"},{"size":114,"mtime":1629925691082,"results":"438","hashOfConfig":"224"},{"size":214,"mtime":1629925691082,"results":"439","hashOfConfig":"224"},{"size":292,"mtime":1629925691072,"results":"440","hashOfConfig":"224"},{"size":40,"mtime":1629925691072,"results":"441","hashOfConfig":"224"},{"size":212,"mtime":1629925691072,"results":"442","hashOfConfig":"224"},{"size":313,"mtime":1629925691072,"results":"443","hashOfConfig":"224"},{"size":1282,"mtime":1629925691072,"results":"444","hashOfConfig":"224"},{"size":1078,"mtime":1629925691062,"results":"445","hashOfConfig":"224"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sm7xh2",{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"500","messages":"501","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"526","messages":"527","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"536","messages":"537","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"540","messages":"541","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"569","messages":"570","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"585"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"593","messages":"594","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"647","messages":"648","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"658","messages":"659","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"680","messages":"681","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"682","messages":"683","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"704","messages":"705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"714","messages":"715","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"722","messages":"723","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"727","messages":"728","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"729","messages":"730","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"731","messages":"732","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"733","messages":"734","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"735","messages":"736","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"737"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"751","messages":"752","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"753","messages":"754","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"757","messages":"758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"759","messages":"760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"777","messages":"778","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"790","messages":"791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"796","messages":"797","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"798","messages":"799","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"804","messages":"805","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"806","messages":"807","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"808","messages":"809","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"812","messages":"813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"818","messages":"819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"820","messages":"821","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"822","messages":"823","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"824","messages":"825","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"826","messages":"827","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"828","messages":"829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"830","messages":"831","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"832","messages":"833","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"834","messages":"835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"838","messages":"839","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"840","messages":"841","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"844","messages":"845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"846","messages":"847","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"850","messages":"851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"854","messages":"855","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"858","messages":"859","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"860","messages":"861","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"862","messages":"863","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"864"},{"filePath":"865","messages":"866","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"867","messages":"868","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"869","messages":"870","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"871","messages":"872","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"873","messages":"874","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"875","messages":"876","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"877"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"880","messages":"881","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"882"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"887","messages":"888","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"889","messages":"890","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"891","messages":"892","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"893","messages":"894","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"895","messages":"896","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"897","messages":"898","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"899","messages":"900","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"901","messages":"902","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"903","messages":"904","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"905","messages":"906","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"907","messages":"908","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"909","messages":"910","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"911","messages":"912","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"913","messages":"914","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"915","messages":"916","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"917","messages":"918","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"919","messages":"920","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"921"},"/home/paul/Projects/Toptal/ReadyPrep/client/src/index.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/serviceWorker.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/App.tsx",["922","923","924","925"],"import './App.css';\nimport './i18n';\n\nimport { Box, CircularProgress, CssBaseline, ThemeProvider, Typography } from '@material-ui/core';\nimport { BrowserRouter, Link, Route, Switch, useHistory, useLocation } from 'react-router-dom';\nimport { CountingLogPage, CountingPage, DailyPrepPage, InvoicesPage, OrderPage, OrdersPage, InvoicePage, SandboxLandingPage, VendorCatalogPage, VendorPage, VendorsPage, CountingListsPage, CountingListPage, ViewOrderPage, SetupRestaurantDetailsPage } from './components/src/Pages';\nimport React, { FunctionComponent, ReactElement, Suspense, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { BlockNavigationDialog } from './components/UI/BlockNavigationDialog';\nimport ChangePlanDialog from './components/src/ChangePlanDialog';\nimport DayJsUtils from \"@date-io/dayjs\";\nimport { FaqPage } from './components/src/Pages/FaqPage';\nimport { Footer } from './components/UI/Footer';\nimport { Header } from './components/src/Header';\nimport { HomePage } from './components/src/Pages/HomePage';\nimport { LoginPage } from './components/src/Pages/LoginPage';\nimport { MainLayout } from './components/Layouts';\nimport { MenuItemPage } from './components/src/Pages/MenuItemPage';\nimport { MenuItemsListPage } from './components/src/Pages/MenuItemsListPage';\nimport { MenuPage } from './components/src/Pages/MenuPage';\nimport { MenusListPage } from './components/src/Pages/MenusListPage';\nimport { Message } from './components/UI/Message';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { PantryListPage } from './components/src/Pages/PantryListPage';\nimport { PantryPage } from './components/src/Pages';\nimport { PasswordResetPage } from './components/src/Pages/PasswordResetPage';\nimport { Plan } from './enum/plans.enum';\nimport { PosMenuItemAssociationsPage } from './components/src/Pages/PosMenuItemAssociationsPage';\nimport { PrepListPage } from './components/src/Pages/PrepListPage';\nimport PrepLogPage from './components/src/Pages/PrepLogPage';\nimport { PrepPage } from './components/src/Pages/PrepPage';\nimport { PrivacyPolicyPage } from './components/src/Pages/PrivacyPolicyPage';\nimport ReactDOM from 'react-dom';\nimport { atom, RecoilRoot, useRecoilState } from 'recoil';\nimport { SWRConfig } from 'swr';\nimport { SandboxDialog } from './components/UI';\nimport { SettingsPage } from './components/src/Pages/SettingsPage';\nimport { SignUpPage } from './components/src/Pages/SignUpPage';\nimport { SnackbarProvider } from 'notistack';\nimport { TermsOfServicePage } from './components/src/Pages/TermsOfServicePage';\nimport { TrialMessage } from './components/UI/TrialMessage';\nimport { UnitsPage } from './components/src/Pages/UnitsPage';\nimport { User } from './models/User';\nimport dayjs from \"dayjs\";\nimport request from './util/request';\nimport theme from './theme';\nimport utc from \"dayjs/plugin/utc\";\n\ndayjs.extend(utc);\nconst utcDayJs = (...args: any[]) => dayjs(...args).utc();\n\nexport const planUpgradeRequiredDialogState = atom( {\n  key: 'PlanUpgradeRequiredDialog',\n  default: {\n    message: null as string|null,\n    plan: 'BASIC' as Plan,\n  }\n} );\n\ndeclare global {\n  interface Window {\n    gtag: any;\n  }\n}\n\nexport const AppContext = React.createContext( {\n  handlePlanUpgradeRequired: ( plan: Plan ) => { },\n  locationId: null,\n} );\n\nconst NotFoundPage = ( { user }: { user?: User } ): ReactElement =>\n  <MainLayout>\n    Not Found\n  </MainLayout>\n;\n\nconst Loading: FunctionComponent<{ loading: boolean }> = ( { loading, children } ) => {\n  if ( ! loading )\n    return <>{ children }</>;\n\n  return (\n    <Box height=\"100vh\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n      <CircularProgress />\n    </Box>\n  );\n};\n\nexport const Main = ( ): ReactElement => {\n  const [ user, setUser ] = useState( null as any );\n  const [ loading, setLoading ] = useState( true );\n  const [ planDialog, setPlanDialog ] = useRecoilState( planUpgradeRequiredDialogState );\n  const { message: planDialogMessage, plan: planDialogPlan } = planDialog;\n  const [ isShowingSandboxDialog, setShowingSandboxDialog ] = useState( false );\n  const [ isSandboxDialogLoading, setSandboxDialogLoading ] = useState( false );\n\n  const location = useLocation();\n  const history = useHistory();\n\n  const handlePlanUpgradeRequired = useCallback( async ( plan: Plan ) => {\n    setPlanDialog({\n      message: 'A plan upgrade is required' as string|null,\n      plan,\n    });\n  }, [] );\n\n  const appContextValue = useMemo( () => (\n    { \n      handlePlanUpgradeRequired,\n      locationId: user?.location?.id,\n    }\n  ), [ handlePlanUpgradeRequired, user ] );\n\n  const handleConfirmLeaveSandbox = async ( reset: boolean ): Promise<void> => {\n    const body = {\n      reset,\n    };\n    setSandboxDialogLoading( true );\n    try {\n      await request.post( '/sandbox/leave', { body } );\n      await loadUser();\n    } catch ( e ) {\n      // Do nothing\n    }\n    setSandboxDialogLoading( false );\n    setShowingSandboxDialog( false );\n\n    history.go( 0 );\n  };\n\n  useEffect( () => {\n    ( async () => {\n      if ( [ '/', '/login', '/signup', '/signup/confirm' ].includes( location.pathname ) )\n        return;\n      \n      await loadUser();\n    } )();\n  }, [ location ] );\n\n  const handleLogIn = async ( ): Promise<void> => {\n    const user = await loadUser();\n    history.push( user?.isInSandboxMode ? '/getting-started' : '/items', { previousTitle: document.title } );\n  };\n\n  const loadUser = async ( ): Promise<User|undefined> => {\n    try {\n      const { status, body } = await request.get( '/profile', { noAuth: true } );\n\n      if ( status === 200 ) {\n        if ( ! body.location?.id && history.location.pathname !== '/setup' ) {\n          history.replace( '/setup' );\n        }\n        setUser( body );\n        window.gtag?.( 'set', { user_id: body.id } );\n      }\n      \n      return body;\n    } catch {\n      // Do nothing\n    } finally {\n      setLoading( false );\n    }\n\n  };\n\n  return ( <>\n    <Switch>\n      <Route path=\"/\" exact render={ () => {\n        if ( ! [ 'staging.readyprep.io', 'localhost', '127.0.0.1' ].includes( window.location.hostname ) )\n          window.location.href = 'https://readyprep.io';\n        return <HomePage />;\n      } } />\n      <Route path=\"/privacy-policy\" exact render={ () => window.location.href = 'https://readyprep.io/privacy' } />\n      <Route path=\"/terms-of-service\" exact render={ () => window.location.href = 'https://readyprep.io/terms-of-service' } />\n      <Route path=\"/login\" exact>\n        <LoginPage onLogIn={ handleLogIn } />\n      </Route>\n      <Route path=\"/signup/confirm\" exact>\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"stretch\">\n          <Box flex={'0 1 88vh'} display=\"flex\" flexDirection=\"column\">\n            <Box flex={'1 1'}><Header /></Box>\n            <Box flex={1} textAlign=\"center\">\n              <Typography>Thank you. Please check your email to complete your registration.</Typography>\n            </Box>\n          </Box>\n          <Box flex={'1 0 12vh'} display=\"flex\"><Footer /></Box>\n        </Box>\n      </Route>\n      <Route path=\"/po/:id\" exact>\n        <ViewOrderPage />\n      </Route>\n      <Route path=\"/signup\" exact>\n        <SignUpPage />\n      </Route>\n      <Route path=\"/password/reset/:token?\">\n        <PasswordResetPage />\n      </Route>\n      <Route path=\"/privacy-policy\">\n        <Loading loading={loading}>\n          <Header user={user} />\n          <PrivacyPolicyPage />\n        </Loading>\n      </Route>\n      <Route path=\"/terms-of-service\">\n        <Loading loading={loading}>\n          <Header user={user} />\n          <TermsOfServicePage />\n        </Loading>\n      </Route>\n      <Route path=\"/faq\">\n        <Loading loading={loading}>\n          <Header user={user} />\n          <FaqPage />\n        </Loading>\n      </Route>\n      <Route path=\"/404\" exact>\n        <NotFoundPage user={user} />\n      </Route>\n      <Route path=\"/setup\" exact>\n        <SetupRestaurantDetailsPage />\n      </Route>\n      <Route path=\"*\">\n        <AppContext.Provider value={ appContextValue }>\n          <MainLayout>\n            { user?.plan.state === 'trialing' &&\n              <TrialMessage trialEnd={ new Date( user?.plan.trialEnd ) } />\n            }\n            { user?.hasNewPosItems &&\n              <Message showing={location.pathname !== '/pos/associations'}>New POS Items detected. <Link to=\"/pos/associations\">Click here to manage mapping</Link></Message>\n            }\n            { user?.isInSandboxMode &&\n              <Message>You are in Sandbox mode. <a href=\"#\" onClick={ () => setShowingSandboxDialog( true ) }>Click here to leave the sandbox</a></Message>\n            }\n            <Switch>\n              { /* Render auth'd landing page if the user has no data */ }\n              <Route path=\"/\" exact render={ () => window.location.href = user?.isInSandboxMode ? '/getting-started' : '/items' } />\n              <Route path=\"/getting-started\" exact>\n                <SandboxLandingPage />\n              </Route>\n              <Route path=\"/counting-lists\" exact>\n                <CountingListsPage />\n              </Route>\n              <Route path=\"/counting-list/:id\" exact>\n                <CountingListPage />\n              </Route>\n              <Route path=\"/counts\" exact>\n                <CountingLogPage />\n              </Route>\n              <Route path=\"/count/:id\" exact>\n                <CountingPage />\n              </Route>\n              <Route path=\"/pantry\" exact>\n                <PantryListPage />\n              </Route>\n{   \n  /*           \n              <Route path=\"/pantry/log\" exact>\n                <PantryLogPage />\n              </Route>\n              <Route path=\"/pantry/log/:date\" exact>\n                <PantryStockPage />\n              </Route>\n  */\n}\n              <Route path=\"/pantry/:id\" exact>\n                <PantryPage />\n              </Route>\n              <Route path=\"/prep\" exact>\n                <PrepListPage />\n              </Route>\n              <Route path=\"/prep/log\" exact>\n                <PrepLogPage />\n              </Route>\n              <Route path=\"/prep/log/:date\" exact>\n                <DailyPrepPage />\n              </Route>\n              <Route path=\"/prep/:id\" exact>\n                <PrepPage />\n              </Route>\n              <Route path=\"/items\" exact>\n                <MenuItemsListPage />\n              </Route>\n              <Route path=\"/items/:id\" exact>\n                <MenuItemPage />\n              </Route>\n              <Route path=\"/menus\" exact>\n                <MenusListPage />\n              </Route>\n              <Route path=\"/menus/:id\" exact>\n                <MenuPage />\n              </Route>\n              <Route path=\"/units\" exact>\n                <UnitsPage />\n              </Route>\n              <Route path=\"/settings\" exact render={ () => <SettingsPage /> } />\n              <Route path=\"/vendors\" exact render={ () => <VendorsPage /> } />\n              <Route path=\"/vendor/:id\" exact>\n                <VendorPage />\n              </Route>\n              <Route path=\"/vendor/:id/catalog\" exact>\n                <VendorCatalogPage />\n              </Route>\n              <Route path=\"/orders\" exact>\n                <OrdersPage />\n              </Route>\n              <Route path=\"/orders/:id\" exact>\n                <OrderPage />\n              </Route>\n              <Route path=\"/invoices\" exact>\n                <InvoicesPage />\n              </Route>\n              <Route path=\"/invoices/:id\" exact>\n                <InvoicePage />\n              </Route>\n              <Route path=\"/pos/associations\" exact render={ () => <PosMenuItemAssociationsPage /> } />\n              <Route path=\"*\" render={ () => window.location.href = '/404' } />\n            </Switch>\n          </MainLayout>\n        </AppContext.Provider>\n      </Route>\n    </Switch>\n    { planDialogMessage !== null &&\n      <ChangePlanDialog allowClose={ true } message={ planDialogMessage } plan={ planDialogPlan } showing={ planDialogMessage !== null } onConfirm={ () => {\n        setPlanDialog({ message: null, plan: planDialogPlan });\n      } } onClose={ () => {\n        setPlanDialog({ message: null, plan: planDialogPlan });\n      } } />\n    }\n    {\n      user?.isInSandboxMode &&\n      <SandboxDialog showing={isShowingSandboxDialog} loading={isSandboxDialogLoading} onConfirm={handleConfirmLeaveSandbox} onClose={() => setShowingSandboxDialog( false )}></SandboxDialog>\n    }\n  </> );\n};\n\nconst container = document.getElementById( 'nav-block' ) as HTMLElement;\n\nconst WithRecoil = () => {\n  const [ planDialog, setPlanDialog ] = useRecoilState( planUpgradeRequiredDialogState );\n  return (\n    <SnackbarProvider maxSnack={2} anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }} autoHideDuration={3260}>\n      <SWRConfig \n        value={\n          {\n            fetcher: async ( url: string ) => {\n              const res = await request.get( url, { noThrow: true } );\n\n              if ( res.status >= 400 ) {\n                if ( res.body.message === 'PLAN_UPGRADE_REQUIRED' ) {\n                  setPlanDialog({\n                    message: 'A plan upgrade is required',\n                    plan: res.body.plan as Plan,\n                  });\n                }\n                return null;\n              }\n              \n              return res.body;\n            },\n            revalidateOnFocus: false,\n            revalidateOnMount: true,\n            revalidateOnReconnect: false,\n            refreshInterval: 0,\n          }\n        }\n      >\n        <CssBaseline />\n        <ThemeProvider theme={theme}>\n          <MuiPickersUtilsProvider libInstance={utcDayJs} utils={DayJsUtils}>\n            <BrowserRouter\n              getUserConfirmation={\n                ( message, callback ) => {\n                  ReactDOM.render(\n                    <>\n                      <CssBaseline />\n                      <ThemeProvider theme={theme}>\n                        <BlockNavigationDialog\n                          message={message}\n                          onCancel={ () => {\n                            callback( false ); ReactDOM.unmountComponentAtNode( container );\n                          } }\n                          onConfirm={ () => {\n                            callback( true ); ReactDOM.unmountComponentAtNode( container );\n                          } }\n                        />\n                      </ThemeProvider>\n                    </>,\n                    container\n                  );\n                }\n              }\n            >\n              <Route path=\"/\" render={ ( { location } ) => {\n                if ( typeof window.gtag === 'function' ) {\n                  window.gtag( 'config', window.gtag.id, {\n                    page_path: location.pathname + location.search,\n                  } );\n                }\n                return null;\n              }} />\n              <Main />\n            </BrowserRouter>\n          </MuiPickersUtilsProvider>\n        </ThemeProvider>\n      </SWRConfig>\n    </SnackbarProvider>\n  )\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default ( ): ReactElement => {\n  \n  return (\n    <Suspense fallback={<></>}>\n      <RecoilRoot>\n        <WithRecoil />\n      </RecoilRoot>\n    </Suspense>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/models/Unit.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/i18n.js",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/util/trackChanges.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/util/placeCursorAtEnd.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/theme.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/util/request.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/hooks/useTemporarilyTrueState.ts",["926"],"import { useState, useEffect } from 'react';\n\nexport const useTemporarilyTrueState = ( initialState = false, minimumDuration = 500 ): [ boolean, ( newState: boolean ) => void ] => {\n  const [ state, setState ] = useState( initialState );\n  const [ recentlyTrue, setRecentlyTrue ] = useState( initialState );\n\n  useEffect( () => {\n    if ( state )\n      return setRecentlyTrue( true );\n    const timer = setTimeout( () => setRecentlyTrue( false ), minimumDuration );\n    return () => clearTimeout( timer );\n  }, [ state ] );\n\n  return [ state || recentlyTrue, setState ];\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/hooks/useQueryState.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/util/setupIntent.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/hooks/useNumberField.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/BlockNavigationDialog.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Footer.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Icons.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Button.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/DeleteButton.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/DeleteDialog.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Divider.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/NameInput.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/TextInput.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/UnitInput.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/WarningIcon.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PageSizeSelector.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Paginator.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/UnitSelector.tsx",["927","928"],"import { Box, ButtonGroup, Divider, List, ListItem, Button as MuiButton, Popover, Typography, makeStyles, useTheme } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Types, Unit } from '../../models/Unit';\nimport { Button } from './Button';\nimport { EditUnitDialog } from './EditUnitDialog';\nimport { SearchInput } from './SearchInput';\n\nexport interface UnitSelectorProps {\n  units: Unit[];\n  allowedTypes?: Types[];\n  showing: boolean;\n  onSelect: ( unit: Unit ) => void;\n  onClose: ( ) => void;\n  onCreateNewUnit: ( symbol: Unit['symbol'], type: Unit['type'] ) => void;\n  anchorEl: HTMLElement|null;\n  initialQuery: string;\n}\n\nconst useStyles = makeStyles( theme => ( {\n  root: {\n    '& .MuiPaper-rounded': {\n      borderRadius: 8,\n    },\n  },\n  description: {\n    fontSize: '0.9rem',\n  },\n  buttons: {\n    borderRadius: 8,\n  },\n  selected: {\n    background: theme.palette.hover.main,\n    '&.MuiButtonBase-root.MuiButton-root': {\n      marginTop: -2,\n      marginBottom: -2,\n      borderRadius: 8,\n      borderColor: 'rgba(0,0,0,0.23)',\n      zIndex: 1,\n    },\n    '&.MuiButtonGroup-groupedOutlinedHorizontal:not(:first-child)': {\n      marginLeft: -5,\n    },\n    '&.MuiButtonGroup-groupedOutlinedHorizontal:first-child': {\n      transform: 'transformX(-5px)',\n    },\n    '&.MuiButtonGroup-groupedOutlinedHorizontal:not(:last-child)': {\n      marginRight: -4,\n    },\n    '&.MuiButtonGroup-groupedOutlinedHorizontal:last-child': {\n      transform: 'transformX(4px)',\n    },\n    '&:hover': {\n      background: theme.palette.hover.main,\n    },\n  },\n  list: {\n    height: 200,\n    overflow: 'auto',\n    lineHeight: '20px',\n    '& li:hover': {\n      background: theme.palette.hover.main,\n      cursor: 'pointer',\n    },\n  },\n} ) );\n\nexport const UnitSelector = ( props: UnitSelectorProps ): ReactElement => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const allowedTypes = props.allowedTypes || [ Types.WEIGHT, Types.VOLUME, Types.PURE ];\n  const { showing, units } = props;\n  const [ query, setQuery ] = useState( '' );\n  const [ selected, setSelected ] = useState( () =>\n    allowedTypes?.find( type =>\n      units.some( unit => unit.type === type )\n    ) || allowedTypes[0]\n  );\n\n  const [ showingCreateUnitDialog, setShowingCreateUnitDialog ] = useState( false );\n\n  const theme = useTheme();\n\n  useEffect( () => {\n    if ( ! showing )\n      return;\n      \n    setQuery( props.initialQuery );\n    if ( units.some( ( { type } ) => type === selected ) )\n      return;\n    setSelected(\n      allowedTypes?.find( type =>\n        units.some( unit => unit.type === type )\n      ) || allowedTypes[0]\n    );\n  }, [ showing, units, props.allowedTypes, setQuery, setSelected ] );\n\n  const handleSelectUnit = ( symbol: Unit['symbol'] ): void => {\n    const selectedUnit: Unit|undefined = units.find( unit => symbol === unit.symbol );\n    if ( ! selectedUnit )\n      return;\n    props.onSelect( selectedUnit );\n  };\n\n  return (\n    <>\n      <Popover\n        anchorEl={ props.anchorEl }\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n        open={ props.showing }\n        onClose={ () => {\n          setQuery( '' ); props.onClose();\n        } }\n        className={classes.root}\n      >\n        <Box minHeight={350} display=\"flex\" flexDirection=\"column\" alignItems=\"stretch\">\n          <Box mx=\"auto\" my={1} maxWidth=\"80%\" textAlign=\"center\">\n            <Typography variant=\"body2\" className={classes.description}>Type to create a new UOM<br />or select an existing one</Typography>\n          </Box>\n          <Box mx={2} my={1}>\n            <SearchInput value={query} onChange={ ( query: string ) => setQuery( query ) } onSubmit={() => {}} autoFocus />\n          </Box>\n          { ! query &&\n            <Box mx={2} my={1}>\n              <ButtonGroup className={classes.buttons} aria-label=\"outlined primary button group\" fullWidth>\n                {\n                  allowedTypes.filter( type => units.some( unit => unit.type === type ) ).map( type =>\n                    <MuiButton key={type} className={selected === type ? classes.selected : ''} onClick={() => setSelected( type )}>{t( `strings.${type}` )}</MuiButton>\n                  )\n                }\n              </ButtonGroup>\n            </Box>\n          }\n          <Box my={1}>\n            <List className={classes.list}>\n              {\n                units && (\n                  query\n                    ? units\n                      .filter( ( unit: Unit ) =>\n                        (\n                          ! query ||\n                          unit.name.toLowerCase().includes( query.toLowerCase() ) ||\n                          unit.symbol.toLowerCase().includes( query.toLowerCase() )\n                        )\n                      )\n                      .sort( ( a: Unit, b: Unit ) => {\n                        if ( ! query ) return 0;\n                        const aScore = getQueryScore( query, a );\n                        const bScore = getQueryScore( query, b );\n                        return bScore - aScore;\n                      } )\n                    : units.filter( ( unit: Unit ) => unit.type === selected )\n                ).flatMap( ( unit: Unit ) => [\n                  <ListItem\n                    key={unit.type + '::::' + unit.symbol}\n                    tabIndex={0}\n                    onClick={ () => handleSelectUnit( unit.symbol ) }\n                    onKeyPress={ ( e:React.KeyboardEvent ) => ( e.key === 'Enter' || e.key === ' ' ) && handleSelectUnit( unit.symbol ) }\n                    style={{ color: theme.palette.primaryGray.main }}\n                  >\n                    {\n                      unit.name !== unit.symbol\n                        ? `${unit.name} (${unit.symbol})`\n                        : unit.name\n                    }\n                  </ListItem>,\n                  <Divider />,\n                ] )\n                  .slice( 0, -1 )\n              }\n            </List>\n          </Box>\n        </Box>\n        <Box mt=\"auto\" mb={3} display=\"flex\" justifyContent=\"center\">\n          <Button\n            startIcon={<Add />}\n            text=\"Create\"\n            onClick={() => setShowingCreateUnitDialog( true )}\n          />\n        </Box>\n      </Popover>\n      <EditUnitDialog showing={ showingCreateUnitDialog } unit={{ name: query, symbol: query, wellDefined: false }} onClose={ () => {\n        setShowingCreateUnitDialog( false );\n      } } onConfirm={ ( unit: Unit ) => {\n        setShowingCreateUnitDialog( false ); props.onCreateNewUnit?.( unit.symbol, unit.type );\n      } } />\n    </>\n  );\n};\n\nconst getQueryScore = ( query: string, unit: Unit ): number => {\n  const lowerQuery = query.toLowerCase();\n  let score = 0;\n  if ( lowerQuery === unit.name.toLowerCase() || lowerQuery === unit.symbol.toLowerCase() )\n    score += 100;\n  if ( unit.name.toLowerCase().indexOf( lowerQuery ) === 0 )\n    score += 20;\n  if ( unit.name.toLowerCase().split( /\\b/g ).includes( lowerQuery ) )\n    score += 2;\n  return score;\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SearchInput.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/ChangePlanDialog.tsx",["929","930","931"],"import { Box, Collapse, Dialog, DialogContent, Button as MuiButton, Switch, Typography, makeStyles } from '@material-ui/core';\nimport { CheckCircleOutline } from '@material-ui/icons';\nimport { Alert } from '@material-ui/lab';\nimport { CardElement, useElements, useStripe } from '@stripe/react-stripe-js';\nimport React, { ReactElement, useState } from 'react';\n\nimport { Plan, Plans } from '../../enum/plans.enum';\nimport { setupIntent } from '../../util/setupIntent';\nimport { PLAN_DETAILS, PlanDetails } from './PlanDetails';\nimport { TextInput } from './TextInput';\n\ninterface ChangePlanDialogProps {\n  onConfirm: ( planName: string, planId: string, promoCode: string ) => void;\n  onError?: ( message?: string ) => void;\n  onClose: ( ) => void;\n  showing: boolean;\n  currentPlan?: string;\n  allPlans?: any;\n  portalUrl?: string;\n  hasPaymentMethod?: boolean;\n  message?: string | false;\n  disableBackdropClick?: boolean;\n}\n\nconst useStyles = makeStyles( theme => ( {\n  root: {\n    overflow: 'hidden',\n  },\n  title: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'flex-end',\n    color: theme.palette.primary.main,\n    fontWeight: 400,\n    fontSize: '2rem',\n    paddingBottom: 16,\n    [theme.breakpoints.down( 'sm' )]: {\n      fontSize: '1.5rem',\n    },\n  },\n  content: {\n    textAlign: 'center',\n    padding: '0 24px',\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n  },\n  buttons: {\n    width: '100%',\n    padding: 0,\n    display: 'flex',\n    '& button': {\n      flex: 1,\n      borderRadius: 0,\n      border: 0,\n      color: '#fff',\n      padding: 16,\n      '& .MuiSvgIcon-root': {\n        marginRight: 8,\n      },\n    },\n  },\n  cancelButton: {\n    background: theme.palette.secondaryGray.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primaryGray.main,\n    },\n  },\n  confirmButton: ( props: { selectedPlan: string } ) => ( {\n    background: props.selectedPlan ? theme.palette.primary.main : theme.palette.disabled.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n    },\n  } ),\n  cardInput: {\n    position: 'relative',\n    minHeight: 68,\n  },\n} ) );\n\nexport const ChangePlanDialog = ( props: ChangePlanDialogProps ): ReactElement => {\n  const stripe = useStripe()!;\n  const elements = useElements()!;\n\n  const [ billingName, setBillingName ] = useState( '' );\n  const [ promoCode, setPromoCode ] = useState( '' );\n  const [ selectedPlan, setSelectedPlan ] = useState( '' );\n  const [ yearly, setYearly ] = useState( false );\n  const classes = useStyles( { selectedPlan } );\n\n  const planNames = [ ...new Set( Object.keys( props.allPlans || [] ).map( key => key.replace( /_[^_]*$/, '' ) ) ) ] as Plan[];\n  planNames.sort( ( a: Plan, b:Plan ) => Plans[a] - Plans[b] );\n  \n  const handleSubmit = async ( event: any ): Promise<void> => {\n    event.preventDefault();\n    const plan = props.allPlans?.[ selectedPlan + ( yearly ? '_YEARLY' : '_MONTHLY' ) ] || props.allPlans?.[ selectedPlan ];\n\n    // Ignore double submission\n    if ( ! plan )\n      return;\n\n    if ( selectedPlan !== 'FREE' && props.hasPaymentMethod === false ) {\n      await setupIntent( stripe, elements, billingName, {\n        onConfirm: () => props.onConfirm( selectedPlan, plan.id, promoCode ),\n        onError: props.onError,\n      } );\n    }\n      \n    props.onConfirm( selectedPlan, plan.id, promoCode );\n  };\n    \n  return (\n    <Dialog\n      open={props.showing}\n      onClose={props.onClose}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n      className={classes.root}\n      fullWidth\n      maxWidth=\"sm\"\n      scroll=\"body\"\n      disableBackdropClick={props.disableBackdropClick}\n    >\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" pt={3} pb={1}>\n        <div className={classes.title} id=\"dialog-title\">\n          Choose a Plan\n        </div>\n        <DialogContent className={classes.content}>\n          { props.message && <Alert severity=\"warning\">{ props.message }</Alert> }\n          { /*\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" py={1}>\n            <Typography color=\"textSecondary\" { ... ( ! yearly && { style: { fontWeight: 'bold' } } ) }>Monthly</Typography>\n            <Switch color=\"primary\" checked={yearly} onChange={ () => setYearly( ! yearly ) } />\n            <Typography color=\"textSecondary\" { ... ( yearly && { style: { fontWeight: 'bold' } } ) }>Yearly</Typography>\n          </Box>\n          */ }\n          <Box pt={2} pb={1} display=\"flex\" justifyContent=\"space-around\">\n            { planNames.map( ( planName: keyof typeof PLAN_DETAILS ) => {\n              const plans = {\n                monthly: props.allPlans[ planName + '_MONTHLY' ] || props.allPlans[ planName ],\n                yearly: props.allPlans[ planName + '_YEARLY' ] || props.allPlans[ planName ],\n              };\n                  \n              const price = ( plans[ yearly ? 'yearly' : 'monthly' ].amount/100 ).toFixed( 2 ).replace( /\\.00$/, '' );\n              return (\n                <Box\n                  style={{ ...( selectedPlan === planName ? { border: '4px solid', margin: -4 }: { cursor: 'pointer' } ) }}\n                  onClick={ () => setSelectedPlan( planName ) }\n                >\n                  <PlanDetails { ... { planName, price, yearly, signupLink: false, selectButton: true } } />\n                </Box>\n              );\n            }\n            )\n            }\n          </Box>\n          <Collapse in={ !! selectedPlan && selectedPlan !== 'FREE' && props.hasPaymentMethod === false }>\n            <Box pt={1}>\n              <TextInput required label=\"Name on Card\" value={billingName} onChange={ ( e: any ) => setBillingName( e.target.value ) } />\n              <div className={ classes.cardInput }>\n                <TextInput required label=\"Card Details\" value={'\\u00a0'} InputProps={{ inputProps: { disabled: true } }} tabIndex={-1} style={{ position: 'absolute', top: 0, left: 0, outline: 'none' }} />\n                <div style={{ position: 'absolute', top: 36, left: 16, right: 16, bottom: 0, background: 'none', border: 'none' }}>\n                  <CardElement />\n                </div>\n              </div>\n            </Box>\n          </Collapse>\n          <Collapse in={ !! selectedPlan && selectedPlan !== 'FREE' }>\n            <TextInput label=\"Promo Code\" value={promoCode} onChange={ ( e: any ) => setPromoCode( e.target.value ) } />\n          </Collapse>\n        </DialogContent>\n      </Box>\n      <div className={classes.buttons}>\n        { /*\n        <MuiButton onClick={props.onClose} className={classes.cancelButton} autoFocus>\n          <Clear />{t('strings.cancel')}\n        </MuiButton>\n        */ }\n        <MuiButton onClick={ handleSubmit } disabled={ ! selectedPlan } className={classes.confirmButton}>\n          <CheckCircleOutline />Submit\n        </MuiButton>\n      </div>\n    </Dialog>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/EditUnitDialog.tsx",["932"],"import { Box, Button, Dialog, DialogContent, makeStyles, useTheme } from '@material-ui/core';\nimport { CheckCircleOutline, Clear } from '@material-ui/icons';\nimport { Alert } from '@material-ui/lab';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useNumberField } from '../../hooks/useNumberField';\nimport { Unit } from '../../models/Unit';\nimport request from '../../util/request';\nimport { TextInput } from './TextInput';\nimport { UnitInput } from './UnitInput';\n\ninterface EditUnitDialogProps {\n  onConfirm: ( unit: Unit ) => void;\n  onClose: ( ) => void;\n  showing: boolean;\n  unit?: Unit;\n}\n\nconst useStyles = makeStyles( theme => ( {\n  root: {\n  },\n  title: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'flex-end',\n    color: theme.palette.primary.main,\n    fontWeight: 400,\n    fontSize: '2rem',\n    paddingBottom: 16,\n    [theme.breakpoints.down( 'sm' )]: {\n      fontSize: '1.5rem',\n    },\n  },\n  content: {\n    textAlign: 'center',\n    padding: '0 24px',\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n  },\n  buttons: {\n    width: '100%',\n    padding: 0,\n    display: 'flex',\n    '& button': {\n      flex: 1,\n      borderRadius: 0,\n      border: 0,\n      color: '#fff',\n      padding: 16,\n      '& .MuiSvgIcon-root': {\n        marginRight: 8,\n      },\n    },\n  },\n  cancelButton: {\n    background: theme.palette.secondaryGray.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primaryGray.main,\n    },\n  },\n  confirmButton: {\n    background: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n    },\n  },\n} ) );\n\nexport const EditUnitDialog = ( props: EditUnitDialogProps ): ReactElement => {\n  const theme = useTheme();\n  const classes = useStyles( theme );\n  const { t } = useTranslation();\n\n  const id = props.unit?.id ? props.unit.id : 'new';\n  const [ name, setName ] = useState( '' );\n  const [ symbol, setSymbol ] = useState( '' );\n  const [ amount, setAmount ] = useNumberField( );\n  const [ unit, setUnit ] = useState<string>( );\n  const [ error, setError ] = useState( '' );\n\n  const handleConfirm = async ( ): Promise<void> => {\n    try {\n      if ( id === 'new' ) {\n        const body = { name, symbol, amount, unit };\n        const newUnit = await request.post( '/units', { body } );\n        props.onConfirm( { id: newUnit.id, name, symbol, wellDefined: !!( amount && unit ) } );\n      } else {\n        const body = { name, symbol, amount, unit };\n        await request.put( `/units/${id}`, { body } );\n        props.onConfirm( { id, name, symbol, wellDefined: !!( amount && unit ) } );\n      }\n    } catch ( err ) {\n      setError( err.message );\n    }\n  };\n\n  useEffect( () => {\n    if ( ! props.showing )\n      return;\n\n    setError( '' );\n      \n    if ( ! props.unit ) {\n      setName( '' );\n      setSymbol( '' );\n      setAmount( '' );\n      setUnit( '' );\n      return;\n    }\n\n    const { name, symbol, amount, unit } = props.unit;\n    setName( name );\n    setSymbol( symbol );\n    setAmount( amount?.toFixed( 4 ).replace( /\\.0*$/, '' ) ?? '' );\n    setUnit( ( unit as string ) ?? '' );\n  }, [ props.showing ] );\n\n  return (\n    <Dialog\n      open={props.showing}\n      onClose={props.onClose}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n      className={classes.root}\n      fullWidth\n      maxWidth=\"sm\"\n    >\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" py={3}>\n        <div className={classes.title} id=\"dialog-title\">\n          {\n            props.unit?.id\n              ? `${t( 'strings.edit' )} ${t( 'strings.unit' )}`\n              : `${t( 'strings.create-new-unit' )}`\n          }\n        </div>\n        <DialogContent className={classes.content}>\n          { error && <Alert severity=\"error\">{ error }</Alert> }\n          <Box flex={1} display=\"flex\">\n            <Box flex={3} mx={1}>\n              <TextInput label={ `${t( 'strings.name' )}*` } value={ name } onChange={ ( e: any ) => setName( e.target.value ) } autoFocus />\n            </Box>\n            <Box flex={1} mx={1}>\n              <TextInput label={ `${t( 'strings.symbol' )}*` } value={ symbol } onChange={ ( e: any ) => setSymbol( e.target.value ) } />\n            </Box>\n          </Box>\n          <Box flex={1} display=\"flex\">\n            <Box flex={1} mx={1}>\n              <TextInput label={`${t( 'strings.base' )} ${t( 'strings.amount' )}`} { ...amount } />\n            </Box>\n            <Box flex={3} mx={1}>\n              <UnitInput TextInputProps={{ label: `${t( 'strings.base' )} ${t( 'strings.unit' )}` }} value={ unit } onSelect={ ( unit: Unit ) => setUnit( unit.symbol ) } onCreateNewUnit={ () => {} } />\n            </Box>\n          </Box>\n        </DialogContent>\n      </Box>\n      <div className={classes.buttons}>\n        <Button onClick={props.onClose} className={classes.cancelButton} autoFocus>\n          <Clear />{t( 'strings.cancel' )}\n        </Button>\n        <Button onClick={ handleConfirm } className={classes.confirmButton}>\n          <CheckCircleOutline />{ props.unit?.id ? t( 'strings.save' ) : t( 'strings.create' ) }\n        </Button>\n      </div>\n    </Dialog>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PlanDetails.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/GoogleButton.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PasswordInput.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SectionNameDialog.tsx",["933"],"import { Box, Button, Dialog, makeStyles, useTheme } from '@material-ui/core';\nimport { CheckCircleOutline, Clear } from '@material-ui/icons';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { TextInput } from './TextInput';\n\ninterface SectionNameDialogProps {\n  onConfirm: ( name: string ) => void;\n  onClose: ( ) => void;\n  showing: boolean;\n  name: string;\n}\n\nconst useStyles = makeStyles( theme => ( {\n  root: {\n  },\n  title: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'flex-end',\n    color: theme.palette.primary.main,\n    fontWeight: 400,\n    fontSize: '2rem',\n    paddingBottom: 16,\n    [theme.breakpoints.down( 'sm' )]: {\n      fontSize: '1.5rem',\n    },\n  },\n  content: {\n    textAlign: 'center',\n    padding: 0,\n  },\n  buttons: {\n    width: '100%',\n    padding: 0,\n    display: 'flex',\n    '& button': {\n      flex: 1,\n      borderRadius: 0,\n      border: 0,\n      color: '#fff',\n      padding: 16,\n      '& .MuiSvgIcon-root': {\n        marginRight: 8,\n      },\n    },\n  },\n  cancelButton: {\n    background: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n    },\n  },\n  confirmButton: {\n    background: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n    },\n  },\n} ) );\n\nexport const SectionNameDialog = ( props: SectionNameDialogProps ): ReactElement => {\n  const theme = useTheme();\n  const classes = useStyles( theme );\n  const { t } = useTranslation();\n  const [ name, setName ] = useState( '' );\n  const [ existing, setExisting ] = useState( true );\n\n  useEffect( () => {\n    if ( ! props.showing )\n      return;\n    setName( props.name || '' );\n    setExisting( props.name != null );\n  }, [ props.showing ] );\n\n  return (\n    <Dialog\n      open={props.showing}\n      onClose={props.onClose}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n      className={classes.root}\n      fullWidth\n      maxWidth=\"sm\"\n    >\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" p={3}>\n        <div className={classes.title} id=\"dialog-title\">\n          {`${existing ? t( 'strings.rename' ) : t( 'strings.create' )} ${t( 'strings.section' )}`}\n        </div>\n        <Box flex={1} display=\"flex\" alignSelf=\"stretch\">\n          <TextInput label={t( 'strings.name' )} value={ name } onChange={ ( e: any ) => setName( e.target.value ) }></TextInput>\n        </Box>\n      </Box>\n      <div className={classes.buttons}>\n        <Button onClick={props.onClose} className={classes.cancelButton} autoFocus>\n          <Clear />{t( 'strings.cancel' )}\n        </Button>\n        <Button onClick={ () => props.onConfirm( name ) } className={classes.confirmButton}>\n          <CheckCircleOutline />{t( 'strings.confirm' )}\n        </Button>\n      </div>\n    </Dialog>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/UploadButton.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/BillingDialog.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/IngredientSelector.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/RecipeTable.tsx",["934","935"],"import { Box, Checkbox, CircularProgress, IconButton, InputAdornment, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, makeStyles, useMediaQuery, useTheme } from '@material-ui/core';\nimport { CheckCircleOutline, Clear } from '@material-ui/icons';\nimport React, { ReactElement, useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport { Ingredient } from '../../models/Ingredient';\nimport { RecipeIngredient } from '../../models/RecipeIngredient';\nimport { Unit } from '../../models/Unit';\nimport request from '../../util/request';\nimport { Button } from './Button';\nimport { DeleteButton } from './DeleteButton';\nimport { IngredientInput } from './IngredientInput';\nimport { PopupNotification } from './PopupNotification';\nimport { TextInput } from './TextInput';\nimport { UnitInput } from './UnitInput';\nimport { WarningIcon } from './WarningIcon';\n\nexport interface RecipeTableProps {\n  rows: RecipeIngredient[];\n  units?: Unit[];\n  onChange: ( rows: RecipeIngredient[] ) => void;\n  onClickIngredientName?: ( id: Ingredient['id'] ) => void;\n  getCost?: ( id: Ingredient['id'], amount: number, unit: string, waste?: number ) => Promise<number>;\n  IngredientSelectorComponent?: React.ComponentType<any>;\n  fake?: boolean\n}\n\nexport const RecipeTable = ( props: RecipeTableProps ): ReactElement => {\n  const { t } = useTranslation();\n  const { rows, onChange } = props;\n\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'sm' ) );\n  const stacked = ! isLargeScreen;\n\n  const handleChange = ( recipeIngredient: RecipeIngredient, key: string, i: number ): void => {\n    const newRows = [ ...rows ];\n    newRows[i] = { ...recipeIngredient, key };\n    onChange( newRows );\n  };\n\n  const handleDelete = ( i: number ): void => {\n    const newRows = [ ...rows ];\n    newRows.splice( i, 1 );\n    onChange( newRows );\n  };\n  \n  const handleConfirmNewRow = useCallback( ( ) => {\n    const newRows = [ ...rows ];\n    newRows.push( { key: ''+Math.random() } );\n    onChange( newRows );\n  }, [ rows, onChange ] );\n\n  useEffect( () => {\n    if ( rows.length === 0 )\n      handleConfirmNewRow();\n  }, [ rows, handleConfirmNewRow ] );\n\n  return (\n    <TableContainer>\n      <Table className=\"RecipeTable\" style={{ tableLayout: 'fixed' }}>\n        <TableHead>\n          <TableRow>\n            { stacked ||\n              <TableCell style={{ width: '30%' }}>\n                <Typography variant=\"subtitle1\">{ t( 'strings.ingredient' ) }</Typography>\n              </TableCell>\n            }\n            <TableCell style={{ width: stacked ? '22%' : '14%' }}>\n              <Typography align=\"center\" variant=\"subtitle1\">{ t( 'strings.amount' ) }</Typography>\n            </TableCell>\n            <TableCell>\n              <Typography align=\"center\" variant=\"subtitle1\">{ t( 'strings.unit-of-measure-acronymn' ) }</Typography>\n            </TableCell>\n            <TableCell style={{ width: stacked ? '22%' : '14%' }}>\n              <Typography align=\"center\" variant=\"subtitle1\">{ t( 'strings.waste' ) }</Typography>\n            </TableCell>\n            <TableCell style={{ width: stacked ? '16%' : '10%' }}>\n              <Typography align={ stacked ? 'left' : 'right' } variant=\"subtitle1\">{ t( 'strings.cost' ) }</Typography>\n            </TableCell>\n            { stacked || <TableCell style={{ width: '14%' }}></TableCell> }\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {\n            rows.map( ( { key, ...recipeIngredient }, i ) => {\n              const { ingredient, amount, unit, waste, cost } = recipeIngredient;\n              return (\n                <RecipeIngredientRow\n                  key={key}\n                  recipeIngredient={{\n                    ingredient,\n                    amount,\n                    unit,\n                    waste,\n                    cost,\n                  }}\n                  newRow={i === rows.length - 1}\n                  onChange={ ( recipeIngredient: any ) => handleChange( recipeIngredient, key, i ) }\n                  onDelete={ ( ) => handleDelete( i ) }\n                  onConfirmNewRow={ handleConfirmNewRow }\n                  units={props.units}\n                  getCost={props.getCost}\n                  IngredientSelectorComponent={ props.IngredientSelectorComponent }\n                  stacked={stacked}\n                  fake={props.fake}\n                />\n              );\n            } )\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\ninterface RecipeIngredientRowProps {\n  units?: Unit[];\n  recipeIngredient: Omit< RecipeIngredient, 'key' >;\n  newRow?: boolean;\n  onClickIngredientName?: ( id: Ingredient['id'] ) => void;\n  onChange?: ( recipeIngredient: Omit< RecipeIngredient, 'key' > ) => void;\n  onDelete?: ( ) => void;\n  onConfirmNewRow?: ( ) => void;\n  getCost?: ( id: Ingredient['id'], amount: number, unit: string, waste?: number ) => Promise<number>;\n  IngredientSelectorComponent?: React.ComponentType<any>;\n  stacked: boolean\n  fake?: boolean\n}\n\nconst useRowStyles = makeStyles( theme => ( {\n  newRowButton: ( { isCompleted }: { isCompleted?: boolean } ) => ( {\n    ...isCompleted\n      ?\n      {\n        background: isCompleted ? theme.palette.primary.main : 'none',\n        borderRadius: 8,\n        color: '#fff',\n        '&:hover.MuiIconButton-root': {\n          background: theme.palette.primary.dark,\n        },\n      }\n      :\n      {\n        cursor: 'default',\n        '&:hover': {\n          background: 'none',\n        },\n      },\n  } ),\n} ) );\n\nconst RecipeIngredientRow = ( props: RecipeIngredientRowProps ): ReactElement => {\n  const { newRow, stacked } = props;\n  const { ingredient, amount, unit, waste } = props.recipeIngredient;\n  const id = ingredient?.id;\n  const name = ingredient?.name;\n  \n  const { t } = useTranslation();\n\n  const amountHasError = !!( amount && +`${+amount}` !== +amount );\n  const wasteHasError = !!( waste && ( +`${+waste}` !== +waste || +waste < 0 || +waste >= 100 ) );\n\n  const [ cost, setCost ] = useState( props.recipeIngredient.cost );\n  const [ showingCreationPopup, setShowingCreationPopup ] = useState( false );\n  const [ showingMissingDataPopup, setShowingMissingDataPopup ] = useState( false );\n\n  const isCompleted = !!(id && name && amount && unit && ! amountHasError && ! wasteHasError)\n  const classes = useRowStyles( { isCompleted } );\n\n  useEffect( ( ) => {\n    if ( cost !== undefined )\n      props.onChange?.( { ...props.recipeIngredient } );\n  }, [ cost ] );\n\n  const updateCost = async ( id?: Ingredient['id'], amount?: string, unit?: string, waste?: string ): Promise<void> => {\n    setCost( undefined );\n\n    if ( ! id || ! amount || ! unit )\n      return;\n    \n    try {\n      const cost = await props.getCost?.( id, +amount, unit, +( waste || 0 ) );\n      setCost( cost );\n    } catch ( e ) {\n      // Do nothing\n    }\n  };\n\n  const handleSelectIngredient = ( ingredient: Ingredient ): void => {\n    props.onChange?.( { ...props.recipeIngredient, ingredient } );\n    updateCost( id, amount, unit, waste );\n  };\n\n  const handleCreateIngredient = async ( ingredient: Partial<Ingredient> ): Promise<void> => {\n    const body = { name: ingredient.name };\n    if ( ! props.fake ) {\n      const { body: { id, name } } = await request.post( `/${ingredient.type}`, { body } );\n      ingredient.id = id;\n    } else {\n      ingredient.id = Math.random();\n    }\n    if ( window.localStorage.getItem( 'SUPRESS_INGREDIENT_CREATION_POPUP' ) !== '1' )\n      setShowingCreationPopup( true );\n    handleSelectIngredient( ingredient as Ingredient );\n  };\n\n  const handleChangeAmount = ( amount: string ): void => {\n    props.onChange?.( { ...props.recipeIngredient, amount } );\n    updateCost( id, amount, unit, waste );\n  };\n\n  const handleChangeUnit = ( unit: Unit ): void => {\n    props.onChange?.( { ...props.recipeIngredient, unit: unit.symbol } );\n    updateCost( id, amount, unit.symbol, waste );\n  };\n  \n  const handleChangeWaste = ( waste: string ): void => {\n    props.onChange?.( { ...props.recipeIngredient, waste } );\n    updateCost( id, amount, unit, waste );\n  };\n\n  const handleCheckHideCreationPopup = ( event: any ): void => {\n    const checked = event.target.checked;\n    window.localStorage.setItem( 'SUPRESS_INGREDIENT_CREATION_POPUP', '' + +checked );\n  };\n\n  const nameCellContents =\n    newRow\n      ? <IngredientInput value={name ?? ( stacked ? 'Add Ingredient' : '' )} IngredientSelectorComponent={ props.IngredientSelectorComponent } onSelect={ handleSelectIngredient } onCreate={ handleCreateIngredient } />\n      : ingredient?.deleted\n        ? <>{name}</>\n        : <Link to={{ pathname: `/${ingredient?.type}/${ingredient?.id}`, state: { previousTitle: document.title } }}>{name}</Link>\n  ;\n  const nameCell = stacked\n    ? <TableCell colSpan={2} style={{ border: 'none' }}>{ nameCellContents }</TableCell>\n    : <TableCell>{ nameCellContents }</TableCell>\n  ;\n\n  const actionCellContents =\n    <Box textAlign=\"right\">\n      { newRow && ( id || amount || unit || waste ) &&\n      <IconButton style={{ cursor: 'pointer' }} onClick={ () => props.onDelete?.() }><Clear /></IconButton>\n      }\n      {\n        newRow\n          ? <IconButton { ... isCompleted ? { tabIndex: 0 } : { tabIndex: -1 } } className={classes.newRowButton} onClick={ () => isCompleted && props.onConfirmNewRow?.() }><CheckCircleOutline /></IconButton>\n          : <DeleteButton mild={true} onClick={ () => props.onDelete?.() } />\n      }\n    </Box>\n  ;\n  const actionCell = stacked\n    ? <TableCell colSpan={2} style={{ border: 'none' }}>{ actionCellContents }</TableCell>\n    : <TableCell>{ actionCellContents }</TableCell>\n  ;\n\n  return ( <>\n    { stacked &&\n      <TableRow style={{ backgroundColor: ingredient?.deleted ? '#faeaec' : '#ffffffdd' }}>\n        { nameCell }\n        { actionCell }\n      </TableRow>\n    }\n    <TableRow style={{ backgroundColor: ingredient?.deleted ? '#faeaec' : '#ffffffdd' }}>\n      { stacked || nameCell }\n      <TableCell style={ stacked ? { paddingBottom: 16 } : { } }>\n        <Box maxWidth={120} margin=\"auto\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <TextInput placeholder=\"Amount\" fullWidth size=\"small\" value={amount} error={amountHasError} onChange={ ( e: any ) => handleChangeAmount( e.target.value ) }/>\n        </Box>\n      </TableCell>\n      <TableCell style={ stacked ? { paddingBottom: 16 } : { } }>\n        <Box minWidth={120} margin=\"auto\">\n          <UnitInput units={props.units} TextInputProps={{ label: '', size: 'small' }} value={unit} onSelect={ handleChangeUnit } onCreateNewUnit={ () => {} } />\n        </Box>\n      </TableCell>\n      <TableCell style={ stacked ? { paddingBottom: 16 } : { } }>\n        <Box maxWidth={120} margin=\"auto\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          <TextInput\n            placeholder=\"Waste\"\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\" style={{ pointerEvents: 'none' }}>%</InputAdornment>\n              ),\n            }}\n            size=\"small\"\n            value={waste}\n            error={wasteHasError}\n            onChange={ ( e: any ) => handleChangeWaste( e.target.value ) }\n          />\n        </Box>\n      </TableCell>\n      <TableCell style={ stacked ? { paddingRight: 24, paddingBottom: 16 } : { } }>\n        <Box textAlign={ stacked ? 'left' : 'right' } whiteSpace=\"nowrap\">\n          { isCompleted ? cost == null ? <Box onClick={ ( ) => setShowingMissingDataPopup( true ) } style={{ cursor: 'pointer' }}><WarningIcon tooltip={ t( 'strings.missing-conversion', { name, amount, unit } ) } /></Box> : cost != null ? '$' + cost.toFixed( 2 ) : <CircularProgress /> : ' -- ' }\n        </Box>\n      </TableCell>\n      { stacked || actionCell }\n    </TableRow>\n    <PopupNotification maxWidth={300} open={ showingCreationPopup } title=\"Ingredient draft created!\" onClose={ ( ) => setShowingCreationPopup( false ) }>\n      <Box pt={1} pb={2}>\n        <Typography variant=\"body2\">Please make sure you complete it so we can calculate cost and usage.</Typography>\n      </Box>\n      <Button onClick={ ( ) => setShowingCreationPopup( false ) } text=\"Ok, clear\"></Button>\n      <Box py={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <Checkbox onChange={ handleCheckHideCreationPopup } /><Typography>Don't show this again</Typography>\n      </Box>\n    </PopupNotification>\n    <PopupNotification maxWidth={444} open={ showingMissingDataPopup } onClose={ ( ) => setShowingMissingDataPopup( false ) }>\n      <Box textAlign=\"left\">\n        <Typography variant=\"body2\">Calculation of cost requires additional data for \"{name}\"</Typography>\n      </Box>\n      <Box pt={2} pb={2} textAlign=\"left\">\n        <Typography>After saving recipe, click on \"{ name }\" to make required changes including UOM conversions.</Typography>\n      </Box>\n      <Button onClick={ ( ) => setShowingMissingDataPopup( false ) } text=\"Ok, clear\"></Button>\n    </PopupNotification>\n  </> );\n};\n\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/MenuItemSelector.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/ConversionsDialog.tsx",["936"],"import { AddCircleOutline, CheckCircleOutline, Clear } from '@material-ui/icons';\nimport { Autocomplete } from '@material-ui/lab';\nimport { Box, CircularProgress, Dialog, IconButton, Button as MuiButton, makeStyles, useTheme } from '@material-ui/core';\nimport { Graph, alg } from 'graphlib';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { Types, Unit } from '../../models/Unit';\n\nimport { Button } from './Button';\nimport { Conversion } from '../../models/Conversion';\nimport { DeleteButton } from './DeleteButton';\nimport { TextInput } from './TextInput';\nimport { UnitInput } from './UnitInput';\nimport { makeQueryString } from '../../hooks/useQueryState';\nimport { useTranslation } from 'react-i18next';\n\nexport interface ConversionsDialogProps {\n  ingredient?: string;\n  units: Unit[];\n  onConfirm: ( conversions: Conversion[] ) => void;\n  onClose: ( ) => void;\n  onCreateNewUnit: ( symbol: Unit['symbol' ], type: Unit['type'] ) => void;\n  conversions: (Conversion | any)[];\n  showing: boolean;\n  loading: boolean;\n}\n\nconst useStyles = makeStyles( theme => ( {\n  root: {\n  },\n  title: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'flex-end',\n    color: theme.palette.primary.main,\n    fontWeight: 400,\n    fontSize: '2rem',\n    paddingBottom: 16,\n    marginTop: 48,\n    [theme.breakpoints.down( 'sm' )]: {\n      fontSize: '1.5rem',\n    },\n  },\n  content: {\n    textAlign: 'center',\n    padding: 0,\n    minWidth: '90%',\n  },\n  buttons: {\n    width: '100%',\n    padding: 0,\n    display: 'flex',\n    alignItems: 'flex-start',\n    '& button': {\n      flex: 1,\n      borderRadius: 0,\n      border: 0,\n      color: '#fff',\n      padding: 16,\n      '& .MuiSvgIcon-root': {\n        marginRight: 8,\n      },\n      background: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n      },\n    },\n    '& .cancel': {\n      background: theme.palette.secondaryGray.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primaryGray.main,\n      },\n    },\n  },\n} ) );\n\nexport const ConversionsDialog = ( props: ConversionsDialogProps ): ReactElement => {\n  const theme = useTheme();\n  const classes = useStyles( theme );\n  const { t } = useTranslation();\n\n  const { loading } = props;\n  const [ conversions, setConversions ] = useState( [] as ( Conversion & { key: number } )[] );\n  const [ fdcQuery, setFdcQuery ] = useState<string>( );\n  const [ fdcFoods, setFdcFoods ] = useState( [] );\n  const [ loadingFdcFoods, setLoadingFdcFoods ] = useState( false );\n  const [ fdcSearchOpen, setFdcSearchOpen ] = useState( false );\n  const [ loadingFdcConversions, setLoadingFdcConversions ] = useState( false );\n  const [ fdcConversions, setFdcConversions ] = useState( [] );\n\n  const addRow = (): void => {\n    const newConversion = { a: {}, b: {}, key: Math.random() };\n    setConversions( conversions => [ ...conversions, newConversion ] );\n  };\n\n  useEffect( () => {\n    if ( ! props.showing ) {\n      setFdcSearchOpen( false );\n      setFdcConversions( [] );\n      return;\n    }\n\n    setConversions( ( ) => {\n      const conversions = props.conversions.map( conversion => ( { ...conversion, key: Math.random() } ) );\n\n      conversions.forEach( (conversion: any) => {\n        if ( conversion.amountA ) {\n          conversion.a = { amount: conversion.amountA, unit: props.units.find(({ symbol }) => conversion.unitA === symbol) };\n          conversion.b = { amount: conversion.amountB, unit: props.units.find(({ symbol }) => conversion.unitB === symbol) };\n        }\n      } );\n      if ( conversions.length === 0 ) {\n        const newConversion = { a: {}, b: {}, key: Math.random() };\n        conversions.push( newConversion );\n      }\n      return conversions;\n    } );\n\n    setFdcQuery( undefined );\n  }, [ props.showing ] );\n\n  useEffect( () => {\n    if ( ! fdcQuery )\n      return;\n\n    ( async ( ) => {\n      setLoadingFdcFoods( true );\n      setFdcFoods( [] );\n      const query = fdcQuery?.replace( /[^a-zA-Z ]+/g, ' ' ).replace( /\\b\\w\\b/g, '' ) || '';\n      const qs = makeQueryString( { dataType: 'SR Legacy', query, api_key: process.env.REACT_APP_FDC_API_KEY } );\n      const response = await fetch( `https://api.nal.usda.gov/fdc/v1/foods/search${qs}` );\n      const { foods } = await response.json();\n      setFdcFoods( foods.map( ( food: any ) => ( { name: food.description, value: food.fdcId } ) ) );\n      setLoadingFdcFoods( false );\n    } )();\n  }, [ fdcQuery ] );\n\n  const handleChange = ( conversion: Conversion, key: number, i: number ): void => {\n    const newConversions = [ ...conversions ];\n    newConversions[i] = { ...conversion, key };\n    setConversions( newConversions );\n  };\n\n  const handleDelete = ( i: number ): void => {\n    const newConversions = [ ...conversions ];\n    newConversions.splice( i, 1 );\n    setConversions( newConversions );\n  };\n\n  const startFdcSearch = ( ): void => {\n    setFdcQuery( props.ingredient?.replace( /[^a-zA-Z ]+/g, ' ' ) || '' );\n    setFdcSearchOpen( true );\n  };\n\n  const handleSelectFdcIngredient = async ( id?: number ): Promise<void> => {\n    if ( ! id )\n      return;\n    setLoadingFdcConversions( true );\n    const qs = makeQueryString( { api_key: process.env.REACT_APP_FDC_API_KEY } );\n    const response = await fetch( `https://api.nal.usda.gov/fdc/v1/food/${id}${qs}` );\n    const { foodPortions: portions } = await response.json();\n    setFdcConversions( portions.map( ( portion: any ) => <div key={portion.id}>{ portion.amount } {portion.modifier} = { portion.gramWeight } g</div> ) );\n    setLoadingFdcConversions( false );\n  };\n\n  return (\n    <Dialog\n      open={props.showing}\n      onClose={props.onClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      className={classes.root}\n      fullWidth\n      maxWidth=\"md\"\n    >\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <div className={classes.title} id=\"alert-dialog-title\">\n          {t( 'strings.configure-conversions' )}\n        </div>\n        <div className={classes.content}>\n          { loading\n            ? <CircularProgress />\n            : conversions\n              ? conversions.map( ( { a, b, key }, i ) => (\n                <ConversionRow\n                  key={key}\n                  units={props.units}\n                  a={a}\n                  b={b}\n                  onChange={ ( conversion: Conversion ) => handleChange( conversion, key, i ) }\n                  onDelete={ () => handleDelete( i ) }\n                  onCreateNewUnit={ props.onCreateNewUnit }\n                  allConversions={conversions}\n                />\n              ) )\n              : null\n          }\n          <Box mb={2}>\n            <IconButton onClick={addRow}><AddCircleOutline /></IconButton>\n          </Box>\n          <Box mx={0} pb={2} display=\"flex\" alignItems=\"flex-start\">\n            <Box mr={4} flex={'0 1'}>\n              <Button text={'Search\\u00a0FDC\\u00a0Database'} onClick={ startFdcSearch } />\n            </Box>\n            { fdcQuery !== undefined &&\n              <Box flex={1}>\n                <Autocomplete\n                  style={{ marginTop: -8 }}\n                  filterOptions={ ( options: any ) => options }\n                  open={fdcSearchOpen}\n                  inputValue={ fdcQuery }\n                  onChange={ ( e: any, value: any ) => {\n                    setFdcQuery( value?.name ); handleSelectFdcIngredient( value?.value );\n                  } }\n                  onInputChange={ ( e: any, value: any, reason ) => {\n                    setFdcConversions( [] ); if ( reason !== 'reset' ) setFdcQuery( value );\n                  } }\n                  onOpen={() => setFdcSearchOpen( true ) }\n                  onClose={() => setFdcSearchOpen( false ) }\n                  getOptionSelected={( option: any, value: any ) => option.value === value.value }\n                  getOptionLabel={( option: any ) => option.name}\n                  options={fdcFoods}\n                  loading={loadingFdcFoods}\n                  renderInput={params => (\n                    <TextInput\n                      {...params}\n                      size=\"small\"\n                      InputProps={{\n                        ...params.InputProps,\n                        endAdornment: ( <>\n                          {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                          {params.InputProps.endAdornment}\n                        </> ),\n                      }}\n                    />\n                  )}\n                />\n                <Box mx={0} display=\"flex\" flexDirection=\"column\" alignItems=\"flex-start\">\n                  {\n                    loadingFdcConversions\n                      ? <CircularProgress />\n                      : <Box flex=\"0 1\" textAlign=\"left\">{ fdcConversions }</Box>\n                  }\n                </Box>\n              </Box>\n            }\n          </Box>\n        </div>\n        <div className={classes.buttons}>\n          <MuiButton className=\"cancel\" onClick={ props.onClose } autoFocus>\n            <Clear />{t( 'strings.cancel' )}\n          </MuiButton>\n          <MuiButton onClick={() => props.onConfirm( conversions )}>\n            <CheckCircleOutline />{t( 'strings.confirm' )}\n          </MuiButton>\n        </div>\n      </Box>\n    </Dialog>\n  );\n};\n\nconst allTypes = [ 'WEIGHT', 'VOLUME', 'PURE' ] as ( 'WEIGHT'|'VOLUME'|'PURE' )[];\n\ntype ConversionRowProps = Conversion & {\n  onChange: ( conversion: Conversion ) => void;\n  onDelete: () => void;\n  onCreateNewUnit: ( symbol: Unit['symbol'], type: Unit['type'] ) => void;\n  units?: Unit[];\n  allConversions: Conversion[];\n};\n\nconst ConversionRow = ( props: ConversionRowProps ): ReactElement => {\n  const { a, b, allConversions } = props;\n\n  const nodes = [ ...allTypes.map( type => `  __${type}__  ` ), ...(props.units?.filter( unit => ! unit.wellDefined ).map( unit => unit.symbol ) ?? []) ];\n  \n  const unitToNode = ( unit: Unit|undefined ): string => {\n    if ( ! unit )\n      return '';\n    const node = unit.wellDefined ? nodes[ allTypes.findIndex( type => Types[type] === unit?.type ) ] : unit.symbol;\n    return node;\n  };\n\n  // Construct a graph of reachable units from any unit, excluding the current conversion\n  const g = ( new Graph() );\n  nodes.forEach( node => g.setNode( node ) );\n  allConversions\n    .filter( conversion => conversion.a.unit !== a.unit || conversion.b.unit !== b.unit )\n    .forEach( ( { a, b } ) => {\n      if ( ! a.unit || ! b.unit )\n        return;\n      const nodeA = unitToNode( a.unit );\n      const nodeB = unitToNode( b.unit );\n      if ( ! nodeA || ! nodeB )\n        return;\n      g.setEdge( nodeA, nodeB );\n      g.setEdge( nodeB, nodeA );\n    } )\n  ;\n\n  const components = alg.components( g );\n\n  // Allow a unit to be converted to any unreachable type\n  const { units } = props;\n  const [ aNode, bNode ] = [ unitToNode( a.unit ), unitToNode( b.unit ) ];\n  const aUnits = bNode ? units?.filter( unit => ! components.find( component => component.includes( unitToNode( unit ) ) )?.includes( bNode ) ) : units;\n  const bUnits = aNode ? units?.filter( unit => ! components.find( component => component.includes( unitToNode( unit ) ) )?.includes( aNode ) ) : units;\n  \n  // If all units are convertible, then only allow unit creation\n  if ( components.length === 1 ) {\n    aUnits && ( aUnits.length = 0 );\n    bUnits && ( bUnits.length = 0 );\n  }\n\n  return (\n    <Box className={'conversion'} flex={1} display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n      <Box flex={4} m={1}><TextInput label=\"Amount\" value={a.amount} onChange={ ( e:any ) => props.onChange( { a: { ...a, amount: e.target.value }, b: { ...b } } ) } /></Box>\n      <Box flex={7} ml={1}>\n        <UnitInput\n          onCreateNewUnit={props.onCreateNewUnit}\n          units={aUnits}\n          value={a?.unit?.symbol}\n          onSelect={( unit: Unit ) => props.onChange( { a: { ...a, unit }, b: { ...b } } )}\n        />\n      </Box>\n      <Box flex={1}>=</Box>\n      <Box flex={4} m={1}><TextInput label=\"Amount\" value={b.amount} onChange={ ( e:any ) => props.onChange( { b: { ...b, amount: e.target.value }, a: { ...a } } ) } /></Box>\n      <Box flex={7} ml={1}>\n        <UnitInput\n          onCreateNewUnit={props.onCreateNewUnit}\n          units={bUnits}\n          value={b?.unit?.symbol}\n          onSelect={( unit: Unit ) => props.onChange( { b: { ...b, unit }, a: { ...a } } )}\n        />\n      </Box>\n      <Box flex={1}><DeleteButton onClick={props.onDelete} /></Box>\n    </Box>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/IngredientInput.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/GettingStarted.tsx",["937","938"],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Message.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/TrialMessage.tsx",["939"],"import React, { ReactElement, useState } from 'react';\n\nimport ChangePlanDialog from '../src/ChangePlanDialog';\nimport { Message } from './Message';\n\nconst HOURS_TO_HIDE_FOR = 22;\n\nexport const TrialMessage = ( props: { trialEnd: Date } ): ReactElement => {\n  const supressedUntil = new Date( window.localStorage.getItem( 'SUPRESS_TRIAL_END_MESSAGE_UNTIL' ) || 0 );\n\n  const [ showing, setShowing ] = useState( +supressedUntil < Date.now() );\n  const [ showingDialog, setShowingDialog ] = useState( false );\n\n  const trialHoursRemaining = ( +props.trialEnd - Date.now() )/1000/60/60;\n  const trialRemainingMessage = trialHoursRemaining <= 18\n    ? 'Your trial ends today. '\n    : <>You have <strong>{ Math.round( trialHoursRemaining/24 ) } days</strong> remaining in your trial. </>\n  ;\n\n  const handleClose = ( ): void => {\n    const supressUntil = new Date( Date.now() + 1000*60*60*HOURS_TO_HIDE_FOR );\n    window.localStorage.setItem( 'SUPRESS_TRIAL_END_MESSAGE_UNTIL', supressUntil.toISOString() );\n    setShowing( false );\n  };\n\n  return ( <>\n    <Message showing={showing} onClose={ handleClose }>\n      { trialRemainingMessage }\n      <a href=\"#\" onClick={ () => setShowingDialog( true ) }>Subscribe Now.</a>\n    </Message>\n    <ChangePlanDialog\n      showing={showingDialog}\n      message={ false }\n      allowClose={ true }\n      onConfirm={ () => setShowingDialog( false ) }\n      onClose={ () => setShowingDialog( false ) }\n    />\n  </> );\n};\n\nexport default TrialMessage;\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Layouts/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Logo.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/UsedInList.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/ParentBadge.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SandboxDialog/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Layouts/MainLayout/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PopupNotification.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Layouts/MainLayout/MainLayout.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SandboxDialog/SandboxDialog.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/util/formatDate.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/util/formatNumber.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/print-recipes.form.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/DemoWidget.tsx",["940"],"import { Box, InputAdornment, makeStyles } from '@material-ui/core';\nimport { CheckCircleOutline } from '@material-ui/icons';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Ingredient } from '../../models/Ingredient';\nimport { RecipeIngredient } from '../../models/RecipeIngredient';\nimport { Types, Unit } from '../../models/Unit';\nimport request from '../../util/request';\nimport { NavBar } from '../src/NavBar';\nimport { Button } from './Button';\nimport { IngredientSelector } from './IngredientSelector';\nimport { NameInput } from './NameInput';\nimport { RecipeTable } from './RecipeTable';\nimport { TextInput } from './TextInput';\n\ninterface Props { }\n\nconst useStyles = makeStyles( theme => ( {\n  root: {\n    flex: 1,\n    background: '#E7E7E7AA',\n    minHeight: 600,\n    paddingBottom: 16,\n  },\n} ) );\n\nconst demoIngredients = [\n  { id: 1, name: 'Prep/Pizza Dough', type: 'prep', pricePerEa: 0.80, pricePerMg: 0.00000142857142 },\n  { id: 2, name: 'Prep/Pizza Sauce', type: 'prep', pricePerEa: 0.21, pricePerMl: 0.002625, pricePerMg: 0.00000257142 },\n  { id: 3, name: 'Mozzarella, shredded', type: 'pantry', pricePerEa: 0.675, pricePerMl: 0.01125, pricePerMg: 0.00002410714 },\n  { id: 4, name: 'Pepperoni, slices', type: 'pantry', pricePerEa: 0.035, pricePerMg: 0.00001728425 },\n  { id: 5, name: 'Mushroom, slices', type: 'pantry', pricePerMl: 0.00166666666, pricePerMg: 0.00000564383 },\n  { id: 6, name: 'Olives, black', type: 'pantry', pricePerMl: 0.00173263888, pricePerMg: 0.00000320076 },\n  { id: 7, name: 'Tomatoes, grape', type: 'pantry', pricePerMl: 0.00395833333, pricePerMg: 0.00000637583 },\n  { id: 8, name: 'Onion, red', type: 'pantry', pricePerMl: 0.001125, pricePerMg: 0.00000234782 },\n];\n\nexport const DemoWidget = ( props: Props ): ReactElement => {\n  const { t } = useTranslation();\n  const classes = useStyles();\n\n  const [ units, setUnits ] = useState< Unit[] >( [] );\n  const [ ingredients, setIngredients ] = useState<RecipeIngredient[]>( [ ] );\n  const [ plateCost, setPlateCost ] = useState( 0 );\n\n  useEffect( () => {\n    ( async () => {\n      const { body: res } = await request.get( '/units' );\n      setUnits( res.items );\n\n      setIngredients( [\n        { ingredient: demoIngredients[0] as Ingredient, amount: '1', unit: 'ea', waste: '4', cost: 0.83, key: '' + Math.random() },\n        { key: '' + Math.random() },\n      ] );\n    } )();\n  }, [] );\n\n  useEffect( () => {\n    ( async () => {\n      const costs = await Promise.all( ingredients.map( async ( { ingredient, amount, unit, waste } ) => {\n        try {\n          const cost = ingredient ? ( await getCost( ingredient.id, +( amount ?? 0 ), unit || '', +( waste ?? 0 ) ) ) : 0;\n          return cost;\n        } catch ( err ) {\n          return 0;\n        }\n      } ) );\n      setPlateCost( costs.reduce( ( sum, curr ) => sum + curr, 0 ) );\n    } )();\n  }, [ ingredients ] );\n\n  const getCost = async ( id: Ingredient['id'], amount: number, unitSymbol: string, waste?: number ): Promise<number> => {\n    const ingredient = demoIngredients.find( ingredient => id === ingredient.id );\n    const unit: Unit|undefined = units.find( ( { symbol } ) => symbol === unitSymbol );\n    if ( ! ingredient || ! unit || ! unit.type )\n      throw new Error( 'UNRECOGNIZED' );\n\n    const priceField = {\n      PURE: 'pricePerEa',\n      WEIGHT: 'pricePerMg',\n      VOLUME: 'pricePerMl',\n    }[ Types[ unit.type ] ];\n\n    if ( ! ( priceField in ingredient ) )\n      throw new Error( 'NO_PRICE_INFO' );\n\n    return amount*( unit.magnitude ?? 1 )*( ingredient[ priceField as 'pricePerEa' | 'pricePerMg' | 'pricePerMl' ] as number )*( 100/( 100 - ( waste ?? 0 ) ) );\n  };\n\n  return (\n    <Box className={ classes.root } display=\"flex\" flexDirection=\"column\">\n      <NavBar fake={ true } />\n      <Box display=\"flex\" alignItems=\"center\">\n        { /* Enough height for loading spinner + vertical padding */ }\n        <Box minHeight={56} maxWidth=\"100%\" flex={1} pt={1} pl={1} pr={2} pb={1} display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\n          <Box maxWidth=\"100%\" mr={4} display=\"flex\" alignItems=\"center\">\n            <NameInput value={'Build Your Own Pizza'} editing={false} onChange={() => {}} />\n          </Box>\n          <Button\n            tabIndex={1}\n            style={{ marginLeft: 'auto' }}\n            startIcon={ <CheckCircleOutline /> }\n            text={ t( 'strings.save' ) }\n            onClick={ () => { } }\n          />\n        </Box>\n      </Box>\n      <Box px={2} py={1} display=\"flex\" justifyContent=\"flex-start\" style={{ background: '#fff' }}>\n        <Box mx={1} flex=\"shrink\">\n          <TextInput\n            label={ t( 'strings.plate-cost' )}\n            disabled\n            value={plateCost !== undefined ? plateCost.toFixed( 2 ).replace( /\\.00$/, '' ) : '\\u00a0--\\u00a0' }\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\" style={{ pointerEvents: 'none' }}>$</InputAdornment>,\n            }}\n          />\n        </Box>\n      </Box>\n      <RecipeTable fake={true} rows={ ingredients } getCost={ getCost } onChange={ ( rows: RecipeIngredient[] ) => {\n        setIngredients( rows );\n      } } IngredientSelectorComponent={ DemoIngredientSelector } />\n    </Box>\n  );\n};\n\nconst DemoIngredientSelector = ( props: any ): ReactElement => {\n  const [ query, setQuery ] = useState( '' );\n  const [ ingredients, setIngredients ] = useState( demoIngredients );\n\n  const onQueryChange = ( query: string ): void => {\n    setQuery( query );\n    setIngredients( demoIngredients.filter( ( { name } ) => name.toLowerCase().includes( query.trim().slice( query.indexOf( ' ' ) + 1 ).toLowerCase() ) ) );\n  };\n\n  return <IngredientSelector { ...props } query={ query } onQueryChange={ onQueryChange } ingredients={ ingredients } />;\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/PrepLogSettingsDialog/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/PrepLogSettingsDialog/PrepLogSettingsDialogContainer.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/PrepLogSettingsDialog/PrepLogSettingsDialog.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/ChangePlanDialog.tsx",["941"],"import { Elements, useStripe } from '@stripe/react-stripe-js';\nimport { pickBy } from 'lodash';\nimport { useSnackbar } from 'notistack';\nimport React, { ReactElement, useMemo } from 'react';\nimport useSWR from 'swr';\n\nimport { Plan, Plans } from '../../enum/plans.enum';\nimport request from '../../util/request';\nimport { ChangePlanDialog } from '../UI/ChangePlanDialog';\n\ninterface Props {\n  showing: boolean;\n  onConfirm: ( message: string ) => void;\n  onError?: ( message?: string ) => void;\n  onClose: ( ) => void;\n  message?: string | false;\n  plan?: Plan;\n  allowClose?: boolean;\n}\n\nexport default ( props: Props ): ReactElement => {\n  const stripe = useMemo( async () => {\n    const { loadStripe } = await import( '@stripe/stripe-js' );\n    return loadStripe( process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY || '' );\n  }, [ ] );\n\n  return (\n    <Elements { ...{ stripe } }>\n      <AppChangePlanDialog {...props} />\n    </Elements>\n  );\n};\n\n\nfunction AppChangePlanDialog ( props: Props ): ReactElement|null {\n  const { data } = useSWR( '/billing/plans' );\n\n  const stripe = useStripe();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const handleSubmit = async ( planName: string, planId: string, promoCode = '' ): Promise<void> => {\n    if ( ! planId || ! stripe )\n      return;\n\n    const body = {\n      plan: planId,\n      promoCode,\n    };\n\n    try {\n      const subscribeResult = await request.post( '/billing/subscribe', { body } );\n\n      if ( subscribeResult.next_action ) {\n        if ( subscribeResult.next_action?.type === 'redirect_to_url' )\n          window.location.href = subscribeResult.next_action?.redirect_to_url;\n\n        const confirmResult = await stripe.confirmCardSetup( subscribeResult.client_secret );\n\n        if ( confirmResult.error ) {\n          enqueueSnackbar( confirmResult.error?.message || 'Error processing payment method', { variant: 'error' } );\n          return props.onError?.( confirmResult.error?.message || 'Error processing payment method' );\n        }\n      }\n    } catch ( err ) {\n      enqueueSnackbar( err.message, { variant: 'error' } );\n      props.onError?.( err.message );\n    }\n\n    enqueueSnackbar( 'Successfully changed plan to ' + planName, { variant: 'success' } );\n    props.onConfirm?.( 'Successfully changed plan to ' + planName );\n  };\n\n  if ( ! data )\n    return null;\n\n  return ( <>\n    <ChangePlanDialog\n      message={ props.message ?? 'A plan upgrade is required' }\n      currentPlan={data.currentPlan}\n      allPlans={\n        pickBy( data.plans, ( _data: any, plan: string ) =>\n          Plans[plan.replace( /_.*/, '' ) as Plan] >= Plans[props.plan ?? 'BASIC']\n        )}\n      hasPaymentMethod={data.hasPaymentMethod}\n      portalUrl={data.portalUrl}\n      { ...props }\n      disableBackdropClick={ !props.allowClose }\n      onConfirm={ handleSubmit }\n    />\n  </> );\n}\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Header.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/MenuItemsListPage.tsx",["942"],"import { Box, CircularProgress, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip, Typography, useMediaQuery, useTheme } from '@material-ui/core';\nimport { Add, Sync } from '@material-ui/icons';\nimport { Alert, Skeleton } from '@material-ui/lab';\nimport React, { ReactElement, useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory } from 'react-router-dom';\nimport { AppContext } from 'src/App';\n\nimport { useQueryState } from '../../../hooks/useQueryState';\nimport request from '../../../util/request';\nimport { Button } from '../../UI/Button';\nimport { PageSizeSelector } from '../../UI/PageSizeSelector';\nimport { Paginator } from '../../UI/Paginator';\nimport { SearchInput } from '../../UI/SearchInput';\nimport { UploadButton } from '../../UI/UploadButton';\nimport { ForwardButton } from '../ForwardButton';\n\nconst defaultParams = {\n  page: '1',\n  pageSize: '10',\n  search: '',\n};\n\nexport const MenuItemsListPage = ( ): ReactElement|null => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  \n  const [ items, setItems ] = useState( [] as any[] );\n  const [ numPages, setNumPages ] = useState( 0 );\n  const [ initialLoadInProgress, setInitialLoadInProgress ] = useState( true );\n  const [ loading, setLoading ] = useState( false );\n  const [ error, setError ] = useState( '' );\n  const [ { queryString, params }, setQueryState ] = useQueryState( defaultParams );\n\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'md' ) );\n\n  const { handlePlanUpgradeRequired } = useContext( AppContext );\n  \n  useEffect( () => {\n    if ( ! loading )\n      return;\n      \n    const defaultErrorMessage = t( 'elements.pantry.error-loading' );\n\n    ( async () => {\n      try {\n        const { body: res } = await request.get( `/items${queryString}` );\n\n        setError( '' );\n        setLoading( false );\n        setNumPages( res.numPages || 0 );\n        setItems( res.items || [] );\n      } catch ( err ) {\n        if ( err.message === 'PLAN_UPGRADE_REQUIRED' )\n          handlePlanUpgradeRequired( err.plan );\n        setError( err.message || defaultErrorMessage );\n        setLoading( false );\n        setItems( [] );\n        setNumPages( 0 );\n      }\n      setInitialLoadInProgress( false );\n    } )();\n\n    document.title = 'Menu Items';\n  }, [ loading, queryString, params.search, t ] );\n  \n  useEffect( () => {\n    if ( ! params.search )\n      return setLoading( true );\n    const timer = setTimeout( () => setLoading( true ), 600 );\n    return () => clearTimeout( timer );\n  }, [ params.search ] );\n\n  const handleQueryChange = ( query: string ): void => {\n    setQueryState( {\n      page: undefined,\n      search: query,\n    } );\n  };\n\n  const handleChangePage = ( page: string ): void => {\n    setQueryState( { page } );\n    setLoading( true );\n  };\n\n  const handleChangePageSize = ( newPageSize: string ): void => {\n    const currentPage = +( params.page || defaultParams.page );\n    const pageSize = +( params.pageSize || defaultParams.pageSize );\n\n    // Adjust currentPage so that the first item showing is still visible\n    const newPage = '' + ( Math.floor( ( currentPage - 1 )*pageSize/+newPageSize ) + 1 );\n    \n    setQueryState( {\n      page: newPage,\n      pageSize: newPageSize,\n    } );\n    setLoading( true );\n  };\n\n  if ( initialLoadInProgress )\n    return null;\n\n  return (\n    <>\n      <Box py=\"1.25rem\" display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\n        { /* Enough height for loading spinner + vertical padding */ }\n        <Box minHeight={56} flex={'1 10'} p={1} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography variant=\"h3\" noWrap>{ t( 'strings.menu-item_plural' ) }</Typography>\n          { loading && <CircularProgress /> }\n        </Box>\n        <Box flex={1} display=\"flex\" p={1} flexWrap=\"wrap\" alignItems=\"center\">\n          <Box flex={1} minWidth={180} mx={0.5} display=\"flex\" alignItems=\"stretch\">\n            <SearchInput onSubmit={ () => setLoading( true ) } value={ params.search } onChange={handleQueryChange} />\n          </Box>\n          <Box flex={1} display=\"flex\">\n            <Box flex={1} mx={1} display=\"flex\">\n              <Button\n                startIcon={<Add />}\n                text={t( 'strings.create' )}\n                style={{ flex: 1 }}\n                onClick={() => history.push( '/items/new', { previousTitle: document.title } )}\n              />\n            </Box>\n            <Box flex={1} mx={1} display=\"flex\">\n              <UploadButton />\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n      <Paper elevation={0}>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.name' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.sales-price' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.plate-cost' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.food-cost' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.average-weekly-units' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.date-added' ) }</Typography>\n                </TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {\n                items.length\n                  ? items.map( item => <ItemRow key={item.id} item={item} /> )\n                  :\n                  <TableRow>\n                    <TableCell colSpan={7}>\n                      {\n                        loading\n                          ? <Skeleton variant=\"rect\" />\n                          :\n                          <Box py={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                            {\n                              error\n                                ? <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                                  <Alert severity=\"error\" style={{ paddingTop: 4, paddingBottom: 4 }}>\n                                    {error}\n                                  </Alert>\n                                  <Box p={4}>\n                                    <Button\n                                      startIcon={<Sync />}\n                                      onClick={() => setLoading( true )}\n                                      text={t( 'strings.retry' )}\n                                      style={{ paddingLeft: 16, paddingRight: 16 }}\n                                    />\n                                  </Box>\n                                </Box>\n                                :\n                                <>\n                                  <Button\n                                    startIcon={<Add />}\n                                    text={t( 'strings.create' ) + ' your first ' + t( 'strings.menu-item' )}\n                                    style={{ flex: 1 }}\n                                    onClick={() => history.push( '/items/new', { previousTitle: document.title } )}\n                                  />\n                                </>\n                            }\n                          </Box>\n                      }\n                    </TableCell>\n                  </TableRow>\n              }\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n\n      <Box pt={3} display=\"flex\" alignItems=\"flex-end\">\n        <Box flex={1}></Box>\n        <Box flex={1} justifyContent=\"center\">\n          <Paginator\n            numPages={numPages}\n            currentPage={+params.page}\n            siblingCount={isLargeScreen ? 2 : 1}\n            boundaryCount={isLargeScreen ? 3 : 1}\n            onNavigate={page => handleChangePage( page+'' )}\n          />\n        </Box>\n        <Box flex={1} display=\"flex\" justifyContent=\"flex-end\">\n          <PageSizeSelector value={+params.pageSize} onChange={pageSize => handleChangePageSize( pageSize+'' )} />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\ninterface ItemRowProps {\n  item: {\n    id: number;\n    name: string;\n    price: number;\n    plateCost: number;\n    averageWeeklySales: number;\n    dateAdded: Date;\n  }\n}\n\nconst ItemRow = ( props: ItemRowProps ): ReactElement => {\n  const { id, name, price, plateCost, averageWeeklySales, dateAdded } = props.item;\n  const foodCostPercent = plateCost/price*100;\n\n  const [ , month, dayOfMonth, year ] = new Date( dateAdded ).toDateString().split( ' ' );\n  const dateAddedStr = `${month} ${dayOfMonth}, ${year}`;\n\n  return (\n    <TableRow>\n      <TableCell><Link to={{ pathname: `/items/${id}`, state: { previousTitle: document.title } }}>{name}</Link></TableCell>\n      <TableCell>{price > 0 || price === 0 ? `$${price.toFixed( 2 ).replace( /\\.00$/, '' )}` : '--' }</TableCell>\n      <TableCell>{plateCost ? `$${plateCost.toFixed( 2 ).replace( /\\.00$/, '' )}` : '--' }</TableCell>\n      <TableCell>{foodCostPercent >= 0 && foodCostPercent < Infinity ? `${foodCostPercent.toFixed()}%` : '--' }</TableCell>\n      <TableCell>{averageWeeklySales ?? '--'}</TableCell>\n      <TableCell><Tooltip title={ new Date( dateAdded ).toLocaleString() }><span>{dateAddedStr}</span></Tooltip></TableCell>\n      <TableCell>\n        <ForwardButton destination={`/items/${id}`} />\n      </TableCell>\n    </TableRow>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/MenuPage.tsx",["943","944","945"],"import { Box, CircularProgress, IconButton, Menu, MenuItem as MuiMenuItem, Paper, Slide, Snackbar, Table, TableBody, TableCell, TableHead, TableRow, Typography, makeStyles, useMediaQuery, useTheme } from '@material-ui/core';\nimport { Add, CheckCircleOutline, DeleteOutline, Edit, EditOutlined, MoreHoriz } from '@material-ui/icons';\nimport { Alert } from '@material-ui/lab';\nimport React, { ReactElement, useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, Prompt, useHistory, useParams } from 'react-router-dom';\n\nimport { AppContext } from '../../../App';\nimport { useTemporarilyTrueState } from '../../../hooks/useTemporarilyTrueState';\nimport { MenuItem } from '../../../models/MenuItem';\nimport request from '../../../util/request';\nimport { trackChanges } from '../../../util/trackChanges';\nimport { Button } from '../../UI/Button';\nimport { DeleteButton } from '../../UI/DeleteButton';\nimport { DeleteDialog } from '../../UI/DeleteDialog';\nimport { NameInput } from '../../UI/NameInput';\nimport { SectionNameDialog } from '../../UI/SectionNameDialog';\nimport { BackToLink } from '../BackToLink';\nimport MenuItemSelector from '../MenuItemSelector';\n\nconst useStyles = makeStyles( theme => ( {\n  editableName: {\n    paddingLeft: 16,\n    paddingRight: 16,\n    cursor: 'default',\n    '& br': {\n      display: 'none',\n    },\n  },\n  editButton: {\n    margin: '0 0 0 16px',\n    color: theme.palette.text.primary,\n    cursor: 'pointer',\n  },\n  addItem: {\n    color: theme.palette.primary.main,\n    cursor: 'pointer',\n    fontWeight: 'bold',\n  },\n  addSection: {\n    color: theme.palette.primary.main,\n    cursor: 'pointer',\n    padding: '8px 16px',\n    display: 'flex',\n    alignItems: 'center',\n    fontWeight: 'bold',\n  },\n} ) );\n\nexport const MenuPage = ( ): ReactElement => {\n  const { id } = useParams<{ id: string }>();\n  const { t } = useTranslation();\n  const history = useHistory();\n  \n  const [ hasChanges, setHasChanges ] = useState( false );\n  const [ loading, setLoading ] = useTemporarilyTrueState( true );\n  const [ saving, setSaving ] = useTemporarilyTrueState( false );\n  const [ success, setSuccess ] = useState( '' );\n  const [ error, setError ] = useState( '' );\n  const [ showingAlert, setShowingAlert ] = useState( false );\n\n  const [ name, setName ] = trackChanges( useState<string>( '' ), setHasChanges );\n  const [ sections, setSections ] = trackChanges( useState<any[]>( [] ), setHasChanges );\n\n  const [ showingMenuItemSelectorForSection, setShowingMenuItemSelectorForSection ] = useState<number|null>( null );\n  const [ showingSectionOptionsForSection, setShowingSectionOptionsForSection ] = useState<number|null>( null );\n  const [ showingSectionNameDialogForSection, setShowingSectionNameDialogForSection ] = useState<number|null>( null );\n  const [ showingDeleteDialog, setShowingDeleteDialog ] = useState( false );\n  const [ excludedItems, setExcludedItems ] = useState<number[]>( [] );\n\n  const [ editingName, setEditingName ] = useState( false );\n\n  const theme = useTheme();\n  const classes = useStyles( theme );\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'md' ) );\n\n  const sectionOptionsMenuAnchorRef = useRef<HTMLElement>();\n  const menuItemSelectorAnchorRef = useRef<HTMLElement>();\n\n  const defaultErrorMessage = t( 'elements.menus.error-loading' );\n\n  const { handlePlanUpgradeRequired } = useContext( AppContext );\n\n  useEffect( () => {\n    if ( !( error || success ) )\n      return;\n    setShowingAlert( true );\n    const timer = setTimeout( () => {\n      setShowingAlert( false );\n    }, 4000 );\n    return () => clearTimeout( timer );\n  }, [ !!( error || success ) ] );\n\n  useEffect( () => {\n    ( async () => {\n      try {\n        if ( id === 'new' ) {\n          setEditingName( true );\n          setName( '' );\n          handleClickEditName();\n          setSections( [ { name: '', items: [] } ] );\n          setLoading( false );\n          setHasChanges( false );\n          document.title = 'New Menu';\n          return;\n        }\n        \n        const { body: menu } = await request.get( `/menus/${id}` );\n\n        if ( ! menu )\n          return;\n\n        const {\n          name,\n          sections,\n        } = menu;\n\n        setError( '' );\n        setName( name );\n        setSections( sections );\n        document.title = name;\n      } catch ( err ) {\n        setError( err.message || defaultErrorMessage );\n      }\n      setLoading( false );\n      setHasChanges( false );\n    } )();\n    \n  }, [ id, defaultErrorMessage, loading ] );\n\n  const handleClickEditName = (): void => {\n    setEditingName( true );\n  };\n\n  const handleClickDelete = (): void => {\n    setShowingDeleteDialog( true );\n  };\n\n  const handleSave = async (): Promise<void> => {\n    setSaving( true );\n    \n    const body = {\n      name,\n      sections: sections.map( section => {\n        return {\n          name: section.name,\n          items: section.items.map( ( item: MenuItem ) => item.id ),\n        };\n      } ),\n    };\n    \n    try {\n      if ( id === 'new' ) {\n        const { body: res } = await request.post( '/menus', { body } );\n        setSuccess( t( 'strings.successfully-created' ) );\n        setHasChanges( false );\n        history.replace( `/menus/${res.id}`, { previousTitle: document.title } );\n      } else {\n        await request.patch( `/menus/${id}`, { body } );\n        setError( '' );\n        setSuccess( t( 'strings.successfully-saved-changes' ) );\n        setLoading( true );\n      }\n    } catch ( err ) {\n      if ( err.message === 'PLAN_UPGRADE_REQUIRED' )\n        handlePlanUpgradeRequired( err.plan );\n      else\n        setError( `Problem saving: ${err.message || defaultErrorMessage}` );\n      \n    }\n    setSaving( false );\n  };\n\n  const handleNameChange = ( newName: string ): void => {\n    setEditingName( false );\n    setName( newName );\n  };\n\n  const handleConfirmDelete = async ( ): Promise<void> => {\n    await request.delete( `/menus/${id}` );\n    history.push( '/menus', { previousTitle: document.title } );\n  };\n\n  const handleSelectMenuItem = async ( { id, name }: MenuItem ): Promise<void> => {\n    const { body: item } = await request.get( `/items/${id}` );\n    const cost = item.ingredients.reduce( ( sum: number, ingredient: ( { cost: number } ) ) => sum + ingredient.cost, 0 );\n    \n    const newRow = { id, name, price: item.price, cost };\n\n    setSections( [\n      ...sections.map( ( section, i: number ) => {\n        const items = [ ...section.items ];\n\n        if ( i === showingMenuItemSelectorForSection )\n          items.push( newRow );\n\n        return {\n          name: section.name,\n          items,\n        };\n      } ),\n    ] );\n\n    setShowingMenuItemSelectorForSection( null );\n  };\n\n  const handleDeleteItem = ( sectionIndex: number, itemIndex: number ): void => {\n    setSections( [\n      ...sections.map( ( section, i: number ) => {\n        const items = [ ...section.items ];\n\n        if ( i === sectionIndex )\n          items.splice( itemIndex, 1 );\n\n        return {\n          name: section.name,\n          items,\n        };\n      } ),\n    ] );\n  };\n\n  const handleSectionNameChange = ( name: string ): void => {\n    const newSections = [\n      ...sections.map( ( section, i: number ) => {\n        const items = [ ...section.items ];\n\n        return {\n          name: i === showingSectionNameDialogForSection ? name : section.name,\n          items,\n        };\n      } ),\n    ];\n\n    if ( showingSectionNameDialogForSection === sections.length )\n      newSections.push( { name, items: [] } );\n\n    setSections( newSections );\n    setShowingSectionNameDialogForSection( null );\n  };\n\n  const handleCloseSectionOptions = (): void => {\n    setShowingSectionOptionsForSection( null );\n  };\n\n  const handleDeleteSection = ( ): void => {\n    const newSections = [ ...sections ];\n    if ( showingSectionOptionsForSection != null )\n      newSections.splice( showingSectionOptionsForSection, 1 );\n    setSections( newSections );\n    setShowingSectionOptionsForSection( null );\n  };\n\n  return (\n    <>\n      <Prompt message={t( 'strings.unsaved-changes-warning' )} when={hasChanges} />\n\n      { isLargeScreen && <BackToLink /> }\n\n      <Box pb={2} display=\"flex\" alignItems=\"center\">\n        { /* Enough height for loading spinner + vertical padding */ }\n        <Box minHeight={56} maxWidth=\"100%\" flex={1} px={2} pb={1} display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\n          <Box maxWidth={ isLargeScreen ? '80%' : '100%' } mr={4} display=\"flex\" alignItems=\"center\">\n            <NameInput value={name} editing={editingName} onChange={handleNameChange} />\n            <IconButton onClick={handleClickEditName} className={classes.editButton} aria-label=\"Edit Name\"><EditOutlined /></IconButton>\n          </Box>\n          { id !== 'new' && <DeleteButton onClick={handleClickDelete} /> }\n          { loading && ! saving && <CircularProgress /> }\n          <Button\n            tabIndex={1}\n            style={{ marginLeft: 'auto' }}\n            startIcon={saving ? <CircularProgress size=\"1em\" style={{ color: '#fff' }} /> : <CheckCircleOutline />}\n            text={ saving ? `${t( 'strings.saving' )} ...` : t( 'strings.save' ) }\n            onClick={handleSave}\n          />\n        </Box>\n      </Box>\n\n      <Box px={1}>\n        { sections.map( ( section, i ) => {\n          return (\n            <Box mb={2}>\n              <Paper elevation={0}>\n                { section.name !== '' &&\n                  <Box p={2}>\n                    <Box display=\"flex\" justifyContent=\"space-between\" p={1}>\n                      <Typography variant=\"h2\" color=\"primary\">{section.name}</Typography>\n                      <Box textAlign=\"right\" onClick={ ( e: any ) => {\n                        sectionOptionsMenuAnchorRef.current = e.target; setShowingSectionOptionsForSection( i );\n                      } }>\n                        <MoreHoriz />\n                      </Box>\n                    </Box>\n                  </Box>\n                }\n                { section.items && section.items.length > 0 &&\n                  <Table>\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>\n                          <Typography variant=\"subtitle1\">{ t( 'strings.name' ) }</Typography>\n                        </TableCell>\n                        <TableCell>\n                          <Typography variant=\"subtitle1\">{ t( 'strings.price' ) }</Typography>\n                        </TableCell>\n                        <TableCell>\n                          <Typography variant=\"subtitle1\">{ t( 'strings.food-cost' ) }</Typography>\n                        </TableCell>\n                        <TableCell>\n                          <Typography variant=\"subtitle1\">{ t( 'strings.profit' ) }</Typography>\n                        </TableCell>\n                        <TableCell>\n                          { section.name === '' &&\n                              <Box textAlign=\"right\" onClick={ ( e: any ) => {\n                                sectionOptionsMenuAnchorRef.current = e.target; setShowingSectionOptionsForSection( i );\n                              } }>\n                                <MoreHoriz />\n                              </Box>\n                          }\n                        </TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      { section.items.map( ( item: MenuItem, j: number ) =>\n                        <TableRow>\n                          <TableCell><Link to={`/items/${item.id}`}>{item.name}</Link></TableCell>\n                          <TableCell>{item.price != null ? `$${item.price}` : '\\u00a0--\\u00a0' }</TableCell>\n                          <TableCell>{item.cost != null ? `$${item.cost.toFixed( 2 ).replace( /\\.0*$/, '' )}` : '\\u00a0--\\u00a0' }</TableCell>\n                          <TableCell>{ item.price != null && item.cost != null ? `$${( item.price - item.cost ).toFixed( 2 ).replace( /\\.0*$/, '' )}` : '\\u00a0--\\u00a0' }</TableCell>\n                          <TableCell>\n                            <Box textAlign=\"right\">\n                              <DeleteButton mild={true} onClick={ () => handleDeleteItem( i, j ) } />\n                            </Box>\n                          </TableCell>\n                        </TableRow>\n                      ) }\n                    </TableBody>\n                  </Table>\n                }\n                <Box p={2} display=\"flex\">\n                  <Box flex={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                    <div className={classes.addSection} onClick={\n                      ( e: any ) => {\n                        menuItemSelectorAnchorRef.current = e.target;\n                        setShowingMenuItemSelectorForSection( i );\n                        setExcludedItems( section.items.map( ( item: MenuItem ) => item.id ) );\n                      }\n                    }>\n                      <Add />{t( 'strings.add-menu-item' )}\n                    </div>\n                  </Box>\n                  { section.name === '' && ( ! section.items || section.items.length === 0 ) &&\n                      <Box alignSelf=\"flex-end\" textAlign=\"right\" onClick={ ( e: any ) => {\n                        sectionOptionsMenuAnchorRef.current = e.target; setShowingSectionOptionsForSection( i );\n                      } }>\n                        <Typography><MoreHoriz /></Typography>\n                      </Box>\n                  }\n                </Box>\n              </Paper>\n            </Box>\n          );\n        } ) }\n      </Box>\n          \n      <Box p={2} display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\">\n        <Paper className={classes.addSection} onClick={ () => setShowingSectionNameDialogForSection( sections.length ) }>\n          <Add />{t( 'strings.add-menu-section' )}\n        </Paper>\n      </Box>\n      <MenuItemSelector\n        excludedItems={ excludedItems }\n        onSelect={ handleSelectMenuItem }\n        onClose={ () => setShowingMenuItemSelectorForSection( null ) }\n        anchorEl={ menuItemSelectorAnchorRef.current as HTMLElement }\n        showing={ showingMenuItemSelectorForSection != null }\n      />\n      <DeleteDialog itemName={t( 'strings.menu_plural' )} showing={showingDeleteDialog} onClose={() => setShowingDeleteDialog( false )} onConfirm={ handleConfirmDelete } />\n      <SectionNameDialog name={ sections[ showingSectionNameDialogForSection ?? -1 ]?.name } showing={ showingSectionNameDialogForSection != null } onConfirm={ handleSectionNameChange } onClose={ () => setShowingSectionNameDialogForSection( null ) } />\n      <Menu\n        id=\"simple-menu\"\n        keepMounted\n        open={ showingSectionOptionsForSection != null }\n        onClose={ handleCloseSectionOptions }\n        anchorEl={ sectionOptionsMenuAnchorRef.current }\n      >\n        <MuiMenuItem onClick={ () => {\n          setShowingSectionNameDialogForSection( showingSectionOptionsForSection ); setShowingSectionOptionsForSection( null );\n        } }><Edit /><span style={{ paddingLeft: 8 }}>{t( 'strings.rename-section' )}</span></MuiMenuItem>\n        <MuiMenuItem onClick={ handleDeleteSection }><DeleteOutline /><span style={{ paddingLeft: 8 }}>{t( 'strings.delete' )}</span></MuiMenuItem>\n      </Menu>\n      <Snackbar\n        open={ showingAlert }\n        onExited={ () => {\n          setError( '' ); setSuccess( '' );\n        } }\n        TransitionComponent={useCallback( props => <Slide direction=\"down\" {...props} />, [] )}\n      >\n        <Alert variant=\"filled\" severity={ error ? 'error' : 'success' }>{ error || success }</Alert>\n      </Snackbar>\n    </>\n  );\n};\n\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/FaqPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/LoginPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/MenuItemPage.tsx",["946","947","948","949","950"],"import { Box, CircularProgress, IconButton, InputAdornment, Slide, Snackbar, TextField, makeStyles, useMediaQuery, useTheme } from '@material-ui/core';\nimport { CheckCircleOutline, EditOutlined } from '@material-ui/icons';\nimport { Alert } from '@material-ui/lab';\nimport React, { ReactElement, useCallback, useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Prompt, useHistory, useParams } from 'react-router-dom';\n\nimport { AppContext } from '../../../App';\nimport { useNumberField } from '../../../hooks/useNumberField';\nimport { useTemporarilyTrueState } from '../../../hooks/useTemporarilyTrueState';\nimport { RecipeIngredient } from '../../../models/RecipeIngredient';\nimport { Unit } from '../../../models/Unit';\nimport request from '../../../util/request';\nimport { trackChanges } from '../../../util/trackChanges';\nimport RecipeTable from '../RecipeTable';\nimport { Button } from '../../UI/Button';\nimport { DeleteButton } from '../../UI/DeleteButton';\nimport { DeleteDialog } from '../../UI/DeleteDialog';\nimport { NameInput } from '../../UI/NameInput';\nimport { TextInput } from '../../UI/TextInput';\nimport { BackToLink } from '../BackToLink';\n\nconst useStyles = makeStyles( theme => ( {\n  editableName: {\n    paddingLeft: 16,\n    paddingRight: 16,\n    cursor: 'default',\n    '& br': {\n      display: 'none',\n    },\n  },\n  editButton: {\n    margin: '0 0 0 16px',\n    color: theme.palette.text.primary,\n    cursor: 'pointer',\n  },\n} ) );\n\nexport const MenuItemPage = ( ): ReactElement => {\n  const { id } = useParams<{ id: string }>();\n  const { t } = useTranslation();\n  const history = useHistory();\n  \n  const [ hasChanges, setHasChanges ] = useState( false );\n  const [ loading, setLoading ] = useTemporarilyTrueState( true );\n  const [ saving, setSaving ] = useTemporarilyTrueState( false );\n  const [ success, setSuccess ] = useState( '' );\n  const [ error, setError ] = useState( '' );\n  const [ showingAlert, setShowingAlert ] = useState( false );\n  const [ allUnits, setAllUnits ] = useState( [] as Unit[] );\n\n  const [ name, setName ] = trackChanges( useState( '' ), setHasChanges );\n  const [ plateCost, setPlateCost ] = useState<number>( );\n  const [ price, setPrice ] = useNumberField( setHasChanges );\n  const [ averageWeeklySales, setAverageWeeklySales ] = useNumberField( setHasChanges );\n  const [ ingredients, setIngredients ] = trackChanges( useState( [ { key: '' + Math.random() } ] as RecipeIngredient[] ), setHasChanges );\n  const [ instructions, setInstructions ] = trackChanges( useState( '' ), setHasChanges );\n\n  const [ showingDeleteDialog, setShowingDeleteDialog ] = useState( false );\n  const [ editingName, setEditingName ] = useState( false );\n\n  const theme = useTheme();\n  const classes = useStyles( theme );\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'md' ) );\n  const isExtraLargeScreen = useMediaQuery( theme.breakpoints.up( 'lg' ) );\n\n  const defaultErrorMessage = t( 'elements.pantry.error-loading' );\n\n  const { handlePlanUpgradeRequired } = useContext( AppContext );\n\n  useEffect( () => {\n    if ( !( error || success ) )\n      return;\n    setShowingAlert( true );\n    const timer = setTimeout( () => {\n      setShowingAlert( false );\n    }, 4000 );\n    return () => clearTimeout( timer );\n  }, [ !!( error || success ) ] );\n\n  useEffect( () => {\n    ( async () => {\n      try {\n        const requests = [ request.get( '/units' ) ];\n\n        if ( id === 'new' ) {\n          setEditingName( true );\n          setName( '' );\n          handleClickEditName();\n          setLoading( false );\n          document.title = 'New Menu Item';\n        } else {\n          requests.push( request.get( `/items/${id}` ) );\n        }\n\n        const [ units, item ] = await Promise.all( requests );\n        setAllUnits( units.body.items );\n\n        if ( ! item )\n          return;\n\n        const {\n          name,\n          price,\n          averageWeeklySales,\n          instructions,\n          ingredients,\n        } = item.body;\n\n        ingredients?.forEach( ( ingredient: RecipeIngredient ) => ingredient.key = ( ingredient.ingredient?.id || '' ) + '' + Math.random() );\n\n        setError( '' );\n        setName( name );\n        setPrice( price?.toFixed( 2 ).replace( /\\.00$/, '' ) );\n        setAverageWeeklySales( averageWeeklySales );\n        setInstructions( instructions );\n        setIngredients( ingredients.map( ( ingredient: any ) => ( {\n          ingredient: {\n            id: ingredient.id,\n            type: ingredient.type,\n            name: ingredient.name,\n            deleted: ingredient.deleted,\n          },\n          amount: ingredient.amount,\n          unit: ingredient.unit,\n          waste: ingredient.waste,\n          cost: ingredient.cost,\n        } ) ).concat( [ {} ] ) );\n        document.title = name;\n      } catch ( err ) {\n        setError( err.message || defaultErrorMessage );\n      }\n      setLoading( false );\n      setHasChanges( false );\n    } )();\n  }, [ id, defaultErrorMessage, loading ] );\n\n  useEffect( () => {\n    setPlateCost( ingredients.reduce( ( sum, { cost } ) => sum + ( cost ?? 0 ), 0 ) );\n  }, [ ingredients ] );\n\n  const handleClickEditName = (): void => {\n    setEditingName( true );\n  };\n\n  const handleClickDelete = (): void => {\n    setShowingDeleteDialog( true );\n  };\n\n  const handleSave = async (): Promise<void> => {\n\n    if ( price.value && +price.value !== +price.value )\n      return;\n    \n\n    setSaving( true );\n\n    const formattedIngredients = ingredients.flatMap( recipeIngredient => {\n      const { ingredient, amount, unit, waste } = recipeIngredient;\n      if ( ! ingredient )\n        return [ ];\n      return [\n        {\n          id: ingredient.id,\n          amount: amount ? +amount : null,\n          unit,\n          waste: waste ? +waste: null,\n        },\n      ];\n    } );\n\n    const body = {\n      name,\n      price: price.value === '' ? undefined : +price.value,\n      averageWeeklySales: averageWeeklySales.value === '' ? undefined : +averageWeeklySales.value,\n      instructions,\n      ingredients: formattedIngredients,\n    };\n\n    try {\n      if ( id === 'new' ) {\n        const { body: res } = await request.post( '/items', { body } );\n        setSuccess( t( 'strings.successfully-created' ) );\n        setHasChanges( false );\n        history.replace( `/items/${res.id}`, { previousTitle: document.title } );\n      } else {\n        await request.put( `/items/${id}`, { body } );\n        setError( '' );\n        setSuccess( t( 'strings.successfully-saved-changes' ) );\n        setLoading( true );\n      }\n    } catch ( err ) {\n      if ( err.message === 'PLAN_UPGRADE_REQUIRED' )\n        handlePlanUpgradeRequired( err.plan );\n      else\n        setError( `Problem saving: ${err.message || defaultErrorMessage}` );\n      \n    }\n    setSaving( false );\n  };\n\n  const handleNameChange = ( newName: string ): void => {\n    setEditingName( false );\n    setName( newName );\n  };\n\n  const handleConfirmDelete = async ( ): Promise<void> => {\n    await request.delete( `/items/${id}` );\n    history.push( '/items', { previousTitle: document.title } );\n  };\n\n  return (\n    <>\n      <Prompt message={t( 'strings.unsaved-changes-warning' )} when={hasChanges} />\n\n      { isLargeScreen && <BackToLink /> }\n\n      <Box display=\"flex\" alignItems=\"center\">\n        { /* Enough height for loading spinner + vertical padding */ }\n        <Box minHeight={56} maxWidth=\"100%\" flex={1} px={2} pb={1} display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\n          <Box maxWidth={ isLargeScreen ? '80%' : '100%' } mr={4} display=\"flex\" alignItems=\"center\">\n            <NameInput value={name} editing={editingName} onChange={handleNameChange} />\n            <IconButton onClick={handleClickEditName} className={classes.editButton} aria-label=\"Edit Name\"><EditOutlined /></IconButton>\n          </Box>\n          { id !== 'new' && <DeleteButton onClick={handleClickDelete} /> }\n          { loading && <CircularProgress /> }\n          <Button\n            tabIndex={1}\n            style={{ marginLeft: 'auto' }}\n            startIcon={ saving ? <CircularProgress size=\"1em\" style={{ color: '#fff' }} /> : <CheckCircleOutline /> }\n            text={ saving ? `${t( 'strings.saving' )} ...` : t( 'strings.save' ) }\n            onClick={ handleSave }\n          />\n        </Box>\n      </Box>\n      <Box px={2} mb={2} display=\"flex\" justifyContent=\"flex-start\">\n        <Box mx={0.5} flex={'0 1 160px'}>\n          <TextInput\n            label={ t( 'strings.plate-cost' )}\n            disabled\n            value={plateCost !== undefined ? plateCost.toFixed( 2 ).replace( /\\.00$/, '' ) : '\\u00a0--\\u00a0' }\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\" style={{ pointerEvents: 'none' }}>$</InputAdornment>,\n            }}\n          />\n        </Box>\n        <Box mx={0.5} flex={'0 1 160px'}>\n          <TextInput\n            label={t( 'strings.sales-price' )}\n            { ...price }\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\" style={{ pointerEvents: 'none' }}>$</InputAdornment>,\n            }}\n          />\n        </Box>\n        <Box mx={0.5} flex={'0 1 160px'}><TextInput label={t( 'strings.average-weekly-units' )} { ...averageWeeklySales } /></Box>\n      </Box>\n      <Box { ... isExtraLargeScreen ? { mx: 2.5 } : {} }>\n        <RecipeTable\n          units={allUnits}\n          rows={ingredients}\n          onChange={ useCallback( ( rows: RecipeIngredient[] ) => {\n            setIngredients( rows );\n          }, [] ) }\n        />\n      </Box>\n      <Box display=\"flex\" pt={2} px={2}>\n        <TextField style={{ flex: 1 }} InputProps={{ style: { margin: 0, background: '#fff', padding: 16 } }} variant=\"outlined\" placeholder={t( 'strings.instructions' )} multiline value={instructions} onChange={ ( e: any ) => setInstructions( e.target.value ) } />\n      </Box>\n      <DeleteDialog itemName={t( 'strings.menu-item' )} showing={showingDeleteDialog} onClose={() => setShowingDeleteDialog( false )} onConfirm={ handleConfirmDelete } />\n      <Snackbar\n        open={ showingAlert }\n        onExited={ () => {\n          setError( '' ); setSuccess( '' );\n        } }\n        TransitionComponent={useCallback( props => <Slide direction=\"down\" {...props} />, [] )}\n      >\n        <Alert variant=\"filled\" severity={ error ? 'error' : 'success' }>{ error || success }</Alert>\n      </Snackbar>\n    </>\n  );\n};\n\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PosMenuItemAssociationsPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PasswordResetPage.tsx",["951"],"import { Box, Button, CircularProgress, Container, Typography, withStyles } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory, useParams } from 'react-router-dom';\n\nimport request from '../../../util/request';\nimport { PasswordInput } from '../../UI/PasswordInput';\nimport { TextInput } from '../../UI/TextInput';\nimport { Title } from '../Title';\n\ninterface Props {\n  classes: {\n    logInButton: string;\n    dialog: string;\n  } ;\n}\n\nconst styles = {\n  dialog: {\n    background: '#fff',\n  },\n  logInButton: {\n    color: '#fff',\n    paddingTop: '1.375rem',\n    paddingBottom: '1.375rem',\n    fontWeight: 700,\n    fontSize: '1.1rem',\n    borderRadius: 0,\n  },\n};\n\nexport const PasswordResetPage = withStyles( styles )( ( props: Props ) => {\n  const { t } = useTranslation();\n  const [ email, setEmail ] = useState( '' );\n  const [ errorMessage, setErrorMessage ] = useState( '' );\n  const [ loading, setLoading ] = useState( false );\n  const [ requestedToken, setRequestedToken ] = useState( false );\n\n  const [ token, setToken ] = useState<string>( );\n  const [ password, setPassword ] = useState( '' );\n\n  const history = useHistory();\n  const params = useParams<{ token?: string }>();\n\n  useEffect( () => {\n    if ( ! params.token )\n      return;\n    setToken( params.token );\n    history.replace( '/password/reset' );\n  }, [ params.token ] );\n\n  const { classes } = props;\n\n  const handleRequestToken = async ( e: React.FormEvent<HTMLFormElement> ): Promise<void> => {\n    e.preventDefault();\n    setLoading( true );\n\n    try {\n      const { status, body } = await request.post( '/auth/password-reset', {\n        body: {\n          email,\n        },\n      } );\n      \n      if ( status !== 201 )\n        throw new Error( body.message || t( 'strings.unknown-error' ) );\n      \n\n      setErrorMessage( '' );\n      setRequestedToken( true );\n    } catch ( e ) {\n      setErrorMessage( e.message );\n    }\n\n    setLoading( false );\n  };\n\n  const handleSubmitNewPassword = async ( e: React.FormEvent<HTMLFormElement> ): Promise<void> => {\n    e.preventDefault();\n    setLoading( true );\n\n    try {\n      const { status, body } = await request.post( '/auth/password-reset/confirm', {\n        body: {\n          token,\n          password,\n        },\n        noAuth: true,\n        noThrow: true,\n      } );\n\n      if ( status === 403 )\n        setToken( undefined );\n      \n\n      if ( status !== 201 )\n        throw new Error( body.message || t( 'strings.unknown-error' ) );\n      \n\n      window.location.href = '/login?reset';\n    } catch ( err ) {\n      setErrorMessage( err.message );\n    }\n  \n    setLoading( false );\n  };\n\n  return (\n    <Container maxWidth=\"sm\" disableGutters>\n      <Container className={classes.dialog}>\n        <Box py=\"3rem\" textAlign=\"center\">\n          <Link to=\"/login\"><Title variant=\"h2\" color=\"primary\" /></Link>\n        </Box>\n\n        <Box px=\"1rem\" pb=\"2rem\">\n          \n          { errorMessage &&\n            <Alert severity=\"error\">\n              {errorMessage}\n            </Alert>\n          }\n\n          { requestedToken\n            ?\n            <Alert>\n              { t( 'elements.password-reset.email-sent', { email } ) }\n            </Alert>\n            :\n            <>\n              <Box display=\"flex\" minHeight={56} alignItems=\"center\">\n                <Typography variant=\"h1\" style={{ paddingRight: 32 }}>\n                  {\n                    token ? t( 'strings.enter-a-new-password' ) : t( 'strings.reset-password' )\n                  }\n                </Typography>\n\n                { loading && <CircularProgress /> }\n              </Box>\n              <form onSubmit={token ? handleSubmitNewPassword : handleRequestToken}>\n                  \n                {\n                  token\n                    ? <PasswordInput value={password} onChange={ ( e: any ) => setPassword( e.target.value ) } />\n                    : <TextInput\n                      type=\"email\"\n                      label={t( 'strings.email' )}\n                      value={email}\n                      onChange={ ( e: any ) => setEmail( e.target.value ) }\n                      autoFocus\n                      required\n                      fullWidth\n                    />\n                }\n                  \n                <Container disableGutters>\n                  <Button type=\"submit\" className={classes.logInButton} variant=\"contained\" color=\"primary\" disableElevation fullWidth>\n                    { token ? t( 'strings.set-password' ) : t( 'strings.request-password-reset-link' ) }\n                  </Button>\n                </Container>\n\n              </form>\n            </>\n          }\n        </Box>\n      \n      </Container>\n\n      <Box mt=\"1rem\" display=\"flex\" justifyContent=\"center\">\n        <Typography>Already know your password? <Link to=\"/login\">{t( 'strings.log-in' )}</Link></Typography>\n      </Box>\n\n    </Container>\n\n  );\n} );\n \n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/HomePage.tsx",["952"],"import { Box, Container, Switch, Typography, makeStyles, useMediaQuery, useTheme } from '@material-ui/core';\nimport React, { ReactElement, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport * as backgroundImg from '../../../assets/background.png';\nimport * as headerImg from '../../../assets/header.jpg';\nimport screenshotImg from '../../../assets/menu-item-editor-screenshot.png';\nimport restaurantImg from '../../../assets/restaurant.jpg';\nimport spoonsImg from '../../../assets/spoons.jpg';\nimport request from '../../../util/request';\nimport { Button } from '../../UI/Button';\nimport { DemoWidget } from '../../UI/DemoWidget';\nimport { Footer } from '../../UI/Footer';\nimport { BuoyIcon, SuitcaseIcon, WrenchIcon } from '../../UI/Icons';\nimport { PLAN_DETAILS, PlanDetails } from '../../UI/PlanDetails';\nimport { Header } from '../Header';\n\nconst useStyles = makeStyles( {\n  root: {\n  },\n} );\n\nexport const HomePage = ( ): ReactElement => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'md' ) );\n\n  const [ allPlans, setAllPlans ] = useState<any>( {} );\n  const [ yearly, setYearly ] = useState( false );\n  const [ showingDemo, setShowingDemo ] = useState( false );\n\n  const planNames = [ ...new Set( Object.keys( allPlans || {} ).map( key => key.replace( /_[^_]*$/, '' ) ) ) ] as ( keyof typeof PLAN_DETAILS )[];\n\n  useEffect( () => {\n    ( async () => {\n      const { body: { plans } } = await request.get( '/billing/plans', { noAuth: true, noThrow: true } );\n      setAllPlans( plans );\n\n      // Sumo Code\n      if ( process.env.NODE_ENV === 'production' && ! ( window as any ).hasLoadedSumo ) {\n        ( window as any ).hasLoadedSumo = true;\n        const sumoScriptEl = document.createElement( 'script' );\n        const currentScriptEl = document.getElementsByTagName( 'script' )[0];\n        sumoScriptEl.async=true;\n        sumoScriptEl.src='//load.sumo.com/';\n        sumoScriptEl.dataset.sumoSiteId='308a3cfba511808a8990dfa6d86fa5f5039a257836ba839a79b4c05b3ec4ddfe';\n        currentScriptEl.parentNode?.insertBefore( sumoScriptEl, currentScriptEl );\n      }\n    } )();\n  }, [] );\n\n\n  return (\n    <Box className={ classes.root } display=\"flex\" flexDirection=\"column\">\n      <Box flex={'0 1 88vh'}>\n        <Header />\n\n        <Box margin=\"auto\">\n          <Box py={8} style={{ background: `#333 url( ${headerImg} )`, backgroundRepeat: 'no-repeat', backgroundSize: '100%', backgroundPosition: 'center' }}>\n            <Container maxWidth=\"md\">\n              <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" textAlign=\"center\" px={isLargeScreen ? 11 : 2}>\n                <Box>\n                  <Typography variant=\"h2\" style={{ fontSize: isLargeScreen ? '4rem' : '2rem', color: '#fff', textShadow: '#00000022 -1px 0px 2px, #00000022 0px -1px 2px, #00000022 1px 0px 2px, #00000022 0px 1px 2px' }}>Your search for a simple way to manage food costs ends here.</Typography>\n                </Box>\n\n                <Box py={2}>\n                  <Typography style={{ fontSize: isLargeScreen ? '1.3rem' : '1rem', color: '#fff', textShadow: '#00000055 -4px 0px 8px, #00000055 0px -4px 8px, #00000055 4px 0px 8px, #00000055 0px 4px 8px' }}>\n                    ReadyPrep helps you build and cost recipes<br />\n                    simply and accurately - no calculator required.\n                  </Typography>\n                </Box>\n\n                <Box pb={2}>\n                  <Typography style={{ fontSize: isLargeScreen ? '1.3rem' : '1rem', color: '#fff', textShadow: '#00000055 -2px 0px 4px, #00000055 0px -2px 4px, #00000055 2px 0px 4px, #00000055 0px 2px 4px' }}>Sign up for our beta and start your day ready for success.</Typography>\n                </Box>\n\n                <Link to=\"/signup\"><Button text=\"Get Started\" /></Link>\n              </Box>\n            </Container>\n          </Box>\n\n          <Container maxWidth=\"md\">\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" textAlign=\"center\" px={isLargeScreen ? 14 : 2} py={8}>\n              <Box>\n                <Typography variant=\"h3\" style={{ fontSize: '3rem', fontWeight: 600, color: '#fff', textShadow: '0px 2.76726px 2.21381px rgba(0, 0, 0, 0.0196802), 0px 6.6501px 5.32008px rgba(0, 0, 0, 0.0282725), 0px 12.5216px 10.0172px rgba(0, 0, 0, 0.035), 0px 22.3363px 17.869px rgba(0, 0, 0, 0.0417275), 0px 41.7776px 33.4221px rgba(0, 0, 0, 0.0503198), 0px 100px 80px rgba(0, 0, 0, 0.07)' }}>\n                  How well do you know your prep requirements?\n                </Typography>\n              </Box>\n              <Box py={2} px={6}>\n                <Typography style={{ color: '#000', fontWeight: 300 }}>ReadyPrep calculates estimated PAR levels for your prep recipes and pantry ingredients.</Typography>\n              </Box>\n            </Box>\n          </Container>\n\n          <div id=\"product\"></div>\n\n          <Box style={{ background: '#fcfcfc' }} >\n            <Box style={{ background: `url( ${backgroundImg} )`, backgroundSize: '100%', backgroundRepeat: 'no-repeat', backgroundPosition: 'center bottom' }}>\n              <Container maxWidth=\"lg\" disableGutters>\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                  <Box flex={1}>\n                    <img alt=\"Restaurant spoons\" src={ spoonsImg } style={{ maxWidth: '100%', margin: 'auto' }} />\n                  </Box>\n                \n                  <Box>\n                    <Typography align=\"center\" variant=\"h3\" style={{ fontSize: '2rem', color: '#373F41' }}>\n                      { 'Designed and developed for ease of use.' }\n                    </Typography>\n                  </Box>\n                  <Box py={2} px={6}>\n                    <Typography>We help independent restaurants optimize their menus.</Typography>\n                  </Box>\n                </Box>\n\n                <Box m=\"auto\" maxWidth={1082} display=\"flex\" flexWrap=\"wrap\" justifyContent=\"space-around\" textAlign=\"center\" pt={2}>\n                  <Box flex={1.2} px={2} pt={2}>\n                    <Box color=\"#5C325C\">\n                      <SuitcaseIcon />\n                    </Box>\n                    <Typography variant=\"h3\" color=\"textSecondary\" style={{ fontSize: '1.4rem', fontWeight: 500 }}>{'Plate\\u00a0Cost\\u00a0Calculator'}</Typography>\n                    <Box pt={1.5}><Typography>Upload and quickly assemble ingredients.<br />Customize units of measure.</Typography></Box>\n                  </Box>\n                  <Box flex={1} px={2} pt={2}>\n                    <Box color=\"#5C325C\">\n                      <WrenchIcon />\n                    </Box>\n                    <Typography variant=\"h3\" color=\"textSecondary\" style={{ fontSize: '1.4rem', fontWeight: 500 }}>{'Easy\\u00a0to\\u00a0Use'}</Typography>\n                    <Box pt={1.5}><Typography>Designed for simplicity.<br />Forgiving and customizable.</Typography></Box>\n                  </Box>\n                  <Box flex={1.2} px={2} pt={2}>\n                    <Box color=\"#5C325C\">\n                      <BuoyIcon />\n                    </Box>\n                    <Typography variant=\"h3\" color=\"textSecondary\" style={{ fontSize: '1.4rem', fontWeight: 500 }}>{'Par\\u00a0Level\\u00a0Estimator'}</Typography>\n                    <Box pt={1.5}><Typography>Stock what you need.<br />Make what you need.</Typography></Box>\n                  </Box>\n                </Box>\n\n                <Box id=\"demo-container\" display=\"flex\" justifyContent=\"center\" alignItems=\"center\" px={isLargeScreen ? 4 : 0} pt={8}>\n                  {\n                    showingDemo\n                      ? <DemoWidget />\n                      : <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n                        <img src={ screenshotImg } alt=\"ReadyPrep Demo\" style={{ width: '100%' }}/>\n                        <a style={{ cursor: 'pointer' }} onClick={\n                          () => {\n                            setShowingDemo( true );\n                            const scrollTarget = document.getElementById( 'demo-container' );\n                            scrollTarget && window.scrollTo( { top: scrollTarget.offsetTop, behavior: 'smooth' } );\n                          }\n                        }>Switch to Interactive Demo</a>\n                      </Box>\n                  }\n                </Box>\n\n              </Container>\n\n              <Box style={{ }} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" pt={6} pb={16}>\n                <Link to=\"/signup\"><Button text=\"Get Started\" /></Link>\n              </Box>\n            </Box>\n\n            <Box display=\"flex\" flexWrap=\"wrap\" p={4}>\n              <Box flex={1} minWidth={300} p={4}><img alt=\"ReadyPrep - Restaurant\" src={ restaurantImg } style={{ width: '100%' }}/></Box>\n              <Box flex={1} pt={4} px={isLargeScreen ? 8 : 0}>\n                <Typography variant=\"h4\">Founded by restaurant owners, just like you.</Typography>\n                <Box pt={4}>\n                  <Typography>\n                    As restaurant owners, we had important questions to answer.\n                    How much does it cost to make my recipes?\n                    How much do I buy and prepare to serve my customers?\n                    The questions were simple, but important.\n                    We needed a way to crunch the data, but spreadsheets were either too limiting or too complicated, and large, bulky software systems were too difficult to maintain.\n                  </Typography>\n                  <br />\n                  <Typography>\n                    ReadyPrep was developed by restaurant owners to help independent operators answer these important questions.\n                    A simple, yet informative solution that helps us be better, more informed owners and operators.\n                    Give it a try today.\n                  </Typography>\n                </Box>\n              </Box>\n            </Box>\n\n            <div id=\"pricing\"></div>\n\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" pt={2} pb={1}>\n              <Typography color=\"textSecondary\" { ... ( ! yearly && { style: { fontWeight: 'bold' } } ) }>Monthly</Typography>\n              <Switch color=\"primary\" checked={yearly} onChange={ () => setYearly( ! yearly ) } />\n              <Typography color=\"textSecondary\" { ... ( yearly && { style: { fontWeight: 'bold' } } ) }>Yearly</Typography>\n            </Box>\n\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" pb={18}>\n              { planNames?.map( ( planName: keyof typeof PLAN_DETAILS ) => {\n                const plans = {\n                  monthly: allPlans[ planName + '_MONTHLY' ] || allPlans[ planName ],\n                  yearly: allPlans[ planName + '_YEARLY' ] || allPlans[ planName ],\n                };\n\n                const price = ( plans[ yearly ? 'yearly' : 'monthly' ].amount/100 ).toFixed( 2 ).replace( /\\.00$/, '' );\n                return (\n                  <PlanDetails { ... { planName, price, yearly, signupLink: true, deemphasize: planName === 'FREE' } } />\n                );\n              }\n              )\n              }\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n      <Box flex={'1 0 12vh'} display=\"flex\"><Footer /></Box>\n    </Box>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PrepLogPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryListPage.tsx",["953"],"import { Box, CircularProgress, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, useMediaQuery, useTheme } from '@material-ui/core';\nimport { Add, Sync } from '@material-ui/icons';\nimport { Alert, Skeleton } from '@material-ui/lab';\nimport React, { ReactElement, useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router-dom';\nimport { AppContext } from 'src/App';\n\nimport { useQueryState } from '../../../hooks/useQueryState';\nimport request from '../../../util/request';\nimport { Button } from '../../UI/Button';\nimport { PageSizeSelector } from '../../UI/PageSizeSelector';\nimport { Paginator } from '../../UI/Paginator';\nimport { SearchInput } from '../../UI/SearchInput';\nimport { UploadButton } from '../../UI/UploadButton';\nimport { IngredientRow } from './Pantry/IngredientRow';\n\nconst defaultParams = {\n  page: '1',\n  pageSize: '10',\n  search: '',\n};\n\nexport const PantryListPage = ( ): ReactElement|null => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  \n  const [ ingredients, setIngredients ] = useState( [] as any[] );\n  const [ numPages, setNumPages ] = useState( 0 );\n  const [ initialLoadInProgress, setInitialLoadInProgress ] = useState( true );\n  const [ loading, setLoading ] = useState( false );\n  const [ error, setError ] = useState( '' );\n  const [ { queryString, params }, setQueryState ] = useQueryState( defaultParams );\n\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'md' ) );\n\n  const { handlePlanUpgradeRequired } = useContext( AppContext );\n\n  useEffect( () => {\n    if ( ! loading )\n      return;\n      \n    const defaultErrorMessage = t( 'elements.pantry.error-loading' );\n\n    ( async () => {\n      try {\n        const { body: res } = await request.get( `/pantry${queryString}` );\n\n        setError( '' );\n        setLoading( false );\n        setNumPages( res.numPages || 0 );\n        setIngredients( res.pantryIngredients || [] );\n      } catch ( err ) {\n        if ( err.message === 'PLAN_UPGRADE_REQUIRED' )\n          handlePlanUpgradeRequired( err.plan );\n        setError( err.message || defaultErrorMessage );\n        setLoading( false );\n        setIngredients( [] );\n        setNumPages( 0 );\n      }\n      setInitialLoadInProgress( false );\n    } )();\n\n    document.title = 'Pantry Ingredients';\n  }, [ loading, queryString, params.search, t ] );\n\n  useEffect( () => {\n    if ( ! params.search )\n      return setLoading( true );\n    const timer = setTimeout( () => setLoading( true ), 600 );\n    return () => clearTimeout( timer );\n  }, [ params.search ] );\n\n  const handleQueryChange = ( query: string ): void => {\n    setQueryState( {\n      page: undefined,\n      search: query,\n    } );\n  };\n\n  const handleChangePage = ( page: string ): void => {\n    setQueryState( { page } );\n    setLoading( true );\n  };\n\n  const handleChangePageSize = ( newPageSize: string ): void => {\n    const currentPage = +( params.page || defaultParams.page );\n    const pageSize = +( params.pageSize || defaultParams.pageSize );\n\n    // Adjust currentPage so that the first item showing is still visible\n    const newPage = '' + ( Math.floor( ( currentPage - 1 )*pageSize/+newPageSize ) + 1 );\n    \n    setQueryState( {\n      page: newPage,\n      pageSize: newPageSize,\n    } );\n    setLoading( true );\n  };\n\n  if ( initialLoadInProgress )\n    return null;\n\n  return (\n    <>\n      <Box py=\"1.25rem\" display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\n        { /* Enough height for loading spinner + vertical padding */ }\n        <Box minHeight={56} flex={'1 10'} p={1} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography variant=\"h3\" noWrap>{ t( 'strings.pantry-ingredient_plural' ) }</Typography>\n          { loading && <CircularProgress /> }\n        </Box>\n        <Box flex={1} display=\"flex\" p={1} alignItems=\"center\">\n          <Box flex={2} minWidth={180} mx={1} display=\"flex\" alignItems=\"stretch\">\n            <SearchInput onSubmit={ () => setLoading( true ) } value={ params.search } onChange={handleQueryChange} />\n          </Box>\n          <Box flex={1} mx={1} display=\"flex\">\n            <Button\n              startIcon={<Add />}\n              text={t( 'strings.create' )}\n              style={{ flex: 1 }}\n              onClick={() => history.push( '/pantry/new', { previousTitle: document.title } )}\n            />\n          </Box>\n          <Box flex={1} mx={1} display=\"flex\">\n            <UploadButton onUploadFinished={ () => {\n              setLoading( true );\n            } } />\n          </Box>\n        </Box>\n      </Box>\n      <Paper elevation={0}>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.name' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.price-per-pack' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.units-per-pack' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.amount-per-unit' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.par-level' ) }</Typography>\n                </TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {\n                ingredients.length\n                  ? ingredients.map( ingredient => <IngredientRow key={ingredient.id} ingredient={ingredient} /> )\n                  :\n                  <TableRow>\n                    <TableCell colSpan={7}>\n                      {\n                        loading\n                          ? <Skeleton variant=\"rect\" />\n                          :\n                          <Box py={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                            {\n                              error\n                                ? <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                                  <Alert severity=\"error\" style={{ paddingTop: 4, paddingBottom: 4 }}>\n                                    {error}\n                                  </Alert>\n                                  <Box p={4}>\n                                    <Button\n                                      startIcon={<Sync />}\n                                      onClick={() => setLoading( true )}\n                                      text={t( 'strings.retry' )}\n                                      style={{ paddingLeft: 16, paddingRight: 16 }}\n                                    />\n                                  </Box>\n                                </Box>\n                                :\n                                <>\n                                  <Button\n                                    startIcon={<Add />}\n                                    text={t( 'strings.create' ) + ' your first ' + t( 'strings.pantry-ingredient' )}\n                                    style={{ flex: 1 }}\n                                    onClick={() => history.push( '/pantry/new', { previousTitle: document.title } )}\n                                  />\n                                </>\n                            }\n                          </Box>\n                      }\n                    </TableCell>\n                  </TableRow>\n              }\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n\n      <Box pt={3} display=\"flex\" alignItems=\"flex-end\">\n        <Box flex={1}></Box>\n        <Box flex={1} justifyContent=\"center\">\n          <Paginator\n            numPages={numPages}\n            currentPage={+params.page}\n            siblingCount={isLargeScreen ? 2 : 1}\n            boundaryCount={isLargeScreen ? 3 : 1}\n            onNavigate={page => handleChangePage( page+'' )}\n          />\n        </Box>\n        <Box flex={1} display=\"flex\" justifyContent=\"flex-end\">\n          <PageSizeSelector value={+params.pageSize} onChange={pageSize => handleChangePageSize( pageSize+'' )} />\n        </Box>\n      </Box>\n    </>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/MenusListPage.tsx",["954"],"import { Box, CircularProgress, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Tooltip, Typography, useMediaQuery, useTheme } from '@material-ui/core';\nimport { Add, Sync } from '@material-ui/icons';\nimport { Alert, Skeleton } from '@material-ui/lab';\nimport React, { ReactElement, useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory } from 'react-router-dom';\nimport { AppContext } from 'src/App';\n\nimport { useQueryState } from '../../../hooks/useQueryState';\nimport request from '../../../util/request';\nimport { Button } from '../../UI/Button';\nimport { PageSizeSelector } from '../../UI/PageSizeSelector';\nimport { Paginator } from '../../UI/Paginator';\nimport { ForwardButton } from '../ForwardButton';\n\nconst defaultParams = {\n  page: '1',\n  pageSize: '10',\n  search: '',\n};\n\nexport const MenusListPage = ( ): ReactElement|null => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  \n  const [ menus, setMenus ] = useState( [] as any[] );\n  const [ numPages, setNumPages ] = useState( 0 );\n  const [ initialLoadInProgress, setInitialLoadInProgress ] = useState( true );\n  const [ loading, setLoading ] = useState( true );\n  const [ error, setError ] = useState( '' );\n  const [ { queryString, params }, setQueryState ] = useQueryState( defaultParams );\n\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'md' ) );\n  \n  const { handlePlanUpgradeRequired } = useContext( AppContext );\n\n  useEffect( () => {\n    if ( ! loading )\n      return;\n      \n    const defaultErrorMessage = t( 'elements.menu.error-loading' );\n\n    ( async () => {\n      try {\n        const { body: res } = await request.get( `/menus${queryString}` );\n\n        setError( '' );\n        setLoading( false );\n        setNumPages( res.numPages || 0 );\n        setMenus( res.menus || [] );\n      } catch ( err ) {\n        if ( err.message === 'PLAN_UPGRADE_REQUIRED' )\n          handlePlanUpgradeRequired( err.plan );\n        setError( err.message || defaultErrorMessage );\n        setLoading( false );\n        setMenus( [] );\n        setNumPages( 0 );\n      }\n      setInitialLoadInProgress( false );\n    } )();\n\n    document.title = 'Menus';\n  }, [ loading, queryString, params.search, t ] );\n\n  const handleChangePage = ( page: string ): void => {\n    setQueryState( { page } );\n    setLoading( true );\n  };\n\n  const handleChangePageSize = ( newPageSize: string ): void => {\n    const currentPage = +( params.page || defaultParams.page );\n    const pageSize = +( params.pageSize || defaultParams.pageSize );\n\n    // Adjust currentPage so that the first item showing is still visible\n    const newPage = '' + ( Math.floor( ( currentPage - 1 )*pageSize/+newPageSize ) + 1 );\n    \n    setQueryState( {\n      page: newPage,\n      pageSize: newPageSize,\n    } );\n    setLoading( true );\n  };\n\n  if ( initialLoadInProgress )\n    return null;\n\n  return (\n    <>\n      <Box py=\"1.25rem\" display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\n        { /* Enough height for loading spinner + vertical padding */ }\n        <Box minHeight={56} flex={1} p={1} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography variant=\"h3\" noWrap>{ t( 'strings.menu_plural' ) }</Typography>\n          { loading && <CircularProgress /> }\n        </Box>\n        <Box flex={1} maxWidth={200} display=\"flex\" p={1} alignItems=\"center\">\n          <Box flex={1} mx={1} display=\"flex\">\n            { menus.length > 0 &&\n              <Button\n                startIcon={<Add />}\n                text={t( 'strings.create' )}\n                style={{ flex: 1 }}\n                onClick={() => history.push( '/menus/new', { previousTitle: document.title } )}\n              />\n            }\n          </Box>\n        </Box>\n      </Box>\n      <Paper elevation={0}>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.name' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.number-of-items' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.last-updated' ) }</Typography>\n                </TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {\n                menus.length\n                  ? menus.map( menu => <MenuRow key={menu.id} menu={menu} /> )\n                  :\n                  <TableRow>\n                    <TableCell colSpan={7}>\n                      {\n                        loading\n                          ? <Skeleton variant=\"rect\" />\n                          :\n                          <Box py={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                            {\n                              error\n                                ? <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                                  <Alert severity=\"error\" style={{ paddingTop: 4, paddingBottom: 4 }}>\n                                    {error}\n                                  </Alert>\n                                  <Box p={4}>\n                                    <Button\n                                      startIcon={<Sync />}\n                                      onClick={() => setLoading( true )}\n                                      text={t( 'strings.retry' )}\n                                      style={{ paddingLeft: 16, paddingRight: 16 }}\n                                    />\n                                  </Box>\n                                </Box>\n                                :\n                                <>\n                                  <Button\n                                    startIcon={<Add />}\n                                    text={t( 'strings.create' ) + ' your first ' + t( 'strings.menu' )}\n                                    style={{ flex: 1 }}\n                                    onClick={() => history.push( '/menus/new', { previousTitle: document.title } )}\n                                  />\n                                </>\n                            }\n                          </Box>\n                      }\n                    </TableCell>\n                  </TableRow>\n              }\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n\n      <Box pt={3} display=\"flex\" alignItems=\"flex-end\">\n        <Box flex={1}></Box>\n        <Box flex={1} justifyContent=\"center\">\n          <Paginator\n            numPages={numPages}\n            currentPage={+params.page}\n            siblingCount={isLargeScreen ? 2 : 1}\n            boundaryCount={isLargeScreen ? 3 : 1}\n            onNavigate={page => handleChangePage( page+'' )}\n          />\n        </Box>\n        <Box flex={1} display=\"flex\" justifyContent=\"flex-end\">\n          <PageSizeSelector value={+params.pageSize} onChange={pageSize => handleChangePageSize( pageSize+'' )} />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\ninterface MenuRowProps {\n  menu: {\n    id: number;\n    name: string;\n    numItems: number;\n    updatedAt: string;\n  }\n}\n\nconst MenuRow = ( props: MenuRowProps ): ReactElement => {\n  const { id, name, numItems, updatedAt } = props.menu;\n  \n  const [ , month, dayOfMonth, year ] = new Date( updatedAt ).toDateString().split( ' ' );\n  const updatedAtStr = `${month} ${dayOfMonth}, ${year}`;\n\n  return (\n    <TableRow>\n      <TableCell><Link to={{ pathname: `/menus/${id}`, state: { previousTitle: document.title } }}>{name}</Link></TableCell>\n      <TableCell>{numItems}</TableCell>\n      <TableCell><Tooltip title={ new Date( updatedAt ).toLocaleString() }><span>{ updatedAtStr }</span></Tooltip></TableCell>\n      <TableCell><ForwardButton destination={ `/menus/${id}` } /></TableCell>\n    </TableRow>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/UnitsPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PrepPage.tsx",["955","956","957","958"],"import { Box, CircularProgress, IconButton, InputAdornment, Button as MuiButton, Paper, Slide, Snackbar, TextField, makeStyles, useMediaQuery, useTheme } from '@material-ui/core';\nimport { CheckCircleOutline, EditOutlined } from '@material-ui/icons';\nimport { Alert } from '@material-ui/lab';\nimport React, { ReactElement, useCallback, useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Prompt, useHistory, useParams } from 'react-router-dom';\n\nimport { AppContext } from '../../../App';\nimport { useNumberField } from '../../../hooks/useNumberField';\nimport { useTemporarilyTrueState } from '../../../hooks/useTemporarilyTrueState';\nimport { Conversion } from '../../../models/Conversion';\nimport { RecipeIngredient } from '../../../models/RecipeIngredient';\nimport { Unit } from '../../../models/Unit';\nimport request from '../../../util/request';\nimport { trackChanges } from '../../../util/trackChanges';\nimport RecipeTable from '../RecipeTable';\nimport { Button } from '../../UI/Button';\nimport { DeleteButton } from '../../UI/DeleteButton';\nimport { DeleteDialog } from '../../UI/DeleteDialog';\nimport { ScaleIcon } from '../../UI/Icons';\nimport { NameInput } from '../../UI/NameInput';\nimport { ParentBadge } from '../../UI/ParentBadge';\nimport { TextInput } from '../../UI/TextInput';\nimport { UnitInput } from '../../UI/UnitInput';\nimport { UsedInList } from '../../UI/UsedInList';\nimport { BackToLink } from '../BackToLink';\nimport ConversionsDialog from '../ConversionsDialog';\n\nconst useStyles = makeStyles( theme => ( {\n  editableName: {\n    paddingLeft: 16,\n    paddingRight: 16,\n    cursor: 'default',\n    '& br': {\n      display: 'none',\n    },\n  },\n  editButton: {\n    margin: '0 0 0 16px',\n    color: theme.palette.text.primary,\n    cursor: 'pointer',\n  },\n} ) );\n\nexport const PrepPage = ( ): ReactElement => {\n  const { id } = useParams<{ id: string }>();\n  const { t } = useTranslation();\n  const history = useHistory();\n  \n  const [ hasChanges, setHasChanges ] = useState( false );\n  const [ loading, setLoading ] = useTemporarilyTrueState( true );\n  const [ saving, setSaving ] = useTemporarilyTrueState( false );\n  const [ success, setSuccess ] = useState( '' );\n  const [ error, setError ] = useState( '' );\n  const [ showingAlert, setShowingAlert ] = useState( false );\n  const [ allUnits, setAllUnits ] = useState( [] as Unit[] );\n\n  const [ name, setName ] = trackChanges( useState( '' ), setHasChanges );\n  const [ batchAmount, setBatchAmount ] = useNumberField( setHasChanges );\n  const [ loadedBatchAmount, setLoadedBatchAmount ] = useState( 0 );\n  const [ loadedBatchUnit, setLoadedBatchUnit ] = useState( '' );\n  const [ batchUnit, setBatchUnit ] = trackChanges( useState<string>( ), setHasChanges );\n  const [ waste, setWaste ] = useNumberField( setHasChanges );\n  const [ shelfLife, setShelfLife ] = useNumberField( setHasChanges );\n  const [ conversions, setConversions ] = trackChanges( useState( [] as Conversion[] ), setHasChanges );\n  const [ parRange, setParRange ] = trackChanges( useState<[number, number]>( ), setHasChanges );\n  const [ ingredients, setIngredients ] = trackChanges( useState( [ { key: '' + Math.random() } ] as RecipeIngredient[] ), setHasChanges );\n  const [ instructions, setInstructions ] = trackChanges( useState( '' ), setHasChanges );\n  const [ usedIn, setUsedIn ] = useState<{id: number, type: string, name: string }[]>( [] );\n  \n  const [ showingDeleteDialog, setShowingDeleteDialog ] = useState( false );\n  const [ showingConversionsDialog, setShowingConversionsDialog ] = useState( false );\n\n  const [ editingName, setEditingName ] = useState( false );\n\n  const [ usage, setUsage ] = useState<any>( );\n\n  const theme = useTheme();\n  const classes = useStyles( theme );\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'md' ) );\n  const isExtraLargeScreen = useMediaQuery( theme.breakpoints.up( 'lg' ) );\n\n  const defaultErrorMessage = t( 'elements.prep.error-loading' );\n\n  const { handlePlanUpgradeRequired } = useContext( AppContext );\n\n  useEffect( () => {\n    if ( !( error || success ) )\n      return;\n    setShowingAlert( true );\n    const timer = setTimeout( () => {\n      setShowingAlert( false );\n    }, 4000 );\n    return () => clearTimeout( timer );\n  }, [ !!( error || success ) ] );\n\n  useEffect( () => {\n    ( async () => {\n      try {\n        const requests = [ request.get( '/units' ) ];\n\n        if ( id === 'new' ) {\n          setEditingName( true );\n          setName( '' );\n          handleClickEditName();\n          setLoading( false );\n          document.title = 'New Prep Ingredient';\n        } else {\n          requests.push( request.get( `/prep/${id}` ) );\n        }\n\n        const [ { body: { items: units } }, ingredient ] = await Promise.all( requests );\n        setAllUnits( units );\n\n        if ( ! ingredient )\n          return;\n\n        const {\n          name,\n          batchSize,\n          batchUnit,\n          waste,\n          shelfLife,\n          parRange,\n          conversions,\n          ingredients,\n          instructions,\n          usedIn,\n        } = ingredient.body;\n\n        setError( '' );\n        setName( name );\n        setBatchAmount( batchSize );\n        setLoadedBatchAmount( batchSize );\n        setLoadedBatchUnit( batchUnit );\n        setBatchUnit( batchUnit );\n        setParRange( parRange );\n        setWaste( waste );\n        setShelfLife( shelfLife );\n        setConversions( ( conversions || [] ).map( ( { amountA, unitA, amountB, unitB }: { amountA: number, unitA: string, amountB: number, unitB: string } ) => (\n          {\n            a: { amount: amountA, unit: units.find( ( unit: Unit ) => unit.symbol === unitA ) },\n            b: { amount: amountB, unit: units.find( ( unit: Unit ) => unit.symbol === unitB ) },\n          }\n        ) ) );\n        setIngredients( ingredients.map( ( ingredient: any ) => ( {\n          ingredient: {\n            id: ingredient.id,\n            name: ingredient.name,\n            type: ingredient.type,\n            deleted: ingredient.deleted,\n          },\n          amount: ingredient.amount,\n          unit: ingredient.unit,\n          waste: ingredient.waste,\n          cost: ingredient.cost,\n        } ) ).concat( [ {} ] ) );\n        setInstructions( instructions );\n        setUsedIn( usedIn );\n        setHasChanges( false );\n        document.title = name;\n      } catch ( err ) {\n        setError( err.message || defaultErrorMessage );\n      }\n      setLoading( false );\n    } )();\n    \n  }, [ id, defaultErrorMessage, loading ] );\n\n  const handleClickEditName = (): void => {\n    setEditingName( true );\n  };\n\n  const handleClickDelete = async (): Promise<void> => {\n    setUsage( null );\n    setShowingDeleteDialog( true );\n    const { body: usage } = await request.post( `/ingredients/${id}/getUsage` );\n    setUsage( usage );\n  };\n\n  const handleSave = async (): Promise<void> => {\n    setSaving( true );\n    \n    const formattedConversions = conversions.filter( ( { a, b } ) => {\n      return a.amount !== undefined && a.unit && b.amount !== undefined && b.unit;\n    } ).map( ( { a, b } ) => ( {\n      amountA: +( a.amount as string ),\n      unitA: a.unit?.symbol,\n      amountB: +( b.amount as string ),\n      unitB: b.unit?.symbol,\n    } ) );\n    \n    const formattedIngredients = ingredients.flatMap( recipeIngredient => {\n      const { ingredient, amount, unit, waste } = recipeIngredient;\n      if ( ! ingredient )\n        return [ ];\n      return [\n        {\n          id: ingredient.id,\n          amount: amount ? +amount : null,\n          unit,\n          waste: waste ? +waste: null,\n        },\n      ];\n    } );\n\n    const body = {\n      name,\n      batchSize: batchAmount,\n      batchUnit: batchUnit,\n      waste,\n      shelfLife,\n      conversions: formattedConversions,\n      ingredients: formattedIngredients,\n      instructions,\n    };\n    try {\n      if ( id === 'new' ) {\n        const { body: res } = await request.post( '/prep', { body } );\n        setSuccess( t( 'strings.successfully-created' ) );\n        setHasChanges( false );\n        history.replace( `/prep/${res.id}`, { previousTitle: document.title } );\n      } else {\n        await request.put( `/prep/${id}`, { body } );\n        setError( '' );\n        setSuccess( t( 'strings.successfully-saved-changes' ) );\n        setLoading( true );\n      }\n    } catch ( err ) {\n      if ( err.message === 'PLAN_UPGRADE_REQUIRED' )\n        handlePlanUpgradeRequired( err.plan );\n      else\n        setError( `Problem saving: ${err.message || defaultErrorMessage}` );\n      \n    }\n    setSaving( false );\n  };\n\n  const handleNameChange = ( newName: string ): void => {\n    setEditingName( false );\n    setName( newName );\n  };\n\n  const handleSelectUnit = ( unit: Unit ): void => {\n    setBatchUnit( unit.symbol );\n  };\n\n  const handleCreateNewUnit = ( symbol: Unit['symbol'], type: Unit['type'] ): void => {\n    setAllUnits( [ ...allUnits, { name: symbol, symbol, type, wellDefined: false } ] );\n  };\n\n  const handleConfirmDelete = async ( ): Promise<void> => {\n    await request.delete( `/prep/${id}` );\n    history.push( '/prep', { previousTitle: document.title } );\n  };\n\n  return (\n    <>\n      <Prompt message={t( 'strings.unsaved-changes-warning' )} when={hasChanges} />\n\n      { isLargeScreen && <BackToLink /> }\n\n      <Box pb={2} display=\"flex\" alignItems=\"center\">\n        { /* Enough height for loading spinner + vertical padding */ }\n        <Box minHeight={56} maxWidth=\"100%\" flex={1} px={2} pb={1} display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\n          <Box maxWidth={ isLargeScreen ? '80%' : '100%' } mr={4} display=\"flex\" alignItems=\"center\">\n            <NameInput value={name} editing={editingName} onChange={handleNameChange} />\n            <IconButton onClick={handleClickEditName} className={classes.editButton} aria-label=\"Edit Name\"><EditOutlined /></IconButton>\n          </Box>\n          { id !== 'new' && <DeleteButton onClick={handleClickDelete} /> }\n          { loading && ! saving && <CircularProgress /> }\n          <Button\n            tabIndex={1}\n            style={{ marginLeft: 'auto' }}\n            startIcon={saving ? <CircularProgress size=\"1em\" style={{ color: '#fff' }} /> : <CheckCircleOutline />}\n            text={ saving ? `${t( 'strings.saving' )} ...` : t( 'strings.save' ) }\n            onClick={handleSave}\n          />\n        </Box>\n      </Box>\n      <Box px={2} mb={2} display=\"flex\" justifyContent=\"flex-start\" flexWrap=\"wrap\">\n        <Box mx={1} flex={'2 0 80px'}>\n          <TextInput\n            disabled\n            label={ t( 'strings.par-level' )}\n            value={parRange ? ( loadedBatchAmount*( parRange[0] + 0.8*( parRange[1] - parRange[0] ) ) ).toFixed( 2 ).replace( /\\.0*$/, '' ) : '\\u00a0--\\u00a0' }\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\" style={{ pointerEvents: 'none' }}>{ loadedBatchUnit }</InputAdornment>\n              ),\n            }}\n          />\n        </Box>\n        <Box flex={'4 0 200px'} display=\"flex\">\n          <Box mx={1} flex={1}>\n            <TextInput label={ t( 'strings.batch-amount' ) } { ...batchAmount } />\n          </Box>\n          <Box mx={1} flex={1}>\n            <UnitInput units={allUnits} value={batchUnit} onSelect={handleSelectUnit} onCreateNewUnit={handleCreateNewUnit} />\n          </Box>\n        </Box>\n        <Box mx={1} flex={`${isLargeScreen ? 6 : 1} 0 120px`} display=\"flex\">\n          <Paper style={{ margin: '8px 0', flex: 1, display: 'flex', alignItems: 'center', position: 'relative' }}>\n            <ParentBadge\n              badgeContent={ conversions.filter( ( { a, b } ) => Object.keys( a ).length > 0 && Object.keys( b ).length > 0 ).length }\n              onClick={() => setShowingConversionsDialog( true )}>\n            </ParentBadge>\n            <MuiButton onClick={() => setShowingConversionsDialog( true )} style={{ position: 'absolute', top: 0, bottom: 0, textTransform: 'none', color: theme.palette.primaryGray.main }} fullWidth><ScaleIcon />{ isLargeScreen && t( 'strings.set-uom-conversions' ) }</MuiButton>\n          </Paper>\n        </Box>\n        <Box mx={1} flex={'1 0 80px'}>\n          <TextInput\n            label={t( 'strings.waste' )}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\" style={{ pointerEvents: 'none' }}>%</InputAdornment>\n              ),\n              inputProps: {\n                style: { textAlign: 'right' },\n              },\n            }}\n            { ...waste }\n          />\n        </Box>\n        <Box mx={1} flex={'1 0 80px'}>\n          <TextInput\n            label={t( 'strings.shelf-life' )}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment position=\"end\" style={{ pointerEvents: 'none' }}>{ t( 'strings.day_plural' ) }</InputAdornment>\n              ),\n              inputProps: {\n                style: { textAlign: 'right' },\n              },\n            }}\n            { ...shelfLife }\n          />\n        </Box>\n      </Box>\n      <Box { ... isExtraLargeScreen ? { mx: 2.5 } : {} }>\n        <RecipeTable units={allUnits} rows={ingredients} onChange={ useCallback( ( rows: RecipeIngredient[] ) => setIngredients( rows ), [] ) } />\n      </Box>\n      <Box display=\"flex\" pt={2} px={2}>\n        <TextField style={{ flex: 1 }} InputProps={{ style: { margin: 0, background: '#fff', padding: 16 } }} variant=\"outlined\" placeholder={t( 'strings.instructions' )} multiline value={instructions} onChange={ ( e: any ) => setInstructions( e.target.value ) } />\n      </Box>\n      <Box pt={4} px={2}>\n        { loading || <UsedInList usedIn={usedIn} /> }\n      </Box>\n      <DeleteDialog itemName={t( 'strings.prep-ingredient' )} showing={showingDeleteDialog} usage={usage} onClose={() => setShowingDeleteDialog( false )} onConfirm={ handleConfirmDelete } />\n      <ConversionsDialog\n        showing={showingConversionsDialog}\n        conversions={conversions}\n        onClose={() => setShowingConversionsDialog( false )}\n        onConfirm={conversions => {\n          setConversions( conversions ); setShowingConversionsDialog( false );\n        }}\n        onCreateNewUnit={handleCreateNewUnit}\n        units={allUnits}\n      />\n      <Snackbar\n        open={ showingAlert }\n        onExited={ () => {\n          setError( '' ); setSuccess( '' );\n        } }\n        TransitionComponent={useCallback( props => <Slide direction=\"down\" {...props} />, [] )}\n      >\n        <Alert variant=\"filled\" severity={ error ? 'error' : 'success' }>{ error || success }</Alert>\n      </Snackbar>\n    </>\n  );\n};\n\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SignUpPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PrivacyPolicyPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/TermsOfServicePage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SettingsPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PrepListPage.tsx",["959"],"import { Box, CircularProgress, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, useMediaQuery, useTheme } from '@material-ui/core';\nimport { Add, Sync } from '@material-ui/icons';\nimport { Alert, Skeleton } from '@material-ui/lab';\nimport React, { ReactElement, useContext, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { AppContext } from '../../../App';\nimport { useQueryState } from '../../../hooks/useQueryState';\nimport request from '../../../util/request';\nimport { Button } from '../../UI/Button';\nimport { PageSizeSelector } from '../../UI/PageSizeSelector';\nimport { Paginator } from '../../UI/Paginator';\nimport { SearchInput } from '../../UI/SearchInput';\nimport { UploadButton } from '../../UI/UploadButton';\nimport { ForwardButton } from '../ForwardButton';\n\nconst defaultParams = {\n  page: '1',\n  pageSize: '10',\n  search: '',\n};\n\nexport const PrepListPage = ( ): ReactElement|null => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  \n  const [ ingredients, setIngredients ] = useState( [] as any[] );\n  const [ numPages, setNumPages ] = useState( 0 );\n  const [ initialLoadInProgress, setInitialLoadInProgress ] = useState( true );\n  const [ loading, setLoading ] = useState( false );\n  const [ error, setError ] = useState( '' );\n  const [ { queryString, params }, setQueryState ] = useQueryState( defaultParams );\n\n  const { handlePlanUpgradeRequired } = useContext( AppContext );\n\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'md' ) );\n\n\n  useEffect( () => {\n    if ( ! loading )\n      return;\n    setLoading( false );\n      \n    const defaultErrorMessage = t( 'elements.prep.error-loading' );\n\n    ( async () => {\n      try {\n        const { body: res } = await request.get( `/prep${queryString}` );\n\n        setError( '' );\n        setLoading( false );\n        setNumPages( res.numPages || 0 );\n        setIngredients( res.prepIngredients || [] );\n      } catch ( err ) {\n        if ( err.message === 'PLAN_UPGRADE_REQUIRED' )\n          handlePlanUpgradeRequired( err.plan );\n        else\n          setError( err.message || defaultErrorMessage );\n        \n        setLoading( false );\n        setIngredients( [] );\n        setNumPages( 0 );\n      }\n      setInitialLoadInProgress( false );\n    } )();\n\n    document.title = 'Prep Ingredients';\n  }, [ loading, queryString, params.search, t ] );\n\n  useEffect( () => {\n    if ( ! params.search )\n      return setLoading( true );\n    const timer = setTimeout( () => setLoading( true ), 600 );\n    return () => clearTimeout( timer );\n  }, [ params.search ] );\n\n  const handleQueryChange = ( query: string ): void => {\n    setQueryState( {\n      page: undefined,\n      search: query,\n    } );\n  };\n\n\n  const handleChangePage = ( page: string ): void => {\n    setQueryState( { page } );\n    setLoading( true );\n  };\n\n  const handleChangePageSize = ( newPageSize: string ): void => {\n    const currentPage = +( params.page || defaultParams.page );\n    const pageSize = +( params.pageSize || defaultParams.pageSize );\n\n    // Adjust currentPage so that the first item showing is still visible\n    const newPage = '' + ( Math.floor( ( currentPage - 1 )*pageSize/+newPageSize ) + 1 );\n    \n    setQueryState( {\n      page: newPage,\n      pageSize: newPageSize,\n    } );\n    setLoading( true );\n  };\n\n  if ( initialLoadInProgress )\n    return null;\n\n  return (\n    <>\n      <Box py=\"1.25rem\" display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\">\n        { /* Enough height for loading spinner + vertical padding */ }\n        <Box minHeight={56} flex={'1 10'} p={1} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Typography variant=\"h3\" noWrap>{ t( 'strings.prep-ingredient_plural' ) }</Typography>\n          { loading && <CircularProgress /> }\n        </Box>\n        <Box flex={1} display=\"flex\" p={1} alignItems=\"center\">\n          <Box flex={2} minWidth={180} mx={1} display=\"flex\" alignItems=\"stretch\">\n            <SearchInput onSubmit={ () => setLoading( true ) } value={ params.search } onChange={handleQueryChange} />\n          </Box>\n          <Box flex={1} mx={1} display=\"flex\">\n            <Button\n              startIcon={<Add />}\n              text={t( 'strings.create' )}\n              style={{ flex: 1 }}\n              onClick={() => history.push( '/prep/new', { previousTitle: document.title } )}\n            />\n          </Box>\n          <Box flex={1} mx={1} display=\"flex\">\n            <UploadButton />\n          </Box>\n        </Box>\n      </Box>\n      <Paper elevation={0}>\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.name' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.batch-cost' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.batch-amount' ) }</Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">{ t( 'strings.par-level' ) }</Typography>\n                </TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {\n                ingredients.length\n                  ? ingredients.map( ingredient => <PrepIngredientRow key={ingredient.id} ingredient={ingredient} /> )\n                  :\n                  <TableRow>\n                    <TableCell colSpan={7}>\n                      {\n                        loading\n                          ? <Skeleton variant=\"rect\" />\n                          :\n                          <Box py={6} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                            {\n                              error\n                                ? <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                                  <Alert severity=\"error\" style={{ paddingTop: 4, paddingBottom: 4 }}>\n                                    {error}\n                                  </Alert>\n                                  <Box p={4}>\n                                    <Button\n                                      startIcon={<Sync />}\n                                      onClick={() => setLoading( true )}\n                                      text={t( 'strings.retry' )}\n                                      style={{ paddingLeft: 16, paddingRight: 16 }}\n                                    />\n                                  </Box>\n                                </Box>\n                                :\n                                <>\n                                  <Button\n                                    startIcon={<Add />}\n                                    text={t( 'strings.create' ) + ' your first ' + t( 'strings.prep-ingredient' )}\n                                    style={{ flex: 1 }}\n                                    onClick={() => history.push( '/prep/new', { previousTitle: document.title } )}\n                                  />\n                                </>\n                            }\n                          </Box>\n                      }\n                    </TableCell>\n                  </TableRow>\n              }\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n      \n      <Box pt={3} display=\"flex\" alignItems=\"flex-end\">\n        <Box flex={1}></Box>\n        <Box flex={1} justifyContent=\"center\">\n          <Paginator\n            numPages={numPages}\n            currentPage={+params.page}\n            siblingCount={isLargeScreen ? 2 : 1}\n            boundaryCount={isLargeScreen ? 3 : 1}\n            onNavigate={page => handleChangePage( page+'' )}\n          />\n        </Box>\n        <Box flex={1} display=\"flex\" justifyContent=\"flex-end\">\n          <PageSizeSelector value={+params.pageSize} onChange={pageSize => handleChangePageSize( pageSize+'' )} />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\n\ninterface PrepIngredientRowProps {\n  ingredient: {\n    id: number;\n    name: string;\n    cost: number;\n    batchSize: number;\n    batchUnit: string;\n    parLevel: number;\n  }\n}\n\nconst PrepIngredientRow = ( props: PrepIngredientRowProps ): ReactElement => {\n  const { id, name, cost, batchSize, batchUnit, parLevel } = props.ingredient;\n\n  return (\n    <TableRow>\n      <TableCell><Link to={{ pathname: `/prep/${id}`, state: { previousTitle: document.title } }}>{name}</Link></TableCell>\n      <TableCell>{cost > 0 || cost === 0 ? `$${cost.toFixed( 2 ).replace( /\\.0*$/, '' )}` : '\\u00a0--\\u00a0' }</TableCell>\n      <TableCell>{batchSize != null && batchUnit != null ? `${batchSize} ${batchUnit}` : '\\u00a0--\\u00a0' }</TableCell>\n      <TableCell>{parLevel != null ? `${( parLevel*batchSize ).toFixed( 2 ).replace( /\\.0*$/, '' )} ${batchUnit}` : '\\u00a0--\\u00a0' }</TableCell>\n      <TableCell>\n        <ForwardButton destination={`/prep/${id}`} />\n      </TableCell>\n    </TableRow>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/enum/plans.enum.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SetupRestaurantDetailsPage/styles.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/NavBar.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Title.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/ForwardButton.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useLocationsApi.api.hook.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/ConversionsDialog.tsx",["960"],"import React, { ReactElement } from 'react';\nimport useSWR from 'swr';\nimport { Optional } from 'utility-types';\n\nimport { ConversionsDialog, ConversionsDialogProps } from '../UI/ConversionsDialog';\n\nexport default ( props: Optional< Omit< ConversionsDialogProps, 'loading' >, 'units' > ): ReactElement => {\n  const { data, isValidating } = useSWR( '/units' );\n  const units = data?.items;\n\n  return <ConversionsDialog loading={ ! units && isValidating } units={units} {...props} />;\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/BackToLink.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/RecipeTable.tsx",["961"],"import React, { ReactElement } from 'react';\nimport { RecipeTable, RecipeTableProps } from '../UI/RecipeTable';\n\nimport { Ingredient } from '../../models/Ingredient';\nimport IngredientSelector from './IngredientSelector';\nimport request from '../../util/request';\n\nexport default ( props: RecipeTableProps ): ReactElement => {\n  const getCost = async ( id: Ingredient['id'], amount: number, unit: string, waste?: number ) : Promise<number> => {\n    const { body: cost } = await request.post( `/ingredients/${id}/cost`, {\n      body: {\n        amount,\n        unit,\n        waste,\n      },\n    } );\n    return cost;\n  };\n\n  return (\n    <RecipeTable\n      getCost={ getCost }\n      IngredientSelectorComponent={ IngredientSelector }\n      { ...props}\n    />\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/UomSettings/UnitRow.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/Selector.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SquareButton/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/locations/locations.api.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/UnitSelector.tsx",["962"],"import React, { ReactElement } from 'react';\nimport useSWR from 'swr';\nimport { Optional } from 'utility-types';\n\nimport { UnitSelector, UnitSelectorProps } from '../UI/UnitSelector';\n\nexport default ( props: Optional< Omit< UnitSelectorProps, 'loading' >, 'units' | 'onCreateNewUnit' > ): ReactElement => {\n  const { data, mutate } = useSWR( props.units ? null : '/units' );\n\n  const units = props.units ?? data?.items ?? [];\n\n  const handleCreateNewUnit = (): void => {\n    mutate();\n  };\n\n  return (\n    <UnitSelector {...props} units={units} onCreateNewUnit={handleCreateNewUnit} />\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/IngredientSelector.tsx",["963","964","965"],"import { IngredientSelector, IngredientSelectorProps } from '../UI/IngredientSelector';\nimport React, { ReactElement, useEffect, useState } from 'react';\n\nimport { Ingredient } from '../../models/Ingredient';\nimport request from '../../util/request';\n\nexport default (\n  props: Omit< IngredientSelectorProps, 'loading'|'onQueryChange'|'query'|'ingredients' >\n): ReactElement => {\n  const [ loading, setLoading ] = useState( true );\n  const [ query, setQuery ] = useState( '' );\n  const [ ingredients, setIngredients ] = useState<Ingredient[]>( [ ] );\n\n  useEffect( () => {\n    if ( props.showing && query === '' )\n      setQuery( props.initialQuery );\n  }, [ props.initialQuery, props.showing ] );\n\n  useEffect( () => {\n    ( async () => {\n      const { body: res } = await request.get( `/ingredients/search?query=${query}` );\n      setLoading( false );\n\n      if ( ! props.type ) {\n        setIngredients( res );\n      } else {\n        setIngredients( res.filter( (ingredient: Ingredient) => ingredient.type === props.type ) );\n      }\n    } )();\n  }, [ query ] );\n\n  return <IngredientSelector\n    {...props}\n    loading={loading}\n    query={ query }\n    onQueryChange={ ( query: string ) => setQuery( query ) }\n    onClose={ () => {\n      setQuery( '' ); props.onClose();\n    } }\n    ingredients={ingredients}\n  />;\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SetupRestaurantDetailsPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PaginationSection/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PageHeader/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/ViewOrderPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorCatalogPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorsPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SandboxLandingPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryStockPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryLogPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/OrderPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/OrdersPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicePage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicesPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingLogPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingListPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/DailyPrepPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingListsPage/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SquareButton/ConnectSquareButton.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SquareButton/SquareConnectionButton.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/SquareButton/DisconnectSquareButton.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SetupRestaurantDetailsPage/SetupRestaurantDetailsPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PageHeader/PageHeader.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/UI/PaginationSection/PaginationSection.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorPage/VendorPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/SandboxLandingPage/SandboxLandingPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorsPage/VendorsPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/ViewOrderPage/ViewOrderPage.tsx",["966"],"import { Box, Typography } from '@material-ui/core';\nimport React, { ReactElement, useContext, useMemo } from 'react';\nimport { useLocation, useParams } from 'react-router';\nimport useSWR from 'swr';\nimport { AppContext } from '../../../../App';\nimport { Button } from '../../../UI';\nimport { Logo } from '../../../UI/Logo';\nimport { useViewOrderPageStyles } from './styles';\n\ninterface PurchaseOrder {\n  number: string;\n  contact: string;\n  includePrices: boolean;\n  location: {\n    name: string;\n    address: string;\n    phoneNumber: string;\n  };\n  items: {\n    catalogNumber: string;\n    name: string;\n    quantity: number;\n    pricePer: number;\n  }[];\n}\n\nexport const ViewOrderPage = (): ReactElement => {\n  const { id } = useParams<{ id: string }>();\n  const location = useLocation();\n  const key = useMemo( () => new URLSearchParams( location.search ).get( 'key' ), [ location.search ] );\n\n  const rOrder = useSWR<PurchaseOrder>( `/po/${id}?key=${key}` );\n  const classes = useViewOrderPageStyles();\n\n  const { handlePlanUpgradeRequired } = useContext( AppContext );\n\n  return (\n    <Box overflow=\"hidden\" width=\"100vw\" height=\"100vh\" className={classes.background}>\n      <Box\n        width={670}\n        mx=\"auto\"\n        mt={5}\n        style={{\n          background: '#fff',\n        }}\n      >\n\t<Box p={3}>\n          <Box\n\t    display=\"flex\"\n\t    justifyContent=\"space-between\"\n\t    alignItems=\"flex-start\"\n\t  >\n            <Box>\n              <Typography variant=\"h6\">{ rOrder.data?.location.name } ({ rOrder.data?.contact })</Typography>\n              <Typography variant=\"h6\">{ rOrder.data?.location.address }</Typography>\n              <Typography variant=\"h6\">{ rOrder.data?.location.phoneNumber }</Typography>\n            </Box>\n\t    <Typography variant=\"h6\">Order # { rOrder.data?.number }</Typography>\n\t    <Box displayPrint=\"none\" display>\n              <Button onClick={() => window.print()}>Print</Button>\n            </Box>\n          </Box>\n          <Box>\n            <Box\n              mt=\"20px\"\n              pb=\"40px\"\n              display=\"grid\"\n              gridTemplateColumns={\n\t\trOrder.data?.includePrices\n\t\t  ? 'auto 1fr auto auto'\n\t\t  : 'auto 1fr auto'\n\t      }\n              style={{\n                columnGap: 40,\n                rowGap: 20,\n              }}\n            >\n              <Typography variant=\"h6\" style={{ fontSize: '1em' }}>Catalog #</Typography>\n              <Typography></Typography>\n              <Typography variant=\"h6\" style={{ fontSize: '1em' }}>Quantity</Typography>\n\t      { rOrder.data?.includePrices &&\n\t        <Typography variant=\"h6\" style={{ fontSize: '1em', textAlign: 'right' }}>Total</Typography>\n              }\n              {\n                rOrder.data?.items.map( item => {\n                  return (\n                    <>\n                      <Typography style={{ fontWeight: 500 }}>{ item.catalogNumber }</Typography>\n                      <Typography>{ item.name }</Typography>\n                      <Typography align=\"right\">{ item.quantity }</Typography>\n\t\t      { rOrder.data?.includePrices &&\n\t\t        <Typography>${ (item.pricePer*item.quantity).toFixed(2) }</Typography>\n\t\t      }\n                    </>\n                  );\n                })\n              }\n\t      {\n\t\trOrder.data?.includePrices &&\n\t\t  <Box mt={2} gridColumn=\"1/5\" display=\"flex\" justifyContent=\"flex-end\">\n\t            <Typography color=\"textPrimary\" style={{ fontWeight: 500 }}>Total: ${\n\t\t      rOrder.data?.items.reduce( (sum, item) => \n\t\t        sum + item.pricePer*item.quantity, 0\n\t              ).toFixed(2)}\n\t\t    </Typography>\n\t\t  </Box>\n\t      }\n            </Box>\n          </Box>\n        </Box>\n        <Box\n\t  display=\"flex\"\n\t  justifyContent=\"center\"\n\t  lineHeight={0}\n\t  p={2}\n\t>\n\t  <Logo style={{ height: 38 }} />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryStockPage/PantryStockPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/VendorCatalogPage/VendorCatalogPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicePage/InvoicePage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/OrdersPage/OrdersPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/OrderPage/OrderPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/DailyPrepPage/DailyPrepPage.tsx",["967"],"import { Box, CircularProgress, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, useMediaQuery, useTheme } from '@material-ui/core';\nimport { CheckCircleOutline } from '@material-ui/icons';\nimport { produce } from 'immer';\nimport { useSnackbar } from 'notistack';\nimport React, { useContext, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useParams } from 'react-router-dom';\nimport { useRecoilCallback, useRecoilState } from 'recoil';\nimport useSWR from 'swr';\n\nimport { AppContext } from '../../../../App';\nimport formatDate from '../../../../util/formatDate';\nimport formatNumber from '../../../../util/formatNumber';\nimport request from '../../../../util/request';\nimport { Button } from '../../../UI/Button';\nimport { TextInput } from '../../../UI/TextInput';\nimport { BackToLink } from '../../BackToLink';\nimport { PrintRecipesDialog } from './PrintRecipesDialog';\nimport { prepList, prepOverride } from './state';\n\ninterface DailyPrepPageProps {\n\n}\n\nexport const DailyPrepPage: React.FC<DailyPrepPageProps> = ( ) => {\n  const { date } = useParams<{ date: string }>( );\n  const { data, error: loadingError, isValidating, mutate } = useSWR( `/prep-log/${date}`, { revalidateOnFocus: false, revalidateOnReconnect: false } );\n  const [ isSaving, setSaving ] = useState( false );\n  const [ isPrintRecipesDialogOpen, setPrintRecipesDialogOpen ] = useState( false );\n\n  const theme = useTheme();\n  const isLargeScreen = useMediaQuery( theme.breakpoints.up( 'md' ) );\n\n  useEffect( () => {\n    document.title = `Daily Prep (${date})`;\n  }, [ ] );\n\n  const { handlePlanUpgradeRequired } = useContext( AppContext );\n\n  const { t } = useTranslation();\n  const { enqueueSnackbar } = useSnackbar();\n\n  const res = [];\n\n  const handleSave = useRecoilCallback( ( { snapshot } ) => async ( ) => {\n    setSaving( true );\n\n    const ids = await snapshot.getPromise( prepList );\n\n    try {\n      const body =\n        ( await Promise.all( ids.map( async id => ( { id, ...await snapshot.getPromise( prepOverride( id ) ) } ) ) ) )\n          .filter( ( { inventory, prep } ) => inventory != null || prep != null )\n      ;\n      await request.post( `/prep-log/${date}`, { body } );\n    } catch ( err ) {\n      if ( err.message === 'PLAN_UPGRADE_REQUIRED' )\n        handlePlanUpgradeRequired( err.plan );\n      else\n        enqueueSnackbar( `Problem saving: ${err.message ?? ''}`, { variant: 'error' } );\n      \n    }\n    await mutate();\n    setSaving( false );\n    enqueueSnackbar( 'Successfully Saved', { variant: 'success' } );\n  } );\n\n  const handlePrintRecipes = async ( recipes: { recipeId: string, batches: number }[] ): Promise<void> => {\n    const { res } = await request.post( '/recipes', {\n      body: {\n        date, recipes,\n      },\n      parseBody: false,\n    } );\n\n    const blob = await res.blob();\n    const url = URL.createObjectURL( blob );\n    window.open( url );\n    /* const anchor = document.createElement( 'a' );\n    anchor.style.display = 'none';\n    anchor.href = url;\n    anchor.target = '_blank';\n    anchor.download = `ReadyPrep Recipes - ${date}.pdf`;\n    document.body.appendChild( anchor );\n    anchor.click();\n    anchor.remove();*/\n  };\n\n  res.push(\n    <>\n      { isLargeScreen && <BackToLink /> }\n      <Box display=\"flex\" flexWrap=\"wrap\" alignItems=\"flex-end\">\n        <Box flex={1} display=\"flex\" alignItems=\"center\">\n          <Box minHeight={56} flex={'1 10'} p={1} display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-end\" alignItems=\"flex-start\">\n            <Typography variant=\"h3\">{ 'Daily Prep Requirements' }</Typography>\n            <Typography variant=\"h4\">{ `Date: ${formatDate( date )}` }</Typography>\n          </Box>\n          <Box flex={1}>\n            { isValidating && <CircularProgress /> }\n          </Box>\n        </Box>\n        <Box mb={4} px={2} flex=\"shrink\" display=\"flex\" alignItems=\"center\">\n          <Box flex={1} px={2}>\n            <Button onClick={() => setPrintRecipesDialogOpen( true )} text={'Print\\u00a0Recipes'} />\n          </Box>\n          <Box flex={1}>\n            <Button\n              tabIndex={1}\n              style={{ marginLeft: 'auto' }}\n              startIcon={ isSaving ? <CircularProgress size=\"1em\" style={{ color: '#fff' }} /> : <CheckCircleOutline /> }\n              text={ isSaving ? `${t( 'strings.saving' )} ...` : t( 'strings.save' ) }\n              onClick={ handleSave }\n            />\n          </Box>\n        </Box>\n      </Box>\n    </>\n  );\n\n  const items: ProductionItem[] = useMemo( () => {\n    if ( ! data )\n      return [];\n\n    return data.sort( ( a: any, b: any ) => {\n      if ( a.suggested > 0 && b.suggested === 0 )\n        return -1;\n      if ( b.suggested > 0 && a.suggested === 0 )\n        return 1;\n      return a.name.localeCompare( b.name );\n    } );\n  }, [ data ] );\n\n  const recipes = useMemo( () => items.map( item => ( {\n    id: item.recipeId,\n    name: item.name,\n    ingredientId: item.ingredientId,\n    batchSize: item.batchSize,\n    batchUnit: item.unit,\n    batches: Math.round( item.actualPrep/item.batchSize*2 )/2,\n  } ) ), [ items ] );\n\n  const initState = useRecoilCallback( ( { set } ) => () => {\n    set( prepList, items.map( ( { id } ) => id ) );\n  }, [ items ] );\n\n  useEffect( initState, [ initState ] );\n\n  if ( ! data || loadingError )\n    return <>{ res }</>;\n\n  res.push(\n    <>\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell style={{ width: '30%' }}>\n                <Typography variant=\"subtitle1\">Ingredient</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"subtitle1\">Theoretical / Actual Inventory</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"subtitle1\">Suggested Prep</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant=\"subtitle1\">Actual Prep</Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            { items.map( item => (\n              <TableRow>\n                <DailyPrepEntryRow\n                  { ...item }\n                  actuals={{\n                    inventory: item.actualInventory ? +( +item.actualInventory ).toFixed( 2 ) : null,\n                    prep: item.actualPrep ? +( +item.actualPrep ).toFixed( 2 ) : null,\n                  }}\n                />\n              </TableRow>\n            ) ) }\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n\n  res.push( <PrintRecipesDialog recipes={recipes} onConfirm={handlePrintRecipes} open={isPrintRecipesDialogOpen} onClose={() => setPrintRecipesDialogOpen( false )} /> );\n\n  return <>{ res }</>;\n};\n\nexport default DailyPrepPage;\n\ninterface DailyPrepEntry {\n  id: string;\n  actuals: {\n    inventory: number | null;\n    prep: number | null;\n  },\n  batchSize: number;\n  inventory: number;\n  name: string;\n  ingredientId: string;\n  suggested: number;\n  unit: string;\n}\n\nconst DailyPrepEntryRow: React.FC<DailyPrepEntry> = props => {\n  const { actuals, batchSize, id, name, ingredientId, inventory, suggested, unit } = props;\n\n  const suggestedInUOM = formatNumber( suggested*batchSize );\n\n  const [ overrides, setOverrides ] = useRecoilState( prepOverride( id ) );\n\n  const handleChangeInventory = ( e: React.ChangeEvent<HTMLInputElement> ): void => {\n    setOverrides( produce( overrides => {\n      overrides.inventory = e.currentTarget.value;\n    } ) );\n  };\n\n  const handleChangePrep = ( e: React.ChangeEvent<HTMLInputElement> ): void => {\n    setOverrides( produce( overrides => {\n      overrides.prep = e.currentTarget.value;\n    } ) );\n  };\n\n  return ( <>\n    <TableCell>\n      <Link to={{ pathname: `/prep/${ingredientId}`, state: { previousTitle: document.title } }}>{ name }</Link>\n    </TableCell>\n    <TableCell>\n      <Box display=\"flex\" alignItems=\"center\">\n        <Box>{ formatNumber( inventory ) } /</Box>\n        <Box px={1} maxWidth={80}><TextInput size=\"small\" value={ overrides?.inventory ?? actuals?.inventory ?? '' } onChange={ handleChangeInventory } /></Box>\n        <Box>{ unit }</Box>\n      </Box>\n    </TableCell>\n    <TableCell>\n      { formatNumber( suggested ) } batches ({ suggestedInUOM } { unit })\n    </TableCell>\n    <TableCell>\n      <Box display=\"flex\" alignItems=\"center\">\n        <Box px={1} maxWidth={80}><TextInput size=\"small\" value={ ( overrides?.prep ?? actuals?.prep ?? suggestedInUOM ?? '' ) } onChange={ handleChangePrep } /></Box>\n        <Box>{ unit }</Box>\n      </Box>\n    </TableCell>\n  </> );\n};\n\ninterface ProductionItem {\n  recipeId: any;\n  id: string;\n  name: string;\n  ingredientId: string;\n  inventory: number;\n  actualInventory: number;\n  suggested: number;\n  actualPrep: number;\n  batchSize: number;\n  unit: string;\n}\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingLogPage/CountingLogPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingListPage/CountingListPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingListsPage/CountingListsPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicesPage/InvoicesPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/CountingPage/CountingPage.tsx",["968"],"import React, { ReactElement, useEffect, useMemo, useState } from \"react\";\nimport useSWR from \"swr\";\n\nimport { GetInventoryResponse } from \"../../../../services/api/pantry/interface/get-inventory.api.interface\";\nimport formatDate from \"../../../../util/formatDate\";\nimport { Button, PageHeader, TextInput } from \"../../../UI\";\nimport { BackToLink } from \"../../BackToLink\";\nimport { \n  Box,\n  MenuItem,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography\n} from \"@material-ui/core\";\nimport { useParams } from \"react-router\";\nimport { GetCountResponse } from \"../../../../services/api/counting/interface/get-count.api.interface\";\nimport { Optional } from \"utility-types\";\nimport formatNumber from \"../../../../util/formatNumber\";\nimport { useDebouncedCallback } from \"use-debounce\";\nimport { useSnackbar } from \"notistack\";\nimport { useCountingApi } from \"../../../../services/api/hooks/useCountingApi.api.hook\";\nimport { DateInput } from \"../../..\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport request from \"../../../../util/request\";\nimport { CountingListSummary } from \"../../../../services/api/models/counting-list-summary.interface\";\nimport { GetCountingListResponse } from \"../../../../services/api/counting-lists/interface/get-counting-list.api.interface\";\n\nexport interface CountingPageProps {\n\n};\n\nexport const CountingPage = ( _props: CountingPageProps ): ReactElement => {\n  const { id } = useParams<{ id: string }>();\n  const isNew = id === 'new';\n\n  const [ countingListId, setCountingListId ] = useState<string|null>( null );\n  const { control, getValues } = useForm<{ date: string }>();\n\n  const rCount = useSWR<GetCountResponse>( isNew ? null : `/counts/${id}` );\n  const rCountingLists = useSWR<CountingListSummary[]>( '/counting-lists' );\n  const rInventory = useSWR<GetInventoryResponse>( `/pantry/inventory`, { refreshInterval: 0, revalidateOnFocus: false } );\n  const rSelectedList = useSWR<GetCountingListResponse>(\n    ! countingListId ? null : `/counting-lists/${countingListId}`,\n    {\n      refreshInterval: 0,\n      revalidateOnFocus: false,\n    }\n  )\n\n  const history = useHistory();\n  const historyState = history.location.state as { listId?: string }|null;\n\n  useEffect( () => {\n    if ( historyState?.listId )\n      setCountingListId(historyState?.listId);\n  }, [historyState?.listId])\n\n  const countingApi = useCountingApi();\n\n  const handleNewCount = async () => {\n    if ( ! isNew || ! countingListId )\n      throw Error('Not a new count');\n\n    const { date } = getValues();\n    const { id } = await countingApi.createCount( { \n      countingListId: countingListId,\n      date: new Date( date ).toISOString().slice(0,10),\n    } );\n    return id;\n  };\n\n  const handleClickPrintSheets = async () => {\n    const { res } = await request.post( '/counting-sheets/pantry', {\n      parseBody: false,\n    } );\n\n    const blob = await res.blob();\n    const url = URL.createObjectURL( blob );\n    window.open( url );\n  }\n\n  useEffect( () => {\n    if ( rCount.data?.countingListId )\n      setCountingListId( rCount.data?.countingListId );\n  }, [rCount.data]);\n\n  const rows = useMemo( () => {\n    const rows: Optional<GetCountResponse['items'][number],'actualQuantity'>[] = rCount.data?.items ?? [];\n\n    rows.push(\n      ...(\n        rSelectedList.data?.items?.filter( \n          row => rows.every( ({ ingredient }) => ingredient.id !== row.ingredient.id )\n        ).map( row => ({\n          ingredient: row.ingredient,\n          theoreticalQuantity: 0,//row.quantity,\n          unit: row.unit,\n        })) ?? []\n      ),\n    );\n\n    return rows;\n  }, [rCount.data, rSelectedList.data, rInventory.data]);\n\n  const date = rCount.data?.date;\n\n  const isLoading = (! rCount.data && rCount.isValidating) || \n    (! rSelectedList.data && rSelectedList.isValidating);\n\n  return (\n    <>\n      <BackToLink />\n      <PageHeader\n        title=\"Daily Pantry Stock\"\n        subtitle={date ? `Date: ${formatDate(date)}` : undefined}\n      >\n        <Box ml=\"auto\">\n          <Button onClick={handleClickPrintSheets}>Print Sheets</Button>\n        </Box>\n      </PageHeader>\n      <Box display=\"flex\">\n        <Box flex={1} maxWidth={290} mr={2}>\n          <TextInput \n            label=\"CountingList\"\n            select={!countingListId}\n            disabled={!!countingListId}\n            onChange={e => { setCountingListId(e.target.value) }}\n            value={rCountingLists.data?.find( list => list.id === countingListId )?.name}\n          >\n            { rCountingLists.data?.map( list => \n              <MenuItem key={list.id} value={list.id}>{list.name}</MenuItem>\n            ) }\n          </TextInput>\n        </Box>\n        <Box flex={1} maxWidth={290}>\n          <DateInput\n            name=\"date\"\n            control={control}\n            defaultValue={new Date()}\n            disabled={!isNew}\n          />\n        </Box>\n      </Box>\n      { ! isLoading &&\n        <TableContainer>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">\n                    Pantry item\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">\n                    Theoretical Inventory\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">\n                    Actual Inventory\n                  </Typography>\n                </TableCell>\n                <TableCell>\n                  <Typography variant=\"subtitle1\">\n                    Variance\n                  </Typography>\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {\n                rows.map( data =>\n                  <Row\n                    key={data.ingredient.id}\n                    id={id}\n                    onNewCount={handleNewCount}\n                    data={data}\n                  />\n                )\n              }\n            </TableBody>\n          </Table>\n        </TableContainer>\n      }\n    </>\n  );\n  \n}\n\ninterface RowProps {\n  id: string;\n  data: Optional<GetCountResponse['items'][number],'actualQuantity'>;\n  onNewCount: () => Promise<string>;\n}\n\nconst Row = ({ id, data, onNewCount }: RowProps): ReactElement => {\n  const isNew = id === 'new';\n\n  const { enqueueSnackbar } = useSnackbar();\n  const countingApi = useCountingApi();\n  const history = useHistory();\n\n  const updateRemote = useDebouncedCallback(\n    async (ingredientId: number, newQuantity: number) => {\n      const countId = isNew ? await onNewCount() : id;\n\n      await countingApi.updateCount(\n        countId,\n        {\n          ingredientId,\n          actualQuantity: newQuantity,\n        },\n      );\n      enqueueSnackbar(\n        'Successfully saved',\n        {\n          variant: 'success',\n          anchorOrigin: {\n            horizontal: 'center',\n            vertical: 'top',\n          }\n        }\n      );\n\n      if ( isNew ) {\n        history.replace( `/count/${countId}` );\n      }\n    },\n    400\n  );\n\n  const [ actualQuantity, setActualQuantity ] = useState( data.actualQuantity ?? '' );\n\n  useEffect(() => {\n    if (data.actualQuantity)\n      setActualQuantity(data.actualQuantity);\n  }, [data.actualQuantity]);\n\n  return (\n    <TableRow>\n      <TableCell>{ data.ingredient.name } </TableCell>\n      <TableCell>{ `${data.theoreticalQuantity} ${data.unit ?? '?'}` }</TableCell>\n      <TableCell>\n        <Box display=\"flex\" alignItems=\"center\">\n          <Box width={100} mr={2}>\n            <TextInput \n              size=\"small\"\n              onChange={e => {\n                const value = e.target.value;\n                setActualQuantity(value);\n                updateRemote(data.ingredient.id, +value);\n              }}\n              value={actualQuantity}\n            />\n          </Box>\n          { data.unit ?? '?' }\n        </Box>\n      </TableCell>\n      <TableCell>\n        {\n          actualQuantity !== undefined && actualQuantity !== '' && !isNaN(+actualQuantity) &&\n          formatNumber(+actualQuantity - data.theoreticalQuantity)\n        }\n      </TableCell>\n    </TableRow>\n  );\n}\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/PantryPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryLogPage/PantryLogPage.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useVendorApi.api.hook.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/ViewOrderPage/styles.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/hooks/useProfile.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/DailyPrepPage/state.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useCountingListsApi.api.hook.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useCountingApi.api.hook.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor.api.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useIngredientsApi.api.hook.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/CalculatedPricePerUom.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/PacksTable/PacksTable.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/DailyPrepPage/PrintRecipesDialog.tsx",["969","970"],"import { Box, Button, Checkbox, Dialog, Typography, makeStyles, useTheme } from '@material-ui/core';\nimport { CheckCircleOutline, Clear } from '@material-ui/icons';\nimport React, { ChangeEvent, ReactElement, useCallback, useEffect, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useRecoilCallback, useRecoilState, useRecoilValue } from 'recoil';\n\nimport { TextInput } from '../../../UI/TextInput';\nimport { Seen, prepOverride, printRecipeBatches, printRecipeCount, printRecipeInclude, selectAll } from './state';\n\ninterface PrintRecipesDialogProps {\n  onConfirm: ( recipes: { recipeId: string, batches: number }[] ) => void;\n  onClose: ( ) => void;\n  open: boolean;\n  recipes: { id: string, name: string, batchSize: number, batchUnit: string, batches: number|string }[];\n}\n\nconst useStyles = makeStyles( theme => ( {\n  root: {\n  },\n  title: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'flex-end',\n    color: theme.palette.primary.main,\n    fontWeight: 400,\n    fontSize: '2rem',\n    paddingBottom: 16,\n    [theme.breakpoints.down( 'sm' )]: {\n      fontSize: '1.5rem',\n    },\n  },\n  content: {\n    textAlign: 'center',\n    padding: 0,\n  },\n  buttons: {\n    width: '100%',\n    padding: 0,\n    display: 'flex',\n    '& button': {\n      flex: 1,\n      borderRadius: 0,\n      border: 0,\n      color: '#fff',\n      padding: 16,\n      '& .MuiSvgIcon-root': {\n        marginRight: 8,\n      },\n    },\n  },\n  cancelButton: {\n    background: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n    },\n  },\n  confirmButton: {\n    background: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: theme.palette.primary.dark,\n    },\n  },\n} ) );\n\nexport const PrintRecipesDialog = ( props: PrintRecipesDialogProps ): ReactElement => {\n  const { t } = useTranslation();\n\n  const theme = useTheme();\n  const classes = useStyles( theme );\n\n  const recipes = useMemo( () => {\n    return props.recipes\n      .map( ( { id, name, batchSize, batchUnit, batches }, index ) => ( {\n        id,\n        name,\n        batchSize,\n        batchUnit,\n        include: true,\n        batches: batches + '',\n        index,\n      } ) )\n      .sort( ( a, b ) => {\n        if ( a.batches && ! b.batches )\n          return -1;\n        if ( b.batches && ! a.batches )\n          return 1;\n        return a.name.localeCompare( b.name );\n      } )\n    ;\n  }, [ props.recipes ] );\n\n  const initState = useRecoilCallback( ( { snapshot, set } ) => async () => {\n    const count = recipes.length;\n    set( printRecipeCount, count );\n    for ( let i = 0; i < count; i++ ) {\n      const recipe = recipes[i];\n      const { prep } = await snapshot.getPromise( prepOverride( recipe.id ) );\n      const batches = prep ? +prep/recipe.batchSize : +recipe.batches;\n      set( printRecipeInclude( i ), batches > 0 );\n      set( printRecipeBatches( i ), batches + '' );\n    }\n  }, [ recipes, props.open ] );\n\n  useEffect( () => {\n    initState();\n  }, [ initState ] );\n\n  const handleSubmit = ( e: React.FormEvent<HTMLFormElement> ): void => {\n    e.preventDefault();\n\n    const data = new FormData( e.currentTarget );\n    const recipesToInclude: { recipeId: string, batches: number }[] = [];\n    \n    for ( let i = 0; i < recipes.length; i++ ) {\n      const [ include, batches ] = [ data.get( `recipes[${i}].include` ), +( data.get( `recipes[${i}].batches` ) ?? 0 ) ];\n      if ( ! ( include && +batches > 0 ) )\n        continue;\n        \n      recipesToInclude.push( ( {\n        recipeId: recipes[i].id,\n        batches: +batches,\n      } ) );\n    }\n    \n    props.onConfirm?.( recipesToInclude );\n  };\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.onClose}\n      aria-labelledby=\"dialog-title\"\n      aria-describedby=\"dialog-description\"\n      className={classes.root}\n      fullWidth\n      maxWidth=\"sm\"\n      keepMounted\n    >\n      <form onSubmit={handleSubmit}>\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"stretch\">\n          <Box p={3} pb={2} className={classes.title} id=\"dialog-title\">\n            Print Recipes\n          </Box>\n          <Box px={3} flex={1} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Box flex={0} pr={1}>\n              <SelectAllCheckbox />\n            </Box>\n            <Box flex={1}><Typography variant=\"subtitle1\">Recipe</Typography></Box>\n            <Box flex={1}><Typography variant=\"subtitle1\">Batches</Typography></Box>\n          </Box>\n          <Box overflow=\"auto\" height={360}>\n            { recipes.map( ( recipe, index ) => <Row key={index} recipe={recipe} index={index} /> ) }\n          </Box>\n        </Box>\n        <div className={classes.buttons}>\n          <Button onClick={props.onClose} className={classes.cancelButton}>\n            <Clear />{t( 'strings.cancel' )}\n          </Button>\n          <Button type=\"submit\" className={classes.confirmButton} autoFocus>\n            <CheckCircleOutline />{'Print\\u00a0Recipes'}\n          </Button>\n        </div>\n      </form>\n    </Dialog>\n  );\n};\n\nconst SelectAllCheckbox = (): ReactElement => {\n  const selectAllState = useRecoilValue( selectAll );\n  \n  const handleCheckSelectAll = useRecoilCallback( ( { snapshot, set } ) => async ( checked: boolean ) => {\n    const count = await snapshot.getPromise( printRecipeCount );\n    for ( let i = 0; i < count; i++ )\n      set( printRecipeInclude( i ), checked );\n    \n  } );\n  \n  return (\n    <Checkbox\n      color=\"primary\"\n      indeterminate={( selectAllState & Seen.Both ) === Seen.Both}\n      checked={( selectAllState & Seen.True ) === Seen.True}\n      onChange={( _, checked ) => handleCheckSelectAll( checked )}\n    />\n  );\n};\n\nconst Row = (\n  { recipe,\n    index,\n  }:\n  {\n    recipe:\n    {\n      name: string,\n      batchSize: number,\n      batchUnit: string\n    },\n    index: number\n  } ): ReactElement|null => {\n  const [ include, setInclude ] = useRecoilState( printRecipeInclude( index ) );\n  const [ batches, setBatches ] = useRecoilState( printRecipeBatches( index ) );\n\n  const handleChangeInclude = useCallback( ( _, checked ) => setInclude( checked ), [] );\n  const handleChangeBatches = useCallback(\n    ( e: ChangeEvent<HTMLInputElement> ) => setBatches( e.currentTarget.value ),\n    []\n  );\n  \n  if ( ! recipe )\n    return null;\n\n  return (\n    <Box px={3} flex={1} display=\"flex\" alignItems=\"center\">\n      <Box flex={0} pr={1}>\n        <Checkbox\n          name={`recipes[${index}].include`}\n          value=\"1\" color=\"primary\"\n          id={`recipes[${index}].include`}\n          checked={include}\n          onChange={ handleChangeInclude}\n        />\n      </Box>\n      <Box flex={2}><label style={{ cursor: 'pointer' }} htmlFor={`recipes[${index}].include`}><Typography>{recipe.name}</Typography></label></Box>\n      <Box flex={1} px={1}>\n        <TextInput\n          name={`recipes[${index}].batches`}\n          label=\"Batches\"\n          size=\"small\"\n          value={batches}\n          onChange={ handleChangeBatches }\n        /></Box>\n      <Box flex={1} pl={1}><Typography>{`(${recipe.batchSize*+batches} ${recipe.batchUnit})`}</Typography></Box>\n    </Box>\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting-lists/counting-lists.api.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/app/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useInvoiceApi.api.hook.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/InvoicePage/CatalogItemInput.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/restaurant-details.form.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/vendor-item.form.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/vendor.form.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/forms/pantry-ingredient.form.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/counting.api.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/ingredients/ingredients.api.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoice.api.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/PantryPage/PacksTable/PackRow.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/enum/order-methods.enum.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/VendorSelector/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/CreateCatalogItemDialog/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-item.api.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/vendor.api.model.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/invoice-item.api.model.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/order.api.model.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/count-summary.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/invoice.api.model.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/counting-list-summary.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/models/vendor-item.api.model.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/pantry/interface/get-inventory.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/interface/get-count.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/interface/create-count.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/interface/update-count.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/VendorInput/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/app/UomConversionDialog/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/DateInput/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/CatalogItemInput/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/VendorSelector/VendorSelector.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-items/interface/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/profile/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-items/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/CreateCatalogItemDialog/EditCatalogItemDialog.tsx",["971"],"import { Box, CircularProgress, Dialog, Button as MuiButton, Typography, makeStyles, useTheme } from '@material-ui/core';\nimport { CheckCircleOutline, Clear } from '@material-ui/icons';\nimport { Controller, useForm, useWatch } from 'react-hook-form';\nimport React, { ReactElement, useEffect } from 'react';\nimport { TextInput, UnitInput } from '../../UI';\n\nimport { GetVendorResponse } from '../../../services/api/vendors';\nimport { Unit } from '../../../models/Unit';\nimport request from '../../../util/request';\nimport useSWR, { mutate } from 'swr';\nimport { useSnackbar } from 'notistack';\nimport { useTranslation } from 'react-i18next';\nimport { VendorInput } from '../../Form';\nimport { IngredientInput } from '../../UI/IngredientInput';\n\nimport { Ingredient } from '../../../models/Ingredient';\nimport { Pack } from '../Pages/PantryPage/PacksTable/PackRow';\n\nexport interface EditCatalogItemDialogProps {\n  vendorId: string;\n  ingredientId: string;\n  packId: string;\n  open: boolean;\n  onClose: () => void;\n  onConfirm: (catNumber: string) => void;\n}\n\nconst useStyles = makeStyles( theme => ( {\n  root: {\n  },\n  title: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'flex-end',\n    color: theme.palette.primary.main,\n    fontWeight: 400,\n    fontSize: '2rem',\n    paddingBottom: 16,\n    marginTop: 48,\n    [theme.breakpoints.down( 'sm' )]: {\n      fontSize: '1.5rem',\n    },\n  },\n  buttons: {\n    width: '100%',\n    padding: 0,\n    display: 'flex',\n    alignItems: 'flex-start',\n    '& button': {\n      flex: 1,\n      borderRadius: 0,\n      border: 0,\n      color: '#fff',\n      padding: 16,\n      '& .MuiSvgIcon-root': {\n        marginRight: 8,\n      },\n      background: theme.palette.primary.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primary.dark,\n      },\n    },\n    '& .cancel': {\n      background: theme.palette.secondaryGray.main,\n      '&:hover': {\n        backgroundColor: theme.palette.primaryGray.main,\n      },\n    },\n  },\n} ) );\n\nexport const EditCatalogItemDialog = ( props: EditCatalogItemDialogProps ): ReactElement => {\n  const theme = useTheme();\n  const classes = useStyles( theme );\n  const { t } = useTranslation();\n\n  const { control, register, getValues, reset } = useForm();\n\n  const ingredient = useWatch<Ingredient|null>( {\n    name: 'ingredient',\n    control,\n  } );\n\n  const vendorId = props.vendorId;\n  const ingredientId = props.ingredientId || ingredient?.id;\n\n  const rVendor = useSWR<GetVendorResponse>( ! vendorId ? null : `/vendors/${vendorId}` );\n  const rIngredient = useSWR( ! ingredientId ? null  : `/pantry/${ingredientId}` );\n\n  const { enqueueSnackbar } = useSnackbar();\n\n  const loading = !! ((! rVendor.data && props.vendorId) || (! rIngredient.data && props.ingredientId));\n\n  useEffect( () => {\n    if ( ! rIngredient.data )\n      return;\n\n    const pack = rIngredient.data.packs.find( (pack: Pack) => pack.id === props.packId );\n\n    if ( ! pack )\n      props.onClose();\n\n      console.log( pack );\n\n    reset( {\n      catalogNumber: pack.catalogNumber,\n      price: pack.price,\n      numItems: pack.numItems,\n      amountPerItem: pack.amountPerItem,\n      unit: pack.unit.symbol,\n    });\n\n  }, [ rIngredient.data ]);\n\n  const handleConfirm = async ( ) => {\n    const data = rIngredient.data;\n\n    const formValues = getValues();\n\n    delete formValues.vendor;\n    delete formValues.ingredient;\n\n    const pack = data.packs.find( (pack: Pack) => pack.id === props.packId );\n    Object.assign( pack, formValues );\n    \n    data.packs.forEach( (pack: any) => {\n      if ( pack.unit?.symbol )\n        pack.unit = pack.unit.symbol;\n      if ( pack.vendor?.id )\n        pack.vendorId = pack.vendor.id;\n      delete pack.vendor;\n      delete pack.par;\n\n      if ( pack.numItems )\n        pack.numItems = +pack.numItems;\n      else\n        delete pack.numItems;\n\n      if ( pack.amountPerItem )\n        pack.amountPerItem = +pack.amountPerItem;\n      else\n        delete pack.amountPerItem;\n    } );\n    \n    delete data.parLevel;\n    delete data.usedIn;\n    \n    await request.put( `/pantry/${ingredientId}`, { body: data } );\n    enqueueSnackbar( t( 'strings.successfully-saved-changes' ), { variant: 'success' } );\n    await rIngredient.mutate();\n    await mutate( `/vendors/${vendorId}/catalog/${ingredientId}` );\n\n    props.onClose();\n    props.onConfirm( formValues.catalogNumber );\n  }\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.onClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      className={classes.root}\n      fullWidth\n      maxWidth=\"md\"\n    >\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n        <div className={classes.title} id=\"alert-dialog-title\">\n          Edit Catalog Item\n        </div>\n        { loading \n            ? <Box py={2}><CircularProgress /></Box>\n            : \n              <Box minWidth=\"70%\">\n                <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                  <Box pr={1}><Typography variant=\"subtitle1\">Vendor: </Typography></Box>\n                  { props.vendorId \n                      ? <Typography>{ rVendor.data?.name }</Typography>\n                      : <VendorInput name=\"vendor\" control={control} />\n                  }\n                </Box>\n                <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n                  <Box pr={1}><Typography variant=\"subtitle1\">Ingredient: </Typography></Box>\n                  { props.ingredientId \n                      ? <Typography>{ rIngredient.data?.name }</Typography>\n                      : \n                        <Controller\n                          name=\"ingredient\"\n                          control={control}\n                          defaultValue={null}\n                          render={\n                            ({ onChange, value }) => \n                              <IngredientInput \n                                type=\"pantry\"\n                                onCreate={onChange}\n                                onSelect={onChange}\n                                value={value?.name}\n                              />\n                          }\n                       />\n                  }\n                </Box>\n                <form>\n                  <Box my={2} display=\"flex\" flexDirection=\"column\">\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-evenly\">\n                      <Box flex={1} mr={4}>\n                        <TextInput name=\"catalogNumber\" inputRef={register} size=\"small\" label=\"Catalog #\" />\n                        </Box>\n                      <Box flex={1}>\n                        <TextInput name=\"price\" inputRef={register} size=\"small\" label=\"Price\" />\n                        </Box>\n                    </Box>\n                    <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"space-evenly\">\n                      <Box flex={1} mr={4}>\n                        <TextInput name=\"numItems\" inputRef={register} size=\"small\" label=\"Units\" />\n                      </Box>\n                      <Box flex={1} mr={4}>\n                        <TextInput name=\"amountPerItem\" inputRef={register} size=\"small\" label=\"Amount per unit\" />\n                      </Box>\n                      <Box flex={1}>\n                        <Controller\n                          name=\"unit\"\n                          control={control}\n                          render={\n                            ({ onChange, value }) => \n                              <UnitInput\n                                value={value}\n                                size=\"small\"\n                                onSelect={(unit: Unit) => onChange(unit.symbol)} \n                                onCreateNewUnit={onChange}\n                              />\n                          }\n                        />\n                      </Box>\n                    </Box>\n                  </Box>\n                </form>\n              </Box>\n        }\n        <div className={classes.buttons}>\n          <MuiButton className=\"cancel\" onClick={ props.onClose } autoFocus>\n            <Clear />{t( 'strings.cancel' )}\n          </MuiButton>\n          <MuiButton disabled={loading} onClick={ handleConfirm }>\n            <CheckCircleOutline />{t( 'strings.save' )}\n          </MuiButton>\n        </div>\n      </Box>\n    </Dialog>\n  );\n};","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/CreateCatalogItemDialog/CreateCatalogItemDialog.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/VendorInput/VendorInput.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/app/UomConversionDialog/UomConversionDialog.tsx",["972"],"import React, { ReactElement } from 'react';\nimport useSWR from 'swr';\nimport { ConversionsDialog } from '../../UI/ConversionsDialog';\n\nexport interface UomConversionDialogProps {\n  ingredientId: number;\n  open: boolean;\n  onClose?: () => void;\n  onConfirm?: () => void;\n}\n\nexport const UomConversionDialog = ( \n  {\n    ingredientId,\n    open,\n    onClose,\n    onConfirm,\n  }: UomConversionDialogProps,\n): ReactElement => {\n  const rIngredient = useSWR( `/ingredients/${ingredientId}` );\n  const rUnits = useSWR( '/units' );\n\n  const handleConfirm = () => {};\n\n  return (\n    <ConversionsDialog\n      units={rUnits.data?.items ?? []}\n      onConfirm={handleConfirm}\n      onClose={() => onClose?.()}\n      conversions={[]}\n      onCreateNewUnit={() => {}}\n      showing={open}\n      loading={! rUnits.data && rUnits.isValidating}\n    />\n  );\n};\n","/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/DateInput/DateInput.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/CatalogItemInput/CatalogItemInput.tsx",["973"],"import { Control, useController } from 'react-hook-form';\nimport React, { useState } from 'react';\n\nimport { GetVendorPacksResponse } from '../../../services/api/vendors/interface/GetVendorPacks.api.interface';\nimport { Ingredient } from '../../../models/Ingredient';\nimport { MenuItem } from '@material-ui/core';\nimport { ReactElement } from 'react';\nimport { TextInput } from '../../UI';\nimport { Vendor } from '../../../services/api/models/vendor.api.model';\nimport useSWR from 'swr';\nimport { CreateCatalogItemDialog } from '../../src';\n\nexport interface CatalogItemInputProps {\n  name: string;\n  control: Control;\n  vendorId: Vendor['id'] | null;\n  ingredientId: Ingredient['id'] | null;\n  textOnly: boolean;\n}\n\nexport const CatalogItemInput = ( props: CatalogItemInputProps ): ReactElement => \n{\n  const { name, control, vendorId, ingredientId } = props;\n\n  const [ isCreatingNew, setCreatingNew ] = useState( false );\n  \n  const rVendorItems = useSWR<GetVendorPacksResponse>( \n    (vendorId && ingredientId) ? `/vendors/${vendorId}/catalog/${ingredientId}` : null\n  );\n\n  const {\n    field: { onChange, value }\n  } = useController({\n    name,\n    control,\n    defaultValue: null,\n  });\n\n  if ( props.textOnly )\n    return value;\n\n  return (\n    <>\n      <TextInput \n        select={!!vendorId}\n        size=\"small\"\n        disabled={!vendorId}\n        onChange={onChange}\n        value={value ?? ''}\n      >\n        { vendorId && ingredientId\n          ?\n            [\n              ...rVendorItems.data?.map( pack => \n                <MenuItem key={pack.catalogNumber} value={pack.catalogNumber}>{pack.catalogNumber}</MenuItem>\n              ) ?? [],\n              <MenuItem onClick={() => setCreatingNew(true)}>Create New</MenuItem>\n            ]\n          : []\n        }\n      </TextInput>\n      { vendorId && ingredientId &&\n          <CreateCatalogItemDialog\n            vendorId={vendorId!}\n            ingredientId={ingredientId!}\n            open={isCreatingNew}\n            onClose={() => setCreatingNew(false)}\n            onConfirm={onChange}\n          />\n      }      \n    </>\n  );\n};","/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useVendorItemApi.api.hook.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/UpdateVendor.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/profile/profile.api.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/UpdateInvoice.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/ListInvoices.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/GetInvoice.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/invoices/interface/CreateInvoice.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/Form/DateInput/styles.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-items/interface/UpdateVendorItem.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendor-items/interface/CreateVendorItem.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/ListVendors.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/GetVendor.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/vendors/interface/CreateVendor.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/hooks/useProfileApi.api.hook.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/profile/interface/index.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/counting-lists/interface/get-counting-list.api.interface.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/services/api/profile/interface/get-profile.response.ts",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/Pages/Pantry/IngredientRow.tsx",[],"/home/paul/Projects/Toptal/ReadyPrep/client/src/components/src/MenuItemSelector.tsx",["974"],"import React, { ReactElement, useEffect, useState } from 'react';\n\nimport request from '../../util/request';\nimport { MenuItemSelector, MenuItemSelectorProps } from '../UI/MenuItemSelector';\n\nexport default (\n  props: Omit< MenuItemSelectorProps, 'loading'|'onQueryChange'|'query'|'items' > & { excludedItems?: number[] }\n): ReactElement => {\n  const [ loading, setLoading ] = useState( true );\n  const [ query, setQuery ] = useState( '' );\n  const [ items, setMenuItems ] = useState( [] );\n\n  useEffect( () => {\n    if ( ! query.trim() ) {\n      setMenuItems( [] );\n      return;\n    }\n\n    ( async () => {\n      const { body: res } = await request.get( `/items/search?query=${query}` );\n      setLoading( false );\n      setMenuItems( res );\n    } )();\n  }, [ query ] );\n\n\n  return <MenuItemSelector\n    {...props}\n    loading={loading}\n    query={ query }\n    onQueryChange={ ( query: string ) => setQuery( query ) }\n    onClose={ () => {\n      setQuery( '' ); props.onClose();\n    } }\n    items={ items.filter( ( { id } ) => ! props.excludedItems?.includes( id ) )}\n  />;\n};\n",{"ruleId":"975","severity":1,"message":"976","line":104,"column":6,"nodeType":"977","endLine":104,"endColumn":8,"suggestions":"978"},{"ruleId":"975","severity":1,"message":"979","line":137,"column":6,"nodeType":"977","endLine":137,"endColumn":18,"suggestions":"980"},{"ruleId":"981","severity":1,"message":"982","line":231,"column":49,"nodeType":"983","endLine":231,"endColumn":111},{"ruleId":"984","severity":1,"message":"985","line":338,"column":11,"nodeType":"986","messageId":"987","endLine":338,"endColumn":21},{"ruleId":"975","severity":1,"message":"988","line":12,"column":6,"nodeType":"977","endLine":12,"endColumn":15,"suggestions":"989"},{"ruleId":"984","severity":1,"message":"990","line":2,"column":107,"nodeType":"986","messageId":"987","endLine":2,"endColumn":119},{"ruleId":"975","severity":1,"message":"991","line":98,"column":6,"nodeType":"977","endLine":98,"endColumn":44,"suggestions":"992"},{"ruleId":"984","severity":1,"message":"993","line":1,"column":69,"nodeType":"986","messageId":"987","endLine":1,"endColumn":75},{"ruleId":"984","severity":1,"message":"994","line":1,"column":77,"nodeType":"986","messageId":"987","endLine":1,"endColumn":87},{"ruleId":"984","severity":1,"message":"995","line":88,"column":19,"nodeType":"986","messageId":"987","endLine":88,"endColumn":28},{"ruleId":"975","severity":1,"message":"996","line":118,"column":6,"nodeType":"977","endLine":118,"endColumn":23,"suggestions":"997"},{"ruleId":"975","severity":1,"message":"998","line":75,"column":6,"nodeType":"977","endLine":75,"endColumn":23,"suggestions":"999"},{"ruleId":"975","severity":1,"message":"1000","line":175,"column":6,"nodeType":"977","endLine":175,"endColumn":14,"suggestions":"1001"},{"ruleId":"984","severity":1,"message":"1002","line":199,"column":27,"nodeType":"986","messageId":"987","endLine":199,"endColumn":31},{"ruleId":"975","severity":1,"message":"1003","line":119,"column":6,"nodeType":"977","endLine":119,"endColumn":23,"suggestions":"1004"},{"ruleId":"984","severity":1,"message":"1005","line":2,"column":27,"nodeType":"986","messageId":"987","endLine":2,"endColumn":32},{"ruleId":"984","severity":1,"message":"1006","line":3,"column":23,"nodeType":"986","messageId":"987","endLine":3,"endColumn":37},{"ruleId":"981","severity":1,"message":"982","line":29,"column":7,"nodeType":"983","endLine":29,"endColumn":62},{"ruleId":"975","severity":1,"message":"1007","line":70,"column":6,"nodeType":"977","endLine":70,"endColumn":21,"suggestions":"1008"},{"ruleId":"1009","severity":1,"message":"1010","line":21,"column":1,"nodeType":"1011","endLine":32,"endColumn":3},{"ruleId":"975","severity":1,"message":"1012","line":66,"column":6,"nodeType":"977","endLine":66,"endColumn":48,"suggestions":"1013"},{"ruleId":"975","severity":1,"message":"1014","line":92,"column":6,"nodeType":"977","endLine":92,"endColumn":32,"suggestions":"1015"},{"ruleId":"975","severity":1,"message":"1016","line":92,"column":8,"nodeType":"1017","endLine":92,"endColumn":30},{"ruleId":"975","severity":1,"message":"1018","line":129,"column":6,"nodeType":"977","endLine":129,"endColumn":42,"suggestions":"1019"},{"ruleId":"975","severity":1,"message":"1014","line":79,"column":6,"nodeType":"977","endLine":79,"endColumn":32,"suggestions":"1020"},{"ruleId":"975","severity":1,"message":"1016","line":79,"column":8,"nodeType":"1017","endLine":79,"endColumn":30},{"ruleId":"975","severity":1,"message":"1021","line":136,"column":6,"nodeType":"977","endLine":136,"endColumn":42,"suggestions":"1022"},{"ruleId":"1023","severity":1,"message":"1024","line":152,"column":25,"nodeType":"1025","messageId":"1026","endLine":152,"endColumn":54},{"ruleId":"975","severity":1,"message":"1027","line":264,"column":14,"nodeType":"977","endLine":264,"endColumn":16,"suggestions":"1028"},{"ruleId":"975","severity":1,"message":"1029","line":51,"column":6,"nodeType":"977","endLine":51,"endColumn":22,"suggestions":"1030"},{"ruleId":"981","severity":1,"message":"1031","line":145,"column":25,"nodeType":"983","endLine":151,"endColumn":27},{"ruleId":"975","severity":1,"message":"1012","line":66,"column":6,"nodeType":"977","endLine":66,"endColumn":48,"suggestions":"1032"},{"ruleId":"975","severity":1,"message":"1012","line":64,"column":6,"nodeType":"977","endLine":64,"endColumn":48,"suggestions":"1033"},{"ruleId":"975","severity":1,"message":"1014","line":95,"column":6,"nodeType":"977","endLine":95,"endColumn":32,"suggestions":"1034"},{"ruleId":"975","severity":1,"message":"1016","line":95,"column":8,"nodeType":"1017","endLine":95,"endColumn":30},{"ruleId":"975","severity":1,"message":"1035","line":168,"column":6,"nodeType":"977","endLine":168,"endColumn":42,"suggestions":"1036"},{"ruleId":"975","severity":1,"message":"1027","line":341,"column":138,"nodeType":"977","endLine":341,"endColumn":140,"suggestions":"1037"},{"ruleId":"975","severity":1,"message":"1012","line":70,"column":6,"nodeType":"977","endLine":70,"endColumn":48,"suggestions":"1038"},{"ruleId":"1009","severity":1,"message":"1010","line":7,"column":1,"nodeType":"1011","endLine":12,"endColumn":3},{"ruleId":"1009","severity":1,"message":"1010","line":8,"column":1,"nodeType":"1011","endLine":27,"endColumn":3},{"ruleId":"1009","severity":1,"message":"1010","line":7,"column":1,"nodeType":"1011","endLine":19,"endColumn":3},{"ruleId":"1009","severity":1,"message":"1010","line":7,"column":1,"nodeType":"1011","endLine":42,"endColumn":3},{"ruleId":"975","severity":1,"message":"1039","line":17,"column":6,"nodeType":"977","endLine":17,"endColumn":43,"suggestions":"1040"},{"ruleId":"975","severity":1,"message":"1041","line":30,"column":6,"nodeType":"977","endLine":30,"endColumn":15,"suggestions":"1042"},{"ruleId":"984","severity":1,"message":"1043","line":35,"column":11,"nodeType":"986","messageId":"987","endLine":35,"endColumn":36},{"ruleId":"975","severity":1,"message":"1044","line":36,"column":6,"nodeType":"977","endLine":36,"endColumn":9,"suggestions":"1045"},{"ruleId":"975","severity":1,"message":"1046","line":108,"column":6,"nodeType":"977","endLine":108,"endColumn":56,"suggestions":"1047"},{"ruleId":"975","severity":1,"message":"1048","line":204,"column":85,"nodeType":"977","endLine":204,"endColumn":87,"suggestions":"1049"},{"ruleId":"975","severity":1,"message":"1050","line":207,"column":5,"nodeType":"977","endLine":207,"endColumn":7,"suggestions":"1051"},{"ruleId":"975","severity":1,"message":"1052","line":113,"column":6,"nodeType":"977","endLine":113,"endColumn":26,"suggestions":"1053"},{"ruleId":"984","severity":1,"message":"1054","line":20,"column":9,"nodeType":"986","messageId":"987","endLine":20,"endColumn":20},{"ruleId":"984","severity":1,"message":"1055","line":1,"column":19,"nodeType":"986","messageId":"987","endLine":1,"endColumn":29},{"ruleId":"1009","severity":1,"message":"1010","line":6,"column":1,"nodeType":"1011","endLine":37,"endColumn":3},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'setPlanDialog'. Either include it or remove the dependency array.","ArrayExpression",["1056"],"React Hook useEffect has a missing dependency: 'loadUser'. Either include it or remove the dependency array.",["1057"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","@typescript-eslint/no-unused-vars","'planDialog' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'minimumDuration'. Either include it or remove the dependency array.",["1058"],"'PopoverProps' is defined but never used.","React Hook useEffect has missing dependencies: 'allowedTypes', 'props.initialQuery', and 'selected'. Either include them or remove the dependency array. If 'setQuery' needs the current value of 'props.initialQuery', you can also switch to useReducer instead of useState and read 'props.initialQuery' in the reducer.",["1059"],"'Switch' is defined but never used.","'Typography' is defined but never used.","'setYearly' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.unit' and 'setAmount'. Either include them or remove the dependency array.",["1060"],"React Hook useEffect has a missing dependency: 'props.name'. Either include it or remove the dependency array. If 'setName' needs the current value of 'props.name', you can also switch to useReducer instead of useState and read 'props.name' in the reducer.",["1061"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1062"],"'name' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.conversions' and 'props.units'. Either include them or remove the dependency array. If 'setConversions' needs the current value of 'props.conversions', you can also switch to useReducer instead of useState and read 'props.conversions' in the reducer.",["1063"],"'Paper' is defined but never used.","'BulkUploadIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'getCost'. Either include it or remove the dependency array.",["1064"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has a missing dependency: 'handlePlanUpgradeRequired'. Either include it or remove the dependency array.",["1065"],"React Hook useEffect has missing dependencies: 'error' and 'success'. Either include them or remove the dependency array.",["1066"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","UnaryExpression","React Hook useEffect has missing dependencies: 'setLoading', 'setName', and 'setSections'. Either include them or remove the dependency array.",["1067"],["1068"],"React Hook useEffect has missing dependencies: 'setAverageWeeklySales', 'setIngredients', 'setInstructions', 'setLoading', 'setName', and 'setPrice'. Either include them or remove the dependency array.",["1069"],"no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","React Hook useCallback has a missing dependency: 'setIngredients'. Either include it or remove the dependency array.",["1070"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["1071"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["1072"],["1073"],["1074"],"React Hook useEffect has missing dependencies: 'setBatchAmount', 'setBatchUnit', 'setConversions', 'setIngredients', 'setInstructions', 'setLoading', 'setName', 'setParRange', 'setShelfLife', and 'setWaste'. Either include them or remove the dependency array.",["1075"],["1076"],["1077"],"React Hook useEffect has a missing dependency: 'query'. Either include it or remove the dependency array.",["1078"],"React Hook useEffect has a missing dependency: 'props.type'. Either include it or remove the dependency array. If 'setIngredients' needs the current value of 'props.type', you can also switch to useReducer instead of useState and read 'props.type' in the reducer.",["1079"],"'handlePlanUpgradeRequired' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'date'. Either include it or remove the dependency array.",["1080"],"React Hook useMemo has an unnecessary dependency: 'rInventory.data'. Either exclude it or remove the dependency array.",["1081"],"React Hook useCallback has a missing dependency: 'setInclude'. Either include it or remove the dependency array.",["1082"],"React Hook useCallback has a missing dependency: 'setBatches'. Either include it or remove the dependency array.",["1083"],"React Hook useEffect has missing dependencies: 'props' and 'reset'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1084"],"'rIngredient' is assigned a value but never used.","'Controller' is defined but never used.",{"desc":"1085","fix":"1086"},{"desc":"1087","fix":"1088"},{"desc":"1089","fix":"1090"},{"desc":"1091","fix":"1092"},{"desc":"1093","fix":"1094"},{"desc":"1095","fix":"1096"},{"desc":"1097","fix":"1098"},{"desc":"1099","fix":"1100"},{"desc":"1101","fix":"1102"},{"desc":"1103","fix":"1104"},{"desc":"1105","fix":"1106"},{"desc":"1107","fix":"1108"},{"desc":"1105","fix":"1109"},{"desc":"1110","fix":"1111"},{"desc":"1112","fix":"1113"},{"desc":"1114","fix":"1115"},{"desc":"1103","fix":"1116"},{"desc":"1103","fix":"1117"},{"desc":"1105","fix":"1118"},{"desc":"1119","fix":"1120"},{"desc":"1112","fix":"1121"},{"desc":"1103","fix":"1122"},{"desc":"1123","fix":"1124"},{"desc":"1125","fix":"1126"},{"desc":"1127","fix":"1128"},{"desc":"1129","fix":"1130"},{"desc":"1131","fix":"1132"},{"desc":"1133","fix":"1134"},{"desc":"1135","fix":"1136"},"Update the dependencies array to be: [setPlanDialog]",{"range":"1137","text":"1138"},"Update the dependencies array to be: [loadUser, location]",{"range":"1139","text":"1140"},"Update the dependencies array to be: [minimumDuration, state]",{"range":"1141","text":"1142"},"Update the dependencies array to be: [showing, units, props.allowedTypes, props.initialQuery, allowedTypes, selected]",{"range":"1143","text":"1144"},"Update the dependencies array to be: [props.showing, props.unit, setAmount]",{"range":"1145","text":"1146"},"Update the dependencies array to be: [props.name, props.showing]",{"range":"1147","text":"1148"},"Update the dependencies array to be: [cost, props]",{"range":"1149","text":"1150"},"Update the dependencies array to be: [props.conversions, props.showing, props.units]",{"range":"1151","text":"1152"},"Update the dependencies array to be: [getCost, ingredients]",{"range":"1153","text":"1154"},"Update the dependencies array to be: [loading, queryString, params.search, t, handlePlanUpgradeRequired]",{"range":"1155","text":"1156"},"Update the dependencies array to be: [error, success]",{"range":"1157","text":"1158"},"Update the dependencies array to be: [id, defaultErrorMessage, loading, setLoading, setName, setSections]",{"range":"1159","text":"1160"},{"range":"1161","text":"1158"},"Update the dependencies array to be: [id, defaultErrorMessage, loading, setLoading, setName, setPrice, setAverageWeeklySales, setInstructions, setIngredients]",{"range":"1162","text":"1163"},"Update the dependencies array to be: [setIngredients]",{"range":"1164","text":"1165"},"Update the dependencies array to be: [history, params.token]",{"range":"1166","text":"1167"},{"range":"1168","text":"1156"},{"range":"1169","text":"1156"},{"range":"1170","text":"1158"},"Update the dependencies array to be: [id, defaultErrorMessage, loading, setLoading, setName, setBatchAmount, setBatchUnit, setParRange, setWaste, setShelfLife, setConversions, setIngredients, setInstructions]",{"range":"1171","text":"1172"},{"range":"1173","text":"1165"},{"range":"1174","text":"1156"},"Update the dependencies array to be: [props.initialQuery, props.showing, query]",{"range":"1175","text":"1176"},"Update the dependencies array to be: [props.type, query]",{"range":"1177","text":"1178"},"Update the dependencies array to be: [date]",{"range":"1179","text":"1180"},"Update the dependencies array to be: [rCount.data, rSelectedList.data]",{"range":"1181","text":"1182"},"Update the dependencies array to be: [setInclude]",{"range":"1183","text":"1184"},"Update the dependencies array to be: [setBatches]",{"range":"1185","text":"1186"},"Update the dependencies array to be: [props, rIngredient.data, reset]",{"range":"1187","text":"1188"},[4434,4436],"[setPlanDialog]",[5205,5217],"[loadUser, location]",[511,520],"[minimumDuration, state]",[2753,2791],"[showing, units, props.allowedTypes, props.initialQuery, allowedTypes, selected]",[3183,3200],"[props.showing, props.unit, setAmount]",[1784,1801],"[props.name, props.showing]",[6585,6593],"[cost, props]",[3784,3801],"[props.conversions, props.showing, props.units]",[2922,2937],"[getCost, ingredients]",[2393,2435],"[loading, queryString, params.search, t, handlePlanUpgradeRequired]",[3682,3708],"[error, success]",[4543,4579],"[id, defaultErrorMessage, loading, setLoading, setName, setSections]",[3318,3344],[4998,5034],"[id, defaultErrorMessage, loading, setLoading, setName, setPrice, setAverageWeeklySales, setInstructions, setIngredients]",[9567,9569],"[setIngredients]",[1469,1485],"[history, params.token]",[2424,2466],[2275,2317],[4303,4329],[6532,6568],"[id, defaultErrorMessage, loading, setLoading, setName, setBatchAmount, setBatchUnit, setParRange, setWaste, setShelfLife, setConversions, setIngredients, setInstructions]",[13268,13270],[2469,2511],[657,694],"[props.initialQuery, props.showing, query]",[1053,1062],"[props.type, query]",[1629,1632],"[date]",[3667,3717],"[rCount.data, rSelectedList.data]",[6134,6136],"[setInclude]",[6268,6270],"[setBatches]",[3175,3195],"[props, rIngredient.data, reset]"]